{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/geek/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/geek/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/geek/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/jquery.min.js","path":"libs/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/geek/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/HELP-US-OUT.txt","path":"libs/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/highlight.pack.js","path":"libs/highlight/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/animated.less","path":"libs/font-awesome/less/animated.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/bordered-pulled.less","path":"libs/font-awesome/less/bordered-pulled.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/core.less","path":"libs/font-awesome/less/core.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/fixed-width.less","path":"libs/font-awesome/less/fixed-width.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/font-awesome.less","path":"libs/font-awesome/less/font-awesome.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/icons.less","path":"libs/font-awesome/less/icons.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/larger.less","path":"libs/font-awesome/less/larger.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/list.less","path":"libs/font-awesome/less/list.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/mixins.less","path":"libs/font-awesome/less/mixins.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/path.less","path":"libs/font-awesome/less/path.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/rotated-flipped.less","path":"libs/font-awesome/less/rotated-flipped.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/screen-reader.less","path":"libs/font-awesome/less/screen-reader.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/stacked.less","path":"libs/font-awesome/less/stacked.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/variables.less","path":"libs/font-awesome/less/variables.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/scss/font-awesome.scss","path":"libs/font-awesome/scss/font-awesome.scss","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/a11y-dark.css","path":"libs/highlight/styles/a11y-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/a11y-light.css","path":"libs/highlight/styles/a11y-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/agate.css","path":"libs/highlight/styles/agate.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/an-old-hope.css","path":"libs/highlight/styles/an-old-hope.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/androidstudio.css","path":"libs/highlight/styles/androidstudio.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/arduino-light.css","path":"libs/highlight/styles/arduino-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/arta.css","path":"libs/highlight/styles/arta.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/ascetic.css","path":"libs/highlight/styles/ascetic.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-cave-dark.css","path":"libs/highlight/styles/atelier-cave-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-cave-light.css","path":"libs/highlight/styles/atelier-cave-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-dune-dark.css","path":"libs/highlight/styles/atelier-dune-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-dune-light.css","path":"libs/highlight/styles/atelier-dune-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-estuary-dark.css","path":"libs/highlight/styles/atelier-estuary-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-estuary-light.css","path":"libs/highlight/styles/atelier-estuary-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-forest-dark.css","path":"libs/highlight/styles/atelier-forest-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-forest-light.css","path":"libs/highlight/styles/atelier-forest-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-heath-dark.css","path":"libs/highlight/styles/atelier-heath-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-heath-light.css","path":"libs/highlight/styles/atelier-heath-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-lakeside-dark.css","path":"libs/highlight/styles/atelier-lakeside-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-lakeside-light.css","path":"libs/highlight/styles/atelier-lakeside-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-plateau-dark.css","path":"libs/highlight/styles/atelier-plateau-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-plateau-light.css","path":"libs/highlight/styles/atelier-plateau-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-savanna-dark.css","path":"libs/highlight/styles/atelier-savanna-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-savanna-light.css","path":"libs/highlight/styles/atelier-savanna-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-seaside-dark.css","path":"libs/highlight/styles/atelier-seaside-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-seaside-light.css","path":"libs/highlight/styles/atelier-seaside-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-sulphurpool-dark.css","path":"libs/highlight/styles/atelier-sulphurpool-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-sulphurpool-light.css","path":"libs/highlight/styles/atelier-sulphurpool-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-dark-reasonable.css","path":"libs/highlight/styles/atom-one-dark-reasonable.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-dark.css","path":"libs/highlight/styles/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-light.css","path":"libs/highlight/styles/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/brown-paper.css","path":"libs/highlight/styles/brown-paper.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/brown-papersq.png","path":"libs/highlight/styles/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/codepen-embed.css","path":"libs/highlight/styles/codepen-embed.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/color-brewer.css","path":"libs/highlight/styles/color-brewer.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/darcula.css","path":"libs/highlight/styles/darcula.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/dark.css","path":"libs/highlight/styles/dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/darkula.css","path":"libs/highlight/styles/darkula.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/default.css","path":"libs/highlight/styles/default.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/docco.css","path":"libs/highlight/styles/docco.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/dracula.css","path":"libs/highlight/styles/dracula.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/far.css","path":"libs/highlight/styles/far.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/foundation.css","path":"libs/highlight/styles/foundation.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/github-gist.css","path":"libs/highlight/styles/github-gist.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/github.css","path":"libs/highlight/styles/github.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/gml.css","path":"libs/highlight/styles/gml.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/googlecode.css","path":"libs/highlight/styles/googlecode.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/gradient-dark.css","path":"libs/highlight/styles/gradient-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/grayscale.css","path":"libs/highlight/styles/grayscale.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/gruvbox-dark.css","path":"libs/highlight/styles/gruvbox-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/gruvbox-light.css","path":"libs/highlight/styles/gruvbox-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/hopscotch.css","path":"libs/highlight/styles/hopscotch.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/hybrid.css","path":"libs/highlight/styles/hybrid.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/idea.css","path":"libs/highlight/styles/idea.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/ir-black.css","path":"libs/highlight/styles/ir-black.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/isbl-editor-dark.css","path":"libs/highlight/styles/isbl-editor-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/isbl-editor-light.css","path":"libs/highlight/styles/isbl-editor-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/kimbie.dark.css","path":"libs/highlight/styles/kimbie.dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/kimbie.light.css","path":"libs/highlight/styles/kimbie.light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/lightfair.css","path":"libs/highlight/styles/lightfair.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/magula.css","path":"libs/highlight/styles/magula.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/mono-blue.css","path":"libs/highlight/styles/mono-blue.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/monokai-sublime.css","path":"libs/highlight/styles/monokai-sublime.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/monokai.css","path":"libs/highlight/styles/monokai.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/night-owl.css","path":"libs/highlight/styles/night-owl.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/nord.css","path":"libs/highlight/styles/nord.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/obsidian.css","path":"libs/highlight/styles/obsidian.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/ocean.css","path":"libs/highlight/styles/ocean.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/paraiso-dark.css","path":"libs/highlight/styles/paraiso-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/paraiso-light.css","path":"libs/highlight/styles/paraiso-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/pojoaque.css","path":"libs/highlight/styles/pojoaque.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/pojoaque.jpg","path":"libs/highlight/styles/pojoaque.jpg","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/purebasic.css","path":"libs/highlight/styles/purebasic.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/qtcreator_dark.css","path":"libs/highlight/styles/qtcreator_dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/qtcreator_light.css","path":"libs/highlight/styles/qtcreator_light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/railscasts.css","path":"libs/highlight/styles/railscasts.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/rainbow.css","path":"libs/highlight/styles/rainbow.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/routeros.css","path":"libs/highlight/styles/routeros.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/school-book.css","path":"libs/highlight/styles/school-book.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/school-book.png","path":"libs/highlight/styles/school-book.png","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/shades-of-purple.css","path":"libs/highlight/styles/shades-of-purple.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/solarized-dark.css","path":"libs/highlight/styles/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/solarized-light.css","path":"libs/highlight/styles/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/sunburst.css","path":"libs/highlight/styles/sunburst.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-blue.css","path":"libs/highlight/styles/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-bright.css","path":"libs/highlight/styles/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-eighties.css","path":"libs/highlight/styles/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night.css","path":"libs/highlight/styles/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow.css","path":"libs/highlight/styles/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/vs.css","path":"libs/highlight/styles/vs.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/vs2015.css","path":"libs/highlight/styles/vs2015.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/xcode.css","path":"libs/highlight/styles/xcode.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/xt256.css","path":"libs/highlight/styles/xt256.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/zenburn.css","path":"libs/highlight/styles/zenburn.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/vue3新特性对比vue2-x.md","hash":"6548fcb42eac8a811a4ba189f723fad2214014c0","modified":1638856661993},{"_id":"source/_posts/array.md","hash":"0fe1e3886a1e716859cc6bbcac195c358a3479a1","modified":1638780296300},{"_id":"source/_posts/hexo.md","hash":"faa5cd37abb58ae25e3e0a919446cb5d7add551d","modified":1638779539982},{"_id":"themes/geek/.gitignore","hash":"824c6bad36ef799350c37bcd0fe5a1a88295d2f8","modified":1638768906892},{"_id":"themes/geek/LICENSE","hash":"6df987ed9243a0a0a58ab6ee76976989b7ae05f4","modified":1638776641626},{"_id":"themes/geek/_config.yml","hash":"79295bc3dbc7f7d3c376851bb632dbd6d8c9bada","modified":1638856874109},{"_id":"themes/geek/README.md","hash":"95aa0a37d3639f5e1eb6bedbbb2cb9dc3bde3444","modified":1638768906892},{"_id":"themes/geek/layout/post.ejs","hash":"f5b31036768f4e7ae0577058f80e497562187a7c","modified":1638768906896},{"_id":"themes/geek/layout/index.ejs","hash":"0a5bc208ae9603188aed8a305540c2c12f72e6ba","modified":1638776718520},{"_id":"themes/geek/layout/_partial/footer.ejs","hash":"6a4688878dcadeb5d0107a972b8fc28c3380ac7c","modified":1638777043867},{"_id":"themes/geek/layout/layout.ejs","hash":"710b13e895e7a9cc2341874fafbfeef1ae9b7279","modified":1638768906896},{"_id":"themes/geek/layout/_partial/head.ejs","hash":"caa33d4a948dd9c4e8ccb116c2f1e4471842aec5","modified":1638768906896},{"_id":"themes/geek/layout/_partial/nav.ejs","hash":"42e47f3014a43c8589adfa1f7f34355a586b1ec5","modified":1638768906896},{"_id":"themes/geek/source/css/style.styl","hash":"7f2970c1b1f8ff89de90739725526ebe2686e49f","modified":1638768906897},{"_id":"themes/geek/source/favicon.ico","hash":"f151d72a72fb27f8b658cfa64370d2d3f81d8aa2","modified":1638771712365},{"_id":"themes/geek/source/js/js.js","hash":"0fb795dc0d1c2da9bee007a73fe246a03c88626b","modified":1638768906898},{"_id":"themes/geek/source/css/_partial/markdown.styl","hash":"ec536affb40d91a181b6fa1df22672a07188671a","modified":1638768906896},{"_id":"themes/geek/source/css/_partial/post.styl","hash":"23aba61940dd2f9719c778318bbaa92e859f6b60","modified":1638768906897},{"_id":"themes/geek/source/css/_partial/index.styl","hash":"7750090da83d1a477d1735bed152434b2e9053ab","modified":1638773105039},{"_id":"themes/geek/source/img/logo.png","hash":"9774c3140644cef7226711093d0181e8b68d0ee1","modified":1638773374071},{"_id":"themes/geek/source/libs/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1638768906899},{"_id":"themes/geek/source/libs/highlight/highlight.pack.js","hash":"e5a87508b4ce2f7e00c8f792251a0837879a6311","modified":1638768906912},{"_id":"themes/geek/source/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1638768906899},{"_id":"themes/geek/source/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1638768906899},{"_id":"themes/geek/source/libs/font-awesome/less/animated.less","hash":"421f2c4e10191f148c13b8a34e5ff3f484d4c393","modified":1638768906907},{"_id":"themes/geek/source/libs/font-awesome/less/bordered-pulled.less","hash":"a2c292137b17406183ad0fdbf4880fd648b9a5ca","modified":1638768906907},{"_id":"themes/geek/source/libs/font-awesome/less/core.less","hash":"1a37352286619b789d151a06eb4b7551e4c1aaa2","modified":1638768906907},{"_id":"themes/geek/source/libs/font-awesome/less/font-awesome.less","hash":"9ffe7422dc235450a21f019f410ed359ed151f4b","modified":1638768906907},{"_id":"themes/geek/source/libs/font-awesome/less/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1638768906907},{"_id":"themes/geek/source/libs/font-awesome/less/icons.less","hash":"0285a999eb1adad868366678c2d9365b77186a45","modified":1638768906908},{"_id":"themes/geek/source/libs/font-awesome/less/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1638768906908},{"_id":"themes/geek/source/libs/font-awesome/less/list.less","hash":"f53bc20884a1410d950b4a36a330c5181a8b55ab","modified":1638768906908},{"_id":"themes/geek/source/libs/font-awesome/less/mixins.less","hash":"3c5b36b0069372b525ed8bbbcf6b3d4d2bed4e78","modified":1638768906908},{"_id":"themes/geek/source/libs/font-awesome/less/path.less","hash":"1afb4a849059631f76ed2a519d7fb1bd0af14802","modified":1638768906908},{"_id":"themes/geek/source/libs/font-awesome/less/rotated-flipped.less","hash":"95de5de9009714692430b04f9cd4388be8fba8f3","modified":1638768906908},{"_id":"themes/geek/source/libs/font-awesome/less/screen-reader.less","hash":"71139132f170ebe7712836210f4d2c4905151899","modified":1638768906908},{"_id":"themes/geek/source/libs/font-awesome/less/variables.less","hash":"8a5c800747705df16117cc598c1b9f512e873bfe","modified":1638768906909},{"_id":"themes/geek/source/libs/font-awesome/less/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1638768906908},{"_id":"themes/geek/source/libs/font-awesome/scss/_core.scss","hash":"55a14a34267edc401b82e5ee41d8bd84fbb5da3f","modified":1638768906909},{"_id":"themes/geek/source/libs/font-awesome/scss/_fixed-width.scss","hash":"224417ca266c657849afb2bbcb6dc455894ff387","modified":1638768906909},{"_id":"themes/geek/source/libs/font-awesome/scss/_bordered-pulled.scss","hash":"164b6a0a2b307cd293f4a914ab0fcdf643950374","modified":1638768906909},{"_id":"themes/geek/source/libs/font-awesome/scss/_icons.scss","hash":"830e0183337d16c07b1c63838f7593a33ee87b15","modified":1638768906909},{"_id":"themes/geek/source/libs/font-awesome/scss/_animated.scss","hash":"8daf189b2f8a404495b8424b6fd1ba630dd1c2dc","modified":1638768906909},{"_id":"themes/geek/source/libs/font-awesome/scss/_larger.scss","hash":"940e1c5ebc690283bfaee92560cf15fabedbf6a9","modified":1638768906909},{"_id":"themes/geek/source/libs/font-awesome/scss/_list.scss","hash":"4b53ee01513df8b9ce76442b2d8f1851613a435c","modified":1638768906909},{"_id":"themes/geek/source/libs/font-awesome/scss/_mixins.scss","hash":"4f3881034a4c11cae8cc915f288477b498a357a2","modified":1638768906910},{"_id":"themes/geek/source/libs/font-awesome/scss/_path.scss","hash":"080158aeb1bf6df59ec98b2bbed44da61d9c9ca3","modified":1638768906911},{"_id":"themes/geek/source/libs/font-awesome/scss/_rotated-flipped.scss","hash":"ca08a0af3da63c2f2a7d3c27a8747637744cc785","modified":1638768906911},{"_id":"themes/geek/source/libs/font-awesome/scss/_screen-reader.scss","hash":"2d8563c488f68e75a28d540dd89301ee4ee08c97","modified":1638768906911},{"_id":"themes/geek/source/libs/font-awesome/scss/_stacked.scss","hash":"cf6752ee609af36eb293a7197c88d31ecacbbc74","modified":1638768906911},{"_id":"themes/geek/source/libs/font-awesome/scss/_variables.scss","hash":"0d6d70535104b42e60d7f44ae6ccf9de023a7b8b","modified":1638768906911},{"_id":"themes/geek/source/libs/font-awesome/scss/font-awesome.scss","hash":"dd83648ea5bc832f87c3c1bf956c54dec065a9bd","modified":1638768906911},{"_id":"themes/geek/source/libs/highlight/styles/a11y-dark.css","hash":"122f8c71ac1c35398e96bf209f20668195a9e144","modified":1638768906912},{"_id":"themes/geek/source/libs/highlight/styles/agate.css","hash":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0","modified":1638768906912},{"_id":"themes/geek/source/libs/highlight/styles/an-old-hope.css","hash":"124d4856bbd6e2cfc164914080724f1a59b9899c","modified":1638768906912},{"_id":"themes/geek/source/libs/highlight/styles/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1638768906912},{"_id":"themes/geek/source/libs/highlight/styles/arduino-light.css","hash":"141b53b2e2de6a321a695d816a836666c5e2c5e6","modified":1638768906912},{"_id":"themes/geek/source/libs/highlight/styles/a11y-light.css","hash":"3f5cde8e2278a6d52e6e4f30509588c80a3ad5a6","modified":1638768906912},{"_id":"themes/geek/source/libs/highlight/styles/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1638768906913},{"_id":"themes/geek/source/libs/highlight/styles/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1638768906912},{"_id":"themes/geek/source/libs/highlight/styles/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1638768906913},{"_id":"themes/geek/source/libs/highlight/styles/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1638768906913},{"_id":"themes/geek/source/libs/highlight/styles/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1638768906913},{"_id":"themes/geek/source/libs/highlight/styles/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1638768906913},{"_id":"themes/geek/source/libs/highlight/styles/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1638768906913},{"_id":"themes/geek/source/libs/highlight/styles/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1638768906913},{"_id":"themes/geek/source/libs/highlight/styles/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1638768906913},{"_id":"themes/geek/source/libs/highlight/styles/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1638768906913},{"_id":"themes/geek/source/libs/highlight/styles/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1638768906913},{"_id":"themes/geek/source/libs/highlight/styles/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1638768906914},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-dark-reasonable.css","hash":"90e194ba1c1fe2ca1b5f40b5eb7c29f40ab66ff4","modified":1638768906915},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1638768906915},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-light.css","hash":"eda63d8cce440dbf3bb823e10577a134e9941deb","modified":1638768906915},{"_id":"themes/geek/source/libs/highlight/styles/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1638768906915},{"_id":"themes/geek/source/libs/highlight/styles/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1638768906915},{"_id":"themes/geek/source/libs/highlight/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1638768906915},{"_id":"themes/geek/source/libs/highlight/styles/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1638768906915},{"_id":"themes/geek/source/libs/highlight/styles/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1638768906915},{"_id":"themes/geek/source/libs/highlight/styles/darkula.css","hash":"0be948bb84acc05f93a1e5e9b48fe34cf61673a0","modified":1638768906916},{"_id":"themes/geek/source/libs/highlight/styles/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1638768906916},{"_id":"themes/geek/source/libs/highlight/styles/default.css","hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1638768906916},{"_id":"themes/geek/source/libs/highlight/styles/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1638768906916},{"_id":"themes/geek/source/libs/highlight/styles/darcula.css","hash":"617241bc95a5dbbd741820bf296155b90e22d61b","modified":1638768906915},{"_id":"themes/geek/source/libs/highlight/styles/foundation.css","hash":"29d960268ca944b5537ff2d2e70d620339dcd5d5","modified":1638768906916},{"_id":"themes/geek/source/libs/highlight/styles/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1638768906916},{"_id":"themes/geek/source/libs/highlight/styles/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1638768906916},{"_id":"themes/geek/source/libs/highlight/styles/github-gist.css","hash":"8cfbcbf4c0491e44e6b073c95a04cc401cb11ab2","modified":1638768906916},{"_id":"themes/geek/source/libs/highlight/styles/gml.css","hash":"0f3f5502247b00ce37dc2b362a6984305001dd50","modified":1638768906916},{"_id":"themes/geek/source/libs/highlight/styles/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1638768906916},{"_id":"themes/geek/source/libs/highlight/styles/gradient-dark.css","hash":"e49b73bab4446ec2dbc0befb860a1fdc27bf1b42","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/hopscotch.css","hash":"3d258ff6f84900ad9abbe43f4ec8b8152c72e887","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/isbl-editor-dark.css","hash":"73d2282192e403868998cff2e77093ace8a6e5fb","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/isbl-editor-light.css","hash":"41baadd11cf10bab67128dd104f704fdd149318e","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1638768906917},{"_id":"themes/geek/source/libs/highlight/styles/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/lightfair.css","hash":"3bdc4517354b7acc495562d8b4937c7a40a89f06","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/magula.css","hash":"8f5cfb7c23c705de7c95577563eb79beb49b68f6","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/mono-blue.css","hash":"3163f08756efa9e68e87addf20750e5650cdb8e4","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/monokai.css","hash":"99ab7678d541bc02a8d38de83a289c5e549a20ce","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/nord.css","hash":"98dfcd6eee4968fb4c634784cb048a98169b1bc8","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/night-owl.css","hash":"d067142aeb74bfdcdec4acebb3241b3e79461bda","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/ocean.css","hash":"fce6858e1c5eb9d2857cb5b5d24069c5994cfc91","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1638768906918},{"_id":"themes/geek/source/libs/highlight/styles/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1638768906919},{"_id":"themes/geek/source/libs/highlight/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1638768906919},{"_id":"themes/geek/source/libs/highlight/styles/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1638768906919},{"_id":"themes/geek/source/libs/highlight/styles/purebasic.css","hash":"e6bb7a57221bed7a601dc9d8d41d9b1425e2dea6","modified":1638768906919},{"_id":"themes/geek/source/libs/highlight/styles/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1638768906919},{"_id":"themes/geek/source/libs/highlight/styles/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1638768906919},{"_id":"themes/geek/source/libs/highlight/styles/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1638768906919},{"_id":"themes/geek/source/libs/highlight/styles/routeros.css","hash":"fc5db7c8f18d6b31ad92df21a51e7867d459af19","modified":1638768906919},{"_id":"themes/geek/source/libs/highlight/styles/school-book.css","hash":"6c4198b6ffde866f5e2fe9172aee094065f9774a","modified":1638768906919},{"_id":"themes/geek/source/libs/highlight/styles/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1638768906920},{"_id":"themes/geek/source/libs/highlight/styles/shades-of-purple.css","hash":"4d5b44a1615173d02b223ba2cce220ab70e09650","modified":1638768906920},{"_id":"themes/geek/source/libs/highlight/styles/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1638768906919},{"_id":"themes/geek/source/libs/highlight/styles/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1638768906920},{"_id":"themes/geek/source/libs/highlight/styles/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1638768906920},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1638768906920},{"_id":"themes/geek/source/libs/highlight/styles/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1638768906920},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1638768906920},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1638768906920},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1638768906920},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1638768906920},{"_id":"themes/geek/source/libs/highlight/styles/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1638768906921},{"_id":"themes/geek/source/libs/highlight/styles/vs2015.css","hash":"3c7fa677de2a785d90fc6c3f7520ac1b11bfd37a","modified":1638768906921},{"_id":"themes/geek/source/libs/highlight/styles/xcode.css","hash":"d8a1f18e5344c2edf97921ec21a54b02745997e9","modified":1638768906921},{"_id":"themes/geek/source/libs/highlight/styles/xt256.css","hash":"d9e0f7d8ab5cfd627ce085c16e7a90e1ad495516","modified":1638768906921},{"_id":"themes/geek/source/libs/highlight/styles/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1638768906921},{"_id":"themes/geek/source/libs/jquery.min.js","hash":"37b1db88b57438f1072a8ebc7559c909c9d3a682","modified":1638768906922},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1638768906907},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1638768906906},{"_id":"themes/geek/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1638768906901},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1638768906902},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1638768906906},{"_id":"themes/geek/imgs/2.png","hash":"f63b6574c5f522b24e2cee18ba6b40b0676365e3","modified":1638768906895},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1638768906905},{"_id":"themes/geek/imgs/1.png","hash":"75038f82935c2ee04d753b76849c4ccbf3cdd222","modified":1638768906893},{"_id":"public/2021/12/07/vue3新特性对比vue2-x/index.html","hash":"49edc586513268fb7763c7855673fe3ef80630e9","modified":1638857043130},{"_id":"public/2021/12/01/hexo/index.html","hash":"7e4dbf74fe27840679c3e5775520ea2446e63581","modified":1638857043130},{"_id":"public/archives/index.html","hash":"0dba63266faf7e163f02c89abb8d8016b7c1ff7a","modified":1639101020738},{"_id":"public/archives/2021/index.html","hash":"0dba63266faf7e163f02c89abb8d8016b7c1ff7a","modified":1639101020738},{"_id":"public/archives/2021/12/index.html","hash":"0dba63266faf7e163f02c89abb8d8016b7c1ff7a","modified":1639101020738},{"_id":"public/index.html","hash":"0dba63266faf7e163f02c89abb8d8016b7c1ff7a","modified":1639101020738},{"_id":"public/2021/12/06/array/index.html","hash":"172208f311f440e7f25a1eb61b1d57639e120bea","modified":1638857043130},{"_id":"public/favicon.ico","hash":"f151d72a72fb27f8b658cfa64370d2d3f81d8aa2","modified":1638857043130},{"_id":"public/libs/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1638857043130},{"_id":"public/img/logo.png","hash":"9774c3140644cef7226711093d0181e8b68d0ee1","modified":1638857043130},{"_id":"public/libs/font-awesome/less/animated.less","hash":"421f2c4e10191f148c13b8a34e5ff3f484d4c393","modified":1638857043130},{"_id":"public/libs/font-awesome/less/bordered-pulled.less","hash":"a2c292137b17406183ad0fdbf4880fd648b9a5ca","modified":1638857043130},{"_id":"public/libs/font-awesome/less/core.less","hash":"1a37352286619b789d151a06eb4b7551e4c1aaa2","modified":1638857043130},{"_id":"public/libs/font-awesome/less/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1638857043130},{"_id":"public/libs/font-awesome/less/font-awesome.less","hash":"9ffe7422dc235450a21f019f410ed359ed151f4b","modified":1638857043130},{"_id":"public/libs/font-awesome/less/list.less","hash":"f53bc20884a1410d950b4a36a330c5181a8b55ab","modified":1638857043130},{"_id":"public/libs/font-awesome/less/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1638857043130},{"_id":"public/libs/font-awesome/less/mixins.less","hash":"3c5b36b0069372b525ed8bbbcf6b3d4d2bed4e78","modified":1638857043130},{"_id":"public/libs/font-awesome/less/path.less","hash":"1afb4a849059631f76ed2a519d7fb1bd0af14802","modified":1638857043130},{"_id":"public/libs/font-awesome/less/rotated-flipped.less","hash":"95de5de9009714692430b04f9cd4388be8fba8f3","modified":1638857043130},{"_id":"public/libs/font-awesome/less/screen-reader.less","hash":"71139132f170ebe7712836210f4d2c4905151899","modified":1638857043130},{"_id":"public/libs/font-awesome/less/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1638857043130},{"_id":"public/libs/font-awesome/less/variables.less","hash":"8a5c800747705df16117cc598c1b9f512e873bfe","modified":1638857043130},{"_id":"public/libs/font-awesome/less/icons.less","hash":"0285a999eb1adad868366678c2d9365b77186a45","modified":1638857043130},{"_id":"public/libs/font-awesome/scss/font-awesome.scss","hash":"dd83648ea5bc832f87c3c1bf956c54dec065a9bd","modified":1638857043130},{"_id":"public/libs/highlight/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1638857043130},{"_id":"public/libs/highlight/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1638857043130},{"_id":"public/libs/highlight/styles/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1638857043130},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1638857043130},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1638857043130},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1638857043130},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1638857043130},{"_id":"public/js/js.js","hash":"0fb795dc0d1c2da9bee007a73fe246a03c88626b","modified":1638857043130},{"_id":"public/libs/highlight/styles/a11y-light.css","hash":"3f5cde8e2278a6d52e6e4f30509588c80a3ad5a6","modified":1638857043130},{"_id":"public/libs/highlight/styles/an-old-hope.css","hash":"124d4856bbd6e2cfc164914080724f1a59b9899c","modified":1638857043130},{"_id":"public/libs/highlight/styles/agate.css","hash":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0","modified":1638857043130},{"_id":"public/libs/highlight/styles/a11y-dark.css","hash":"122f8c71ac1c35398e96bf209f20668195a9e144","modified":1638857043130},{"_id":"public/libs/highlight/styles/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1638857043130},{"_id":"public/libs/highlight/styles/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1638857043130},{"_id":"public/libs/highlight/styles/arduino-light.css","hash":"141b53b2e2de6a321a695d816a836666c5e2c5e6","modified":1638857043130},{"_id":"public/libs/highlight/styles/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1638857043130},{"_id":"public/libs/highlight/styles/atom-one-light.css","hash":"eda63d8cce440dbf3bb823e10577a134e9941deb","modified":1638857043130},{"_id":"public/libs/highlight/styles/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1638857043130},{"_id":"public/libs/highlight/styles/atom-one-dark-reasonable.css","hash":"90e194ba1c1fe2ca1b5f40b5eb7c29f40ab66ff4","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1638857043130},{"_id":"public/libs/highlight/styles/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1638857043130},{"_id":"public/libs/highlight/styles/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1638857043130},{"_id":"public/libs/highlight/styles/darcula.css","hash":"617241bc95a5dbbd741820bf296155b90e22d61b","modified":1638857043130},{"_id":"public/libs/highlight/styles/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1638857043130},{"_id":"public/libs/highlight/styles/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1638857043130},{"_id":"public/libs/highlight/styles/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1638857043130},{"_id":"public/libs/highlight/styles/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1638857043130},{"_id":"public/libs/highlight/styles/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1638857043130},{"_id":"public/libs/highlight/styles/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1638857043130},{"_id":"public/libs/highlight/styles/darkula.css","hash":"0be948bb84acc05f93a1e5e9b48fe34cf61673a0","modified":1638857043130},{"_id":"public/libs/highlight/styles/foundation.css","hash":"29d960268ca944b5537ff2d2e70d620339dcd5d5","modified":1638857043130},{"_id":"public/libs/highlight/styles/default.css","hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1638857043130},{"_id":"public/libs/highlight/styles/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1638857043130},{"_id":"public/libs/highlight/styles/gml.css","hash":"0f3f5502247b00ce37dc2b362a6984305001dd50","modified":1638857043130},{"_id":"public/libs/highlight/styles/github-gist.css","hash":"8cfbcbf4c0491e44e6b073c95a04cc401cb11ab2","modified":1638857043130},{"_id":"public/libs/highlight/styles/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1638857043130},{"_id":"public/libs/highlight/styles/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1638857043130},{"_id":"public/libs/highlight/styles/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1638857043130},{"_id":"public/libs/highlight/styles/gradient-dark.css","hash":"e49b73bab4446ec2dbc0befb860a1fdc27bf1b42","modified":1638857043130},{"_id":"public/libs/highlight/styles/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1638857043130},{"_id":"public/libs/highlight/styles/hopscotch.css","hash":"3d258ff6f84900ad9abbe43f4ec8b8152c72e887","modified":1638857043130},{"_id":"public/libs/highlight/styles/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1638857043130},{"_id":"public/libs/highlight/styles/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1638857043130},{"_id":"public/libs/highlight/styles/isbl-editor-dark.css","hash":"73d2282192e403868998cff2e77093ace8a6e5fb","modified":1638857043130},{"_id":"public/libs/highlight/styles/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1638857043130},{"_id":"public/libs/highlight/styles/isbl-editor-light.css","hash":"41baadd11cf10bab67128dd104f704fdd149318e","modified":1638857043130},{"_id":"public/libs/highlight/styles/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1638857043130},{"_id":"public/libs/highlight/styles/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1638857043130},{"_id":"public/libs/highlight/styles/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1638857043130},{"_id":"public/libs/highlight/styles/magula.css","hash":"8f5cfb7c23c705de7c95577563eb79beb49b68f6","modified":1638857043130},{"_id":"public/libs/highlight/styles/monokai.css","hash":"99ab7678d541bc02a8d38de83a289c5e549a20ce","modified":1638857043130},{"_id":"public/libs/highlight/styles/lightfair.css","hash":"3bdc4517354b7acc495562d8b4937c7a40a89f06","modified":1638857043130},{"_id":"public/libs/highlight/styles/mono-blue.css","hash":"3163f08756efa9e68e87addf20750e5650cdb8e4","modified":1638857043130},{"_id":"public/libs/highlight/styles/night-owl.css","hash":"d067142aeb74bfdcdec4acebb3241b3e79461bda","modified":1638857043130},{"_id":"public/libs/highlight/styles/nord.css","hash":"98dfcd6eee4968fb4c634784cb048a98169b1bc8","modified":1638857043130},{"_id":"public/libs/highlight/styles/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1638857043130},{"_id":"public/libs/highlight/styles/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1638857043130},{"_id":"public/libs/highlight/styles/ocean.css","hash":"fce6858e1c5eb9d2857cb5b5d24069c5994cfc91","modified":1638857043130},{"_id":"public/libs/highlight/styles/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1638857043130},{"_id":"public/libs/highlight/styles/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1638857043130},{"_id":"public/libs/highlight/styles/purebasic.css","hash":"e6bb7a57221bed7a601dc9d8d41d9b1425e2dea6","modified":1638857043130},{"_id":"public/libs/highlight/styles/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1638857043130},{"_id":"public/libs/highlight/styles/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1638857043130},{"_id":"public/libs/highlight/styles/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1638857043130},{"_id":"public/libs/highlight/styles/routeros.css","hash":"fc5db7c8f18d6b31ad92df21a51e7867d459af19","modified":1638857043130},{"_id":"public/libs/highlight/styles/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1638857043130},{"_id":"public/libs/highlight/styles/school-book.css","hash":"6c4198b6ffde866f5e2fe9172aee094065f9774a","modified":1638857043130},{"_id":"public/libs/highlight/styles/shades-of-purple.css","hash":"4d5b44a1615173d02b223ba2cce220ab70e09650","modified":1638857043130},{"_id":"public/libs/highlight/styles/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1638857043130},{"_id":"public/libs/highlight/styles/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1638857043130},{"_id":"public/libs/highlight/styles/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1638857043130},{"_id":"public/libs/highlight/styles/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1638857043130},{"_id":"public/libs/highlight/styles/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1638857043130},{"_id":"public/libs/highlight/styles/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1638857043130},{"_id":"public/libs/highlight/styles/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1638857043130},{"_id":"public/libs/highlight/styles/vs2015.css","hash":"3c7fa677de2a785d90fc6c3f7520ac1b11bfd37a","modified":1638857043130},{"_id":"public/libs/highlight/styles/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1638857043130},{"_id":"public/libs/highlight/styles/xcode.css","hash":"d8a1f18e5344c2edf97921ec21a54b02745997e9","modified":1638857043130},{"_id":"public/libs/highlight/styles/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1638857043130},{"_id":"public/libs/highlight/styles/xt256.css","hash":"d9e0f7d8ab5cfd627ce085c16e7a90e1ad495516","modified":1638857043130},{"_id":"public/libs/highlight/styles/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1638857043130},{"_id":"public/css/style.css","hash":"5aa83728a6eb1c08e990c43e99582a88d4ba3b17","modified":1638857043130},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1638857043130},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1638857043130},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1638857043130},{"_id":"public/libs/highlight/highlight.pack.js","hash":"e5a87508b4ce2f7e00c8f792251a0837879a6311","modified":1638857043130},{"_id":"public/libs/jquery.min.js","hash":"37b1db88b57438f1072a8ebc7559c909c9d3a682","modified":1638857043130},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1638857043130},{"_id":"source/_posts/import、require、export、module-exports-混合详解.md","hash":"95a2f7391f670ab8abaf3c2941e8caf9aaddcf0e","modified":1639041793097},{"_id":"public/2021/12/09/import、require、export、module-exports-混合详解/index.html","hash":"e955142be7812e3513bd262a8338e20f9d36d0b7","modified":1639101020738}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"从0开始搭建Hexo个人博客","date":"2021-11-30T17:01:01.000Z","_content":"\n> 搭建个人博客是每个程序员成长的必经之路，不但可以记录与分享自己在学习过程中 Get 到的新技能、新知识，还能顺便提高一下自己的文采。\n\n# Hexo 简介\n\nHexo 是一款基于 Node.js 的静态博客框架，可方便快捷的托管于 GitHub 上，是搭建博客的首选框架。\n\n根据[Hexo 官网](https://hexo.io/zh-cn/)介绍，主要有以下四大优点：\n\n- 超快速度： Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n- 支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n- 一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。\n- 插件和可扩展性：强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成\n\n# Hexo 搭建步骤\n\n## 安装 Git\n\nGit 是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。无论是个人代码管理还是团队合作开发中，学会 git 那都是百利而无一害的。如果对 git 还不是很了解，推荐去[廖雪峰老师的博客](https://www.liaoxuefeng.com/wiki/896043488029600)或者先看一下[Git Book](https://git-scm.com/book/zh/v2)的前三章。\n\n```bash\n# 安装命令\n$ sudo apt-get install git\n\n# 查看版本\n$ git --version\n```\n\n## 安装 Node.js\n\nHexo 是基于 Node.js 环境运行的，所以需要安装 Node 环境及 npm 包管理工具。\n\n```bash\n# node安装命令\n$ sudo apt-get install nodejs\n\n# 查看node版本\n$ node -v\n\n# npm安装命令\n$ sudo apt-get install npm\n\n# 查看npm版本\n$ npm -v\n```\n\n## 安装 Hexo\n\n```bash\n# 利用npm全局安装hexo脚手架\n$ npm install -g hexo-cli\n\n# 查看hexo版本\n$ hexo -v\n\n# 删除hexo\n$ npm uninstall -g hexo-cli\n\n# 查看npm全局版本\n$ npm ls -g --depth=0\n```\n\n## 创建博客项目\n\n到此为止，装好了 node 环境以及 hexo 框架，基本上前期的环境配置就完成了，接下来就可以创建自己的博客项目了。\n\n```bash\n# 新建一个文件夹，如名为blog\n$ mkdir blog\n\n# 进入blog文件夹\n$ cd blog\n\n# 初始化hexo\n$ hexo init\n```\n\n初始化成功后，blog 文件夹下会出现如下文件：\n\n- \\_config.yml: 博客的核心配置文件（设置主体、标题等属性）\n- package.json：项目所需的依赖包\n- source：用来存放你的文章\n- themes：放下下载的主题\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n\n```bash\n# 安装所需依赖\n$ npm install\n```\n\n安装成功后，会出现 node_modules 文件夹，文件夹内即安装的 package.json 内所有依赖包。接下来就可以配置并启动 hexo 了\n\n```bash\n# 清除缓存文件 (db.json) 和已生成的静态文件 (public)\n$ hexo clean\n\n# 生成静态文件，generate\n$ hexo g\n\n# 部署博客网站，deploy\n$ hexo d\n\n# 启动服务器，server\n$ hexo s -g\n```\n\n运行成功后，浏览器打开`http://localhost:4000`便可看到你的 hexo 博客项目了，除了主题有点儿吃藕，还是挺不错的~\n\n## 将 Hexo 部署到 GitHub\n\n这一步，我们就可以将 hexo 和 GitHub 关联起来，也就是将 hexo 生成的文章部署到 GitHub 上，打开站点配置文件\\_config.yml，翻到最后，修改为下面这样，其中 LeeDebug 改为你的 GitHub 账户名\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/LeeDebug/LeeDebug.github.io.git\n  branch: master\n```\n\n这个时候需要先安装 deploy-git，也就是部署的命令,这样你才能用命令部署到 GitHub。\n\n```bash\n$ npm install hexo-deployer-git --save\n```\n\n部署项目\n\n```bash\n$ hexo clean\n$ hexo g\n$ hexo d\n```\n\n部署成功后，浏览器打开`http://esc95.github.io`，就能看到你的博客了\n\n# 安装主题\n\n首先下载主题包，如[butterfly](https://github.com/jerryc127/hexo-theme-butterfly)\n\n```bash\nnpm i hexo-theme-butterfly\n```\n\n配置`_config.yml`文件\n\n```bash\ntheme: butterfly\n```\n\n# 新建文章\n\n首先修改`/scaffolds/post.md`文件模板，改为想要的形式，比如\n\n```bash\n---\ntitle: {{ title }}\ntags:\n- Hexo\ncategorier:\n- Hexo\nkeywords: \"Hexo,笔记\"\ndate: {{ date }}\ndescription: \"描述\"\ncover: https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png\n---\n```\n\n利用 post 模板新建文章\n\n```bash\nhexo new post 文章标题\n```\n\n随后在`source/_posts/`文件夹下会出现`文章标题`的文件夹和`文章标题.md`的 MarkDown 文件，文章内容在`*.md`文件内编辑即可\n\n# 新增分类页\n\n```bash\nhexo new page categories\n```\n\n将`/source/categories/index.md/`这个文件改为以下内容\n\n```bash\n---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---\n```\n\n# 新增标签页\n\n```bash\nhexo new page tags\n```\n\n将`/source/tags/index.md/`这个文件改为以下内容\n\n```bash\n---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---\n```\n","source":"_posts/hexo.md","raw":"---\ntitle: 从0开始搭建Hexo个人博客\ndate: 2021-12-01 01:01:01\ntags:\n---\n\n> 搭建个人博客是每个程序员成长的必经之路，不但可以记录与分享自己在学习过程中 Get 到的新技能、新知识，还能顺便提高一下自己的文采。\n\n# Hexo 简介\n\nHexo 是一款基于 Node.js 的静态博客框架，可方便快捷的托管于 GitHub 上，是搭建博客的首选框架。\n\n根据[Hexo 官网](https://hexo.io/zh-cn/)介绍，主要有以下四大优点：\n\n- 超快速度： Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n- 支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n- 一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。\n- 插件和可扩展性：强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成\n\n# Hexo 搭建步骤\n\n## 安装 Git\n\nGit 是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。无论是个人代码管理还是团队合作开发中，学会 git 那都是百利而无一害的。如果对 git 还不是很了解，推荐去[廖雪峰老师的博客](https://www.liaoxuefeng.com/wiki/896043488029600)或者先看一下[Git Book](https://git-scm.com/book/zh/v2)的前三章。\n\n```bash\n# 安装命令\n$ sudo apt-get install git\n\n# 查看版本\n$ git --version\n```\n\n## 安装 Node.js\n\nHexo 是基于 Node.js 环境运行的，所以需要安装 Node 环境及 npm 包管理工具。\n\n```bash\n# node安装命令\n$ sudo apt-get install nodejs\n\n# 查看node版本\n$ node -v\n\n# npm安装命令\n$ sudo apt-get install npm\n\n# 查看npm版本\n$ npm -v\n```\n\n## 安装 Hexo\n\n```bash\n# 利用npm全局安装hexo脚手架\n$ npm install -g hexo-cli\n\n# 查看hexo版本\n$ hexo -v\n\n# 删除hexo\n$ npm uninstall -g hexo-cli\n\n# 查看npm全局版本\n$ npm ls -g --depth=0\n```\n\n## 创建博客项目\n\n到此为止，装好了 node 环境以及 hexo 框架，基本上前期的环境配置就完成了，接下来就可以创建自己的博客项目了。\n\n```bash\n# 新建一个文件夹，如名为blog\n$ mkdir blog\n\n# 进入blog文件夹\n$ cd blog\n\n# 初始化hexo\n$ hexo init\n```\n\n初始化成功后，blog 文件夹下会出现如下文件：\n\n- \\_config.yml: 博客的核心配置文件（设置主体、标题等属性）\n- package.json：项目所需的依赖包\n- source：用来存放你的文章\n- themes：放下下载的主题\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n\n```bash\n# 安装所需依赖\n$ npm install\n```\n\n安装成功后，会出现 node_modules 文件夹，文件夹内即安装的 package.json 内所有依赖包。接下来就可以配置并启动 hexo 了\n\n```bash\n# 清除缓存文件 (db.json) 和已生成的静态文件 (public)\n$ hexo clean\n\n# 生成静态文件，generate\n$ hexo g\n\n# 部署博客网站，deploy\n$ hexo d\n\n# 启动服务器，server\n$ hexo s -g\n```\n\n运行成功后，浏览器打开`http://localhost:4000`便可看到你的 hexo 博客项目了，除了主题有点儿吃藕，还是挺不错的~\n\n## 将 Hexo 部署到 GitHub\n\n这一步，我们就可以将 hexo 和 GitHub 关联起来，也就是将 hexo 生成的文章部署到 GitHub 上，打开站点配置文件\\_config.yml，翻到最后，修改为下面这样，其中 LeeDebug 改为你的 GitHub 账户名\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/LeeDebug/LeeDebug.github.io.git\n  branch: master\n```\n\n这个时候需要先安装 deploy-git，也就是部署的命令,这样你才能用命令部署到 GitHub。\n\n```bash\n$ npm install hexo-deployer-git --save\n```\n\n部署项目\n\n```bash\n$ hexo clean\n$ hexo g\n$ hexo d\n```\n\n部署成功后，浏览器打开`http://esc95.github.io`，就能看到你的博客了\n\n# 安装主题\n\n首先下载主题包，如[butterfly](https://github.com/jerryc127/hexo-theme-butterfly)\n\n```bash\nnpm i hexo-theme-butterfly\n```\n\n配置`_config.yml`文件\n\n```bash\ntheme: butterfly\n```\n\n# 新建文章\n\n首先修改`/scaffolds/post.md`文件模板，改为想要的形式，比如\n\n```bash\n---\ntitle: {{ title }}\ntags:\n- Hexo\ncategorier:\n- Hexo\nkeywords: \"Hexo,笔记\"\ndate: {{ date }}\ndescription: \"描述\"\ncover: https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png\n---\n```\n\n利用 post 模板新建文章\n\n```bash\nhexo new post 文章标题\n```\n\n随后在`source/_posts/`文件夹下会出现`文章标题`的文件夹和`文章标题.md`的 MarkDown 文件，文章内容在`*.md`文件内编辑即可\n\n# 新增分类页\n\n```bash\nhexo new page categories\n```\n\n将`/source/categories/index.md/`这个文件改为以下内容\n\n```bash\n---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---\n```\n\n# 新增标签页\n\n```bash\nhexo new page tags\n```\n\n将`/source/tags/index.md/`这个文件改为以下内容\n\n```bash\n---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---\n```\n","slug":"hexo","published":1,"updated":"2021-12-06T08:32:19.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwvp63r3000079o1cewk5gn6","content":"<blockquote>\n<p>搭建个人博客是每个程序员成长的必经之路，不但可以记录与分享自己在学习过程中 Get 到的新技能、新知识，还能顺便提高一下自己的文采。</p>\n</blockquote>\n<h1 id=\"Hexo-简介\"><a href=\"#Hexo-简介\" class=\"headerlink\" title=\"Hexo 简介\"></a>Hexo 简介</h1><p>Hexo 是一款基于 Node.js 的静态博客框架，可方便快捷的托管于 GitHub 上，是搭建博客的首选框架。</p>\n<p>根据<a href=\"https://hexo.io/zh-cn/\">Hexo 官网</a>介绍，主要有以下四大优点：</p>\n<ul>\n<li>超快速度： Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>\n<li>支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>\n<li>一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。</li>\n<li>插件和可扩展性：强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成</li>\n</ul>\n<h1 id=\"Hexo-搭建步骤\"><a href=\"#Hexo-搭建步骤\" class=\"headerlink\" title=\"Hexo 搭建步骤\"></a>Hexo 搭建步骤</h1><h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><p>Git 是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。无论是个人代码管理还是团队合作开发中，学会 git 那都是百利而无一害的。如果对 git 还不是很了解，推荐去<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">廖雪峰老师的博客</a>或者先看一下<a href=\"https://git-scm.com/book/zh/v2\">Git Book</a>的前三章。</p>\n<pre><code class=\"bash\"># 安装命令\n$ sudo apt-get install git\n\n# 查看版本\n$ git --version\n</code></pre>\n<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>Hexo 是基于 Node.js 环境运行的，所以需要安装 Node 环境及 npm 包管理工具。</p>\n<pre><code class=\"bash\"># node安装命令\n$ sudo apt-get install nodejs\n\n# 查看node版本\n$ node -v\n\n# npm安装命令\n$ sudo apt-get install npm\n\n# 查看npm版本\n$ npm -v\n</code></pre>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><pre><code class=\"bash\"># 利用npm全局安装hexo脚手架\n$ npm install -g hexo-cli\n\n# 查看hexo版本\n$ hexo -v\n\n# 删除hexo\n$ npm uninstall -g hexo-cli\n\n# 查看npm全局版本\n$ npm ls -g --depth=0\n</code></pre>\n<h2 id=\"创建博客项目\"><a href=\"#创建博客项目\" class=\"headerlink\" title=\"创建博客项目\"></a>创建博客项目</h2><p>到此为止，装好了 node 环境以及 hexo 框架，基本上前期的环境配置就完成了，接下来就可以创建自己的博客项目了。</p>\n<pre><code class=\"bash\"># 新建一个文件夹，如名为blog\n$ mkdir blog\n\n# 进入blog文件夹\n$ cd blog\n\n# 初始化hexo\n$ hexo init\n</code></pre>\n<p>初始化成功后，blog 文件夹下会出现如下文件：</p>\n<ul>\n<li>_config.yml: 博客的核心配置文件（设置主体、标题等属性）</li>\n<li>package.json：项目所需的依赖包</li>\n<li>source：用来存放你的文章</li>\n<li>themes：放下下载的主题</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n</ul>\n<pre><code class=\"bash\"># 安装所需依赖\n$ npm install\n</code></pre>\n<p>安装成功后，会出现 node_modules 文件夹，文件夹内即安装的 package.json 内所有依赖包。接下来就可以配置并启动 hexo 了</p>\n<pre><code class=\"bash\"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)\n$ hexo clean\n\n# 生成静态文件，generate\n$ hexo g\n\n# 部署博客网站，deploy\n$ hexo d\n\n# 启动服务器，server\n$ hexo s -g\n</code></pre>\n<p>运行成功后，浏览器打开<code>http://localhost:4000</code>便可看到你的 hexo 博客项目了，除了主题有点儿吃藕，还是挺不错的~</p>\n<h2 id=\"将-Hexo-部署到-GitHub\"><a href=\"#将-Hexo-部署到-GitHub\" class=\"headerlink\" title=\"将 Hexo 部署到 GitHub\"></a>将 Hexo 部署到 GitHub</h2><p>这一步，我们就可以将 hexo 和 GitHub 关联起来，也就是将 hexo 生成的文章部署到 GitHub 上，打开站点配置文件_config.yml，翻到最后，修改为下面这样，其中 LeeDebug 改为你的 GitHub 账户名</p>\n<pre><code class=\"bash\">deploy:\n  type: git\n  repo: https://github.com/LeeDebug/LeeDebug.github.io.git\n  branch: master\n</code></pre>\n<p>这个时候需要先安装 deploy-git，也就是部署的命令,这样你才能用命令部署到 GitHub。</p>\n<pre><code class=\"bash\">$ npm install hexo-deployer-git --save\n</code></pre>\n<p>部署项目</p>\n<pre><code class=\"bash\">$ hexo clean\n$ hexo g\n$ hexo d\n</code></pre>\n<p>部署成功后，浏览器打开<code>http://esc95.github.io</code>，就能看到你的博客了</p>\n<h1 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h1><p>首先下载主题包，如<a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">butterfly</a></p>\n<pre><code class=\"bash\">npm i hexo-theme-butterfly\n</code></pre>\n<p>配置<code>_config.yml</code>文件</p>\n<pre><code class=\"bash\">theme: butterfly\n</code></pre>\n<h1 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h1><p>首先修改<code>/scaffolds/post.md</code>文件模板，改为想要的形式，比如</p>\n<pre><code class=\"bash\">---\ntitle: &#123;&#123; title &#125;&#125;\ntags:\n- Hexo\ncategorier:\n- Hexo\nkeywords: &quot;Hexo,笔记&quot;\ndate: &#123;&#123; date &#125;&#125;\ndescription: &quot;描述&quot;\ncover: https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png\n---\n</code></pre>\n<p>利用 post 模板新建文章</p>\n<pre><code class=\"bash\">hexo new post 文章标题\n</code></pre>\n<p>随后在<code>source/_posts/</code>文件夹下会出现<code>文章标题</code>的文件夹和<code>文章标题.md</code>的 MarkDown 文件，文章内容在<code>*.md</code>文件内编辑即可</p>\n<h1 id=\"新增分类页\"><a href=\"#新增分类页\" class=\"headerlink\" title=\"新增分类页\"></a>新增分类页</h1><pre><code class=\"bash\">hexo new page categories\n</code></pre>\n<p>将<code>/source/categories/index.md/</code>这个文件改为以下内容</p>\n<pre><code class=\"bash\">---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: &quot;categories&quot;\n---\n</code></pre>\n<h1 id=\"新增标签页\"><a href=\"#新增标签页\" class=\"headerlink\" title=\"新增标签页\"></a>新增标签页</h1><pre><code class=\"bash\">hexo new page tags\n</code></pre>\n<p>将<code>/source/tags/index.md/</code>这个文件改为以下内容</p>\n<pre><code class=\"bash\">---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: &quot;tags&quot;\n---\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>搭建个人博客是每个程序员成长的必经之路，不但可以记录与分享自己在学习过程中 Get 到的新技能、新知识，还能顺便提高一下自己的文采。</p>\n</blockquote>\n<h1 id=\"Hexo-简介\"><a href=\"#Hexo-简介\" class=\"headerlink\" title=\"Hexo 简介\"></a>Hexo 简介</h1><p>Hexo 是一款基于 Node.js 的静态博客框架，可方便快捷的托管于 GitHub 上，是搭建博客的首选框架。</p>\n<p>根据<a href=\"https://hexo.io/zh-cn/\">Hexo 官网</a>介绍，主要有以下四大优点：</p>\n<ul>\n<li>超快速度： Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>\n<li>支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>\n<li>一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。</li>\n<li>插件和可扩展性：强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成</li>\n</ul>\n<h1 id=\"Hexo-搭建步骤\"><a href=\"#Hexo-搭建步骤\" class=\"headerlink\" title=\"Hexo 搭建步骤\"></a>Hexo 搭建步骤</h1><h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><p>Git 是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。无论是个人代码管理还是团队合作开发中，学会 git 那都是百利而无一害的。如果对 git 还不是很了解，推荐去<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">廖雪峰老师的博客</a>或者先看一下<a href=\"https://git-scm.com/book/zh/v2\">Git Book</a>的前三章。</p>\n<pre><code class=\"bash\"># 安装命令\n$ sudo apt-get install git\n\n# 查看版本\n$ git --version\n</code></pre>\n<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>Hexo 是基于 Node.js 环境运行的，所以需要安装 Node 环境及 npm 包管理工具。</p>\n<pre><code class=\"bash\"># node安装命令\n$ sudo apt-get install nodejs\n\n# 查看node版本\n$ node -v\n\n# npm安装命令\n$ sudo apt-get install npm\n\n# 查看npm版本\n$ npm -v\n</code></pre>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><pre><code class=\"bash\"># 利用npm全局安装hexo脚手架\n$ npm install -g hexo-cli\n\n# 查看hexo版本\n$ hexo -v\n\n# 删除hexo\n$ npm uninstall -g hexo-cli\n\n# 查看npm全局版本\n$ npm ls -g --depth=0\n</code></pre>\n<h2 id=\"创建博客项目\"><a href=\"#创建博客项目\" class=\"headerlink\" title=\"创建博客项目\"></a>创建博客项目</h2><p>到此为止，装好了 node 环境以及 hexo 框架，基本上前期的环境配置就完成了，接下来就可以创建自己的博客项目了。</p>\n<pre><code class=\"bash\"># 新建一个文件夹，如名为blog\n$ mkdir blog\n\n# 进入blog文件夹\n$ cd blog\n\n# 初始化hexo\n$ hexo init\n</code></pre>\n<p>初始化成功后，blog 文件夹下会出现如下文件：</p>\n<ul>\n<li>_config.yml: 博客的核心配置文件（设置主体、标题等属性）</li>\n<li>package.json：项目所需的依赖包</li>\n<li>source：用来存放你的文章</li>\n<li>themes：放下下载的主题</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n</ul>\n<pre><code class=\"bash\"># 安装所需依赖\n$ npm install\n</code></pre>\n<p>安装成功后，会出现 node_modules 文件夹，文件夹内即安装的 package.json 内所有依赖包。接下来就可以配置并启动 hexo 了</p>\n<pre><code class=\"bash\"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)\n$ hexo clean\n\n# 生成静态文件，generate\n$ hexo g\n\n# 部署博客网站，deploy\n$ hexo d\n\n# 启动服务器，server\n$ hexo s -g\n</code></pre>\n<p>运行成功后，浏览器打开<code>http://localhost:4000</code>便可看到你的 hexo 博客项目了，除了主题有点儿吃藕，还是挺不错的~</p>\n<h2 id=\"将-Hexo-部署到-GitHub\"><a href=\"#将-Hexo-部署到-GitHub\" class=\"headerlink\" title=\"将 Hexo 部署到 GitHub\"></a>将 Hexo 部署到 GitHub</h2><p>这一步，我们就可以将 hexo 和 GitHub 关联起来，也就是将 hexo 生成的文章部署到 GitHub 上，打开站点配置文件_config.yml，翻到最后，修改为下面这样，其中 LeeDebug 改为你的 GitHub 账户名</p>\n<pre><code class=\"bash\">deploy:\n  type: git\n  repo: https://github.com/LeeDebug/LeeDebug.github.io.git\n  branch: master\n</code></pre>\n<p>这个时候需要先安装 deploy-git，也就是部署的命令,这样你才能用命令部署到 GitHub。</p>\n<pre><code class=\"bash\">$ npm install hexo-deployer-git --save\n</code></pre>\n<p>部署项目</p>\n<pre><code class=\"bash\">$ hexo clean\n$ hexo g\n$ hexo d\n</code></pre>\n<p>部署成功后，浏览器打开<code>http://esc95.github.io</code>，就能看到你的博客了</p>\n<h1 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h1><p>首先下载主题包，如<a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">butterfly</a></p>\n<pre><code class=\"bash\">npm i hexo-theme-butterfly\n</code></pre>\n<p>配置<code>_config.yml</code>文件</p>\n<pre><code class=\"bash\">theme: butterfly\n</code></pre>\n<h1 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h1><p>首先修改<code>/scaffolds/post.md</code>文件模板，改为想要的形式，比如</p>\n<pre><code class=\"bash\">---\ntitle: &#123;&#123; title &#125;&#125;\ntags:\n- Hexo\ncategorier:\n- Hexo\nkeywords: &quot;Hexo,笔记&quot;\ndate: &#123;&#123; date &#125;&#125;\ndescription: &quot;描述&quot;\ncover: https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png\n---\n</code></pre>\n<p>利用 post 模板新建文章</p>\n<pre><code class=\"bash\">hexo new post 文章标题\n</code></pre>\n<p>随后在<code>source/_posts/</code>文件夹下会出现<code>文章标题</code>的文件夹和<code>文章标题.md</code>的 MarkDown 文件，文章内容在<code>*.md</code>文件内编辑即可</p>\n<h1 id=\"新增分类页\"><a href=\"#新增分类页\" class=\"headerlink\" title=\"新增分类页\"></a>新增分类页</h1><pre><code class=\"bash\">hexo new page categories\n</code></pre>\n<p>将<code>/source/categories/index.md/</code>这个文件改为以下内容</p>\n<pre><code class=\"bash\">---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: &quot;categories&quot;\n---\n</code></pre>\n<h1 id=\"新增标签页\"><a href=\"#新增标签页\" class=\"headerlink\" title=\"新增标签页\"></a>新增标签页</h1><pre><code class=\"bash\">hexo new page tags\n</code></pre>\n<p>将<code>/source/tags/index.md/</code>这个文件改为以下内容</p>\n<pre><code class=\"bash\">---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: &quot;tags&quot;\n---\n</code></pre>\n"},{"title":"vue3新特性对比vue2.x","date":"2021-12-07T05:57:29.000Z","_content":"\n# 一、根标签\n\n> Vue2 的`Templata`只支持一个根标签  \n> Vue3 的`Templata`支持多个根标签\n\n    //vue2\n    <template>\n      <div></div>\n    </template>\n\n    // vue3\n    <template>\n      <div></div>\n      <img/>\n    </template>\n\n# 二、初始化方法\n\n> Vue2 使用 `new Vue()`, 参数是`new Vue({template, render})`  \n> Vue3 使用 `createApp()` 参数是 `createApp(组件)`\n\n    //vue2\n    import Vue from 'vue';\n    import router from './routers/';\n    import store from './stores';\n    import App from './App.vue';\n    const app =  new Vue({\n      router,\n      store,\n      render: h => h(App)\n    }).$mount('#app');\n\n    // vue3\n    import { createApp } from 'vue';\n    import App from './App.vue';\n    import { router } from './router';\n    const app = createApp(App).use(router).mount('#app');\n\n# 三、vue3 内置组件 teleport\n\n> 将 teleport 包裹的元素移动到某个 DOM 节点下  \n> 有两个参数 to - string；disabled - boolean\n\nto 使用方法：\n\n    <!-- 正确 -->\n    <teleport to=\"body\" />\n    <teleport to=\"#some-id\" />\n    <teleport to=\".some-class\" />\n    <teleport to=\"[data-teleport]\" />\n\n    <!-- 错误 -->\n    <teleport to=\"h1\" />\n    <teleport to=\"some-string\" />\n\ndisabled 使用方法：\n\n> 此可选属性可用于禁用 <teleport> 的功能，这意味着其插槽内容将不会移动到任何位置，而是在您在周围父组件中指定了 <teleport> 的位置渲染。\n\n    <teleport to=\"#popup\" :disabled=\"displayVideoInline\">\n      <video src=\"./my-movie.mp4\" />\n    </teleport>\n\n# 四、Lifecycle Hooks\n\n> 新版的生命周期函数，可以按需导入到组件中，且只能在 setup() 函数中使用.\n\n- beforeCreate -> use setup()\n- created -> use setup()\n- beforeMount -> onBeforeMount\n- mounted -> onMounted\n- beforeUpdate -> onBeforeUpdate\n- updated -> onUpdated\n- beforeDestroy -> onBeforeUnmount\n- destroyed -> onUnmounted\n- errorCaptured -> onErrorCaptured\n","source":"_posts/vue3新特性对比vue2-x.md","raw":"---\ntitle: vue3新特性对比vue2.x\ndate: 2021-12-07 13:57:29\ntags:\n---\n\n# 一、根标签\n\n> Vue2 的`Templata`只支持一个根标签  \n> Vue3 的`Templata`支持多个根标签\n\n    //vue2\n    <template>\n      <div></div>\n    </template>\n\n    // vue3\n    <template>\n      <div></div>\n      <img/>\n    </template>\n\n# 二、初始化方法\n\n> Vue2 使用 `new Vue()`, 参数是`new Vue({template, render})`  \n> Vue3 使用 `createApp()` 参数是 `createApp(组件)`\n\n    //vue2\n    import Vue from 'vue';\n    import router from './routers/';\n    import store from './stores';\n    import App from './App.vue';\n    const app =  new Vue({\n      router,\n      store,\n      render: h => h(App)\n    }).$mount('#app');\n\n    // vue3\n    import { createApp } from 'vue';\n    import App from './App.vue';\n    import { router } from './router';\n    const app = createApp(App).use(router).mount('#app');\n\n# 三、vue3 内置组件 teleport\n\n> 将 teleport 包裹的元素移动到某个 DOM 节点下  \n> 有两个参数 to - string；disabled - boolean\n\nto 使用方法：\n\n    <!-- 正确 -->\n    <teleport to=\"body\" />\n    <teleport to=\"#some-id\" />\n    <teleport to=\".some-class\" />\n    <teleport to=\"[data-teleport]\" />\n\n    <!-- 错误 -->\n    <teleport to=\"h1\" />\n    <teleport to=\"some-string\" />\n\ndisabled 使用方法：\n\n> 此可选属性可用于禁用 <teleport> 的功能，这意味着其插槽内容将不会移动到任何位置，而是在您在周围父组件中指定了 <teleport> 的位置渲染。\n\n    <teleport to=\"#popup\" :disabled=\"displayVideoInline\">\n      <video src=\"./my-movie.mp4\" />\n    </teleport>\n\n# 四、Lifecycle Hooks\n\n> 新版的生命周期函数，可以按需导入到组件中，且只能在 setup() 函数中使用.\n\n- beforeCreate -> use setup()\n- created -> use setup()\n- beforeMount -> onBeforeMount\n- mounted -> onMounted\n- beforeUpdate -> onBeforeUpdate\n- updated -> onUpdated\n- beforeDestroy -> onBeforeUnmount\n- destroyed -> onUnmounted\n- errorCaptured -> onErrorCaptured\n","slug":"vue3新特性对比vue2-x","published":1,"updated":"2021-12-07T05:57:41.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwvp63r9000179o14qs7331o","content":"<h1 id=\"一、根标签\"><a href=\"#一、根标签\" class=\"headerlink\" title=\"一、根标签\"></a>一、根标签</h1><blockquote>\n<p>Vue2 的<code>Templata</code>只支持一个根标签<br>Vue3 的<code>Templata</code>支持多个根标签</p>\n</blockquote>\n<pre><code>//vue2\n&lt;template&gt;\n  &lt;div&gt;&lt;/div&gt;\n&lt;/template&gt;\n\n// vue3\n&lt;template&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;img/&gt;\n&lt;/template&gt;\n</code></pre>\n<h1 id=\"二、初始化方法\"><a href=\"#二、初始化方法\" class=\"headerlink\" title=\"二、初始化方法\"></a>二、初始化方法</h1><blockquote>\n<p>Vue2 使用 <code>new Vue()</code>, 参数是<code>new Vue(&#123;template, render&#125;)</code><br>Vue3 使用 <code>createApp()</code> 参数是 <code>createApp(组件)</code></p>\n</blockquote>\n<pre><code>//vue2\nimport Vue from &#39;vue&#39;;\nimport router from &#39;./routers/&#39;;\nimport store from &#39;./stores&#39;;\nimport App from &#39;./App.vue&#39;;\nconst app =  new Vue(&#123;\n  router,\n  store,\n  render: h =&gt; h(App)\n&#125;).$mount(&#39;#app&#39;);\n\n// vue3\nimport &#123; createApp &#125; from &#39;vue&#39;;\nimport App from &#39;./App.vue&#39;;\nimport &#123; router &#125; from &#39;./router&#39;;\nconst app = createApp(App).use(router).mount(&#39;#app&#39;);\n</code></pre>\n<h1 id=\"三、vue3-内置组件-teleport\"><a href=\"#三、vue3-内置组件-teleport\" class=\"headerlink\" title=\"三、vue3 内置组件 teleport\"></a>三、vue3 内置组件 teleport</h1><blockquote>\n<p>将 teleport 包裹的元素移动到某个 DOM 节点下<br>有两个参数 to - string；disabled - boolean</p>\n</blockquote>\n<p>to 使用方法：</p>\n<pre><code>&lt;!-- 正确 --&gt;\n&lt;teleport to=&quot;body&quot; /&gt;\n&lt;teleport to=&quot;#some-id&quot; /&gt;\n&lt;teleport to=&quot;.some-class&quot; /&gt;\n&lt;teleport to=&quot;[data-teleport]&quot; /&gt;\n\n&lt;!-- 错误 --&gt;\n&lt;teleport to=&quot;h1&quot; /&gt;\n&lt;teleport to=&quot;some-string&quot; /&gt;\n</code></pre>\n<p>disabled 使用方法：</p>\n<blockquote>\n<p>此可选属性可用于禁用 <teleport> 的功能，这意味着其插槽内容将不会移动到任何位置，而是在您在周围父组件中指定了 <teleport> 的位置渲染。</p>\n</blockquote>\n<pre><code>&lt;teleport to=&quot;#popup&quot; :disabled=&quot;displayVideoInline&quot;&gt;\n  &lt;video src=&quot;./my-movie.mp4&quot; /&gt;\n&lt;/teleport&gt;\n</code></pre>\n<h1 id=\"四、Lifecycle-Hooks\"><a href=\"#四、Lifecycle-Hooks\" class=\"headerlink\" title=\"四、Lifecycle Hooks\"></a>四、Lifecycle Hooks</h1><blockquote>\n<p>新版的生命周期函数，可以按需导入到组件中，且只能在 setup() 函数中使用.</p>\n</blockquote>\n<ul>\n<li>beforeCreate -&gt; use setup()</li>\n<li>created -&gt; use setup()</li>\n<li>beforeMount -&gt; onBeforeMount</li>\n<li>mounted -&gt; onMounted</li>\n<li>beforeUpdate -&gt; onBeforeUpdate</li>\n<li>updated -&gt; onUpdated</li>\n<li>beforeDestroy -&gt; onBeforeUnmount</li>\n<li>destroyed -&gt; onUnmounted</li>\n<li>errorCaptured -&gt; onErrorCaptured</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、根标签\"><a href=\"#一、根标签\" class=\"headerlink\" title=\"一、根标签\"></a>一、根标签</h1><blockquote>\n<p>Vue2 的<code>Templata</code>只支持一个根标签<br>Vue3 的<code>Templata</code>支持多个根标签</p>\n</blockquote>\n<pre><code>//vue2\n&lt;template&gt;\n  &lt;div&gt;&lt;/div&gt;\n&lt;/template&gt;\n\n// vue3\n&lt;template&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;img/&gt;\n&lt;/template&gt;\n</code></pre>\n<h1 id=\"二、初始化方法\"><a href=\"#二、初始化方法\" class=\"headerlink\" title=\"二、初始化方法\"></a>二、初始化方法</h1><blockquote>\n<p>Vue2 使用 <code>new Vue()</code>, 参数是<code>new Vue(&#123;template, render&#125;)</code><br>Vue3 使用 <code>createApp()</code> 参数是 <code>createApp(组件)</code></p>\n</blockquote>\n<pre><code>//vue2\nimport Vue from &#39;vue&#39;;\nimport router from &#39;./routers/&#39;;\nimport store from &#39;./stores&#39;;\nimport App from &#39;./App.vue&#39;;\nconst app =  new Vue(&#123;\n  router,\n  store,\n  render: h =&gt; h(App)\n&#125;).$mount(&#39;#app&#39;);\n\n// vue3\nimport &#123; createApp &#125; from &#39;vue&#39;;\nimport App from &#39;./App.vue&#39;;\nimport &#123; router &#125; from &#39;./router&#39;;\nconst app = createApp(App).use(router).mount(&#39;#app&#39;);\n</code></pre>\n<h1 id=\"三、vue3-内置组件-teleport\"><a href=\"#三、vue3-内置组件-teleport\" class=\"headerlink\" title=\"三、vue3 内置组件 teleport\"></a>三、vue3 内置组件 teleport</h1><blockquote>\n<p>将 teleport 包裹的元素移动到某个 DOM 节点下<br>有两个参数 to - string；disabled - boolean</p>\n</blockquote>\n<p>to 使用方法：</p>\n<pre><code>&lt;!-- 正确 --&gt;\n&lt;teleport to=&quot;body&quot; /&gt;\n&lt;teleport to=&quot;#some-id&quot; /&gt;\n&lt;teleport to=&quot;.some-class&quot; /&gt;\n&lt;teleport to=&quot;[data-teleport]&quot; /&gt;\n\n&lt;!-- 错误 --&gt;\n&lt;teleport to=&quot;h1&quot; /&gt;\n&lt;teleport to=&quot;some-string&quot; /&gt;\n</code></pre>\n<p>disabled 使用方法：</p>\n<blockquote>\n<p>此可选属性可用于禁用 <teleport> 的功能，这意味着其插槽内容将不会移动到任何位置，而是在您在周围父组件中指定了 <teleport> 的位置渲染。</p>\n</blockquote>\n<pre><code>&lt;teleport to=&quot;#popup&quot; :disabled=&quot;displayVideoInline&quot;&gt;\n  &lt;video src=&quot;./my-movie.mp4&quot; /&gt;\n&lt;/teleport&gt;\n</code></pre>\n<h1 id=\"四、Lifecycle-Hooks\"><a href=\"#四、Lifecycle-Hooks\" class=\"headerlink\" title=\"四、Lifecycle Hooks\"></a>四、Lifecycle Hooks</h1><blockquote>\n<p>新版的生命周期函数，可以按需导入到组件中，且只能在 setup() 函数中使用.</p>\n</blockquote>\n<ul>\n<li>beforeCreate -&gt; use setup()</li>\n<li>created -&gt; use setup()</li>\n<li>beforeMount -&gt; onBeforeMount</li>\n<li>mounted -&gt; onMounted</li>\n<li>beforeUpdate -&gt; onBeforeUpdate</li>\n<li>updated -&gt; onUpdated</li>\n<li>beforeDestroy -&gt; onBeforeUnmount</li>\n<li>destroyed -&gt; onUnmounted</li>\n<li>errorCaptured -&gt; onErrorCaptured</li>\n</ul>\n"},{"title":"数组常用方法","date":"2021-12-06T08:32:34.000Z","_content":"\n> 考虑到日常开发中使用比较频繁，为了方便查找与回顾，整理此文。\n\n# [#](#) 基础篇\n\n| 方法          | 描述                                               |\n| ------------- | -------------------------------------------------- |\n| concat()      | 连接两个或多个数组，并返回已连接数组的副本。       |\n| copyWithin()  | 将数组中的数组元素复制到指定位置或从指定位置复制。 |\n| entries()     | 返回键/值对数组迭代对象。                          |\n| every()       | 检查数组中的每个元素是否通过测试。                 |\n| fill()        | 用静态值填充数组中的元素。                         |\n| filter()      | 使用数组中通过测试的每个元素创建新数组。           |\n| find()        | 返回数组中第一个通过测试的元素的值。               |\n| findIndex()   | 返回数组中通过测试的第一个元素的索引。             |\n| forEach()     | 为每个数组元素调用函数。                           |\n| from()        | 从对象创建数组。                                   |\n| includes()    | 检查数组是否包含指定的元素。                       |\n| indexOf()     | 在数组中搜索元素并返回其位置。                     |\n| isArray()     | 检查对象是否为数组。                               |\n| join()        | 将数组的所有元素连接成一个字符串。                 |\n| keys()        | 返回 Array Iteration 对象，包含原始数组的键.       |\n| lastIndexOf() | 在数组中搜索元素，从末尾开始，并返回其位置。       |\n| map()         | 使用为每个数组元素调用函数的结果创建新数组。       |\n| pop()         | 删除数组的最后一个元素，并返回该元素。             |\n| push()        | 将新元素添加到数组的末尾，并返回新的长度。         |\n| reduce()      | 将数组的值减为单个值（从左到右）。                 |\n| reduceRight() | 将数组的值减为单个值（从右到左）。                 |\n| reverse()     | 反转数组中元素的顺序。                             |\n| shift()       | 删除数组的第一个元素，并返回该元素。               |\n| slice()       | 选择数组的一部分，并返回新数组。                   |\n| some()        | 检查数组中的任何元素是否通过测试。                 |\n| sort()        | 对数组的元素进行排序。                             |\n| splice()      | 从数组中添加/删除元素。                            |\n| toString()    | 将数组转换为字符串，并返回结果。                   |\n| unshift()     | 将新元素添加到数组的开头，并返回新的长度。         |\n| valueOf()     | 返回数组的原始值。                                 |\n| at()          | 2021.1 新提案，解决方括号的限制，可以输入负数。    |\n\n\\[TOC\\]\n\n## [#](#) 1.1 求和\n\n### [#](#) 方法一：Array.prototype.forEach()\n\n    var total = 0;\n    [1, 2, 3].forEach(function (num) {\n      total += num;\n    });\n\n1  \n2  \n3  \n4\n\n### [#](#) 方法二：Array.prototype.reduce()\n\n    var total = [1, 2, 3].reduce(function (sum, current) {\n      return sum + current;\n    }, 0);\n\n1  \n2  \n3\n\n## [#](#) 1.2 排序\n\n### [#](#) 方法一：sort()\n\n    // 默认是升序\n    [1, 2, 3, 4].sort((a, b) => a - b); // [1, 2, 3, 4]\n    // 降序\n    [1, 2, 3, 4].sort((a, b) => b - a); // [4, 3, 2, 1]\n\n1  \n2  \n3  \n4\n\n### [#](#) 方法二：排序算法\n\n![](https://gblobscdn.gitbook.com/assets%2F-Lm9JtwbhXVOfXyecToy%2F-Lm9KQIJAMvCgJQzErQS%2F-Lm9KSPi7v-ygMtlI6Zr%2Fsort.png?alt=media)\n\n参考文献\n\n- [十大经典排序算法 - Git Book (opens new window)](https://sort.hust.cc/)\n- [JavaScript 数据结构与算法之美 - 十大经典排序算法 - 天明夜尽 (opens new window)](https://juejin.cn/post/6844903902484103182 target=)\n\n## [#](#) 1.3 取最大值\n\n### [#](#) 方法一：Math.max()\n\n    Math.max() // -Infinity，即 -∞\n\n    Math.max(Infinity, -Infinity) // Infinity，即 ∞\n\n    Math.max(...[1, 2, 3, 4]) // 4\n\n    Math.max.apply(this, [1, 2, 3, 4]) // 4\n\n    [1, 2, 3, 4].reduce( (prev, cur,curIndex,arr)=> {\n     return Math.max(prev,cur);\n    },0) // 4\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11\n\n## [#](#) 1.4 判断是否包含某值\n\n### [#](#) 方法一：Array.includes()\n\n    [7, 8, 9].includes(4) // false\n\n1\n\n### [#](#) 方法二：Array.indexOf()\n\n    [7, 8, 9].indexOf(4) // -1 如果存在返回索引\n    [7, 8, 9].indexOf(9) // 2\n\n1  \n2\n\n### [#](#) 方法三：Array.find()\n\n如果数组中无值返回 undefined\n\n    [7, 8, 9].find((item) => item === 4) // undefined\n    [7, 8, 9].find((item) => item === 9) // 9\n\n1  \n2\n\n### [#](#) 方法四：Array.findIndex()\n\n如果数组中无值返回-1\n\n    [7, 8, 9].findIndex((item)=> item === 4) // -1\n    [7, 8, 9].findIndex((item)=> item === 9) // 2\n\n1  \n2\n\n## [#](#) 1.5 某一项设置值\n\n### [#](#) 方法一：Array.splice()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr.splice(3, 0, 3)\n    arr // ['aaa', 'bbbb', 'cccc', 3, 'dddd']\n\n1  \n2  \n3\n\n## [#](#) 1.6 每一项设置值\n\n### [#](#) 方法一：Array.fill()\n\n    [7,8,9,10,11,12].fill() // [undefined, undefined, undefined, undefined, undefined, undefined]\n    [7,8,9,10,11,12].fill(7) // [7, 7, 7, 7, 7, 7]\n    [7,8,9,10,11,12].fill(3, 2, 4) // [7, 8, 3, 3, 11, 12]\n\n1  \n2  \n3\n\n### [#](#) 方法二：Array.map()\n\n    [7, 8, 9].map((item, idx) => item % 2) // [1, 0, 1]\n    [7, 8, 9].map((item, idx) => idx) // [0, 1, 2]\n\n1  \n2\n\n## [#](#) 1.7 每一项是否满足\n\n### [#](#) 方法一：Array.every()\n\n    [1,2,3].every(item=>{return item>2}) //false\n\n1\n\n## [#](#) 1.8 有一项满足\n\n### [#](#) 方法一：Array.some()\n\n    [1,2,3].some(item=>{return item>2}) //true\n\n1\n\n# [#](#) 贰。番外篇\n\n## [#](#) 2.1 重写 Array .prototype. at()\n\n    // 兼容老浏览器的 MDN polyfill\n    // 注释：Polyfill 是一块代码（通常是 Web 上的 JavaScript），用来为旧浏览器提供它没有原生支持的较新的功能。\n    if (Array.prototype.at) {\n        Array.prototype.at = function (idx) {\n            return this[this.length + idx]\n        }\n    }\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr.at(-1) // 'dddd'\n    arr.at(-3) // 'bbbb'\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10\n\n## [#](#) 2.2 清空数组\n\n### [#](#) 方法一：Array.length\n\n最快\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = arr\n    arr // ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n    arr.length = 0 // 0\n\n    arr // []\n    // 被引用的数组，也会被清空\n    arr1 // []\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10\n\n### [#](#) 方法二：Array.splice()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = arr\n\n    arr.splice(0) // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n    arr // []\n    // 同上，被引用的也会被清空\n    arr1 // []\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8\n\n### [#](#) 方法三：直接赋予新数组\\[\\]\n\n最慢，且占用内存\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = arr\n\n    arr = [] // []\n\n    arr // []\n    // 被引用的数组，不会被清空\n    arr1 // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8\n\n## [#](#) 2.3 扁平化\n\n    const arr = [1, [2, [3, [4, 5]]], 6];\n    // => [1, 2, 3, 4, 5, 6]\n\n1  \n2\n\n### [#](#) 方法一：Array.prototype.flat()\n\n    const res1 = arr.flat(Infinity);\n\n1\n\n### [#](#) 方法二：new RegExp()\n\n    // 缺点：都会变成字符串\n    const res2 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',');\n    // 改良版\n    const res3 = JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g, '') + ']');\n\n1  \n2  \n3  \n4\n\n### [#](#) 方法三：Array.prototype.reduce()\n\n    const flatten = arr => {\n      return arr.reduce((pre, cur) => {\n        return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n      }, [])\n    }\n    const res4 = flatten(arr);\n\n1  \n2  \n3  \n4  \n5  \n6\n\n### [#](#) 方法四：函数递归\n\n    const res5 = [];\n    const fn = arr => {\n      for (let i = 0; i < arr.length; i++) {\n        if (Array.isArray(arr[i])) {\n          fn(arr[i]);\n        } else {\n          res5.push(arr[i]);\n        }\n      }\n    }\n    fn(arr);\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11\n\n### [#](#) 方法五：while() + some()\n\n    function flatten(arr) {\n        while(arr.some(item=>Array.isArray(item))) {\n            arr = [].concat(...arr);\n        }\n        return arr;\n    }\n\n1  \n2  \n3  \n4  \n5  \n6\n\n## [#](#) 2.4 合并\n\n### [#](#) 方法一：Array.push()\n\n    const arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr.push(1, 2, 3,[4, 5, 6]) // 8\n    arr // ['aaa', 'bbbb', 'cccc', 'dddd', 1, 2, 3, Array(3)]\n\n1  \n2  \n3\n\n### [#](#) 方法二：Array.concat()\n\n    arr.concat([1, 2, 3],[4, 5, 6]) // ['aaa', 'bbbb', 'cccc', 'dddd', 1, 2, 3, 4, 5, 6]\n    arr // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n1  \n2\n\n### [#](#) 方法二：扩展运算符\n\n    [...[1, 2, 3, 4],...[4, 5]] //[1,2,3,4,5,6]\n\n1\n\n## [#](#) 2.5 去重\n\n    const arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}];\n    // => [1, '1', 17, true, false, 'true', 'a', {}, {}]\n\n1  \n2\n\n### [#](#) 方法一：new Set()\n\n    const arr1 = Array.from(new Set(arr));\n    // 或\n    const arr1 = [...new Set(arr)];\n\n    // 是 Set 类型，不是 Array 类型\n    Object.prototype.toString.call(new Set(arr)) // '[object Set]'\n\n1  \n2  \n3  \n4  \n5  \n6\n\n### [#](#) 方法二：filter() + indexOf()\n\n    const arr2 = arr => {\n      return arr.filter((item, index) => {\n        return arr.indexOf(item) === index;\n      });\n    }\n\n1  \n2  \n3  \n4  \n5\n\n### [#](#) 方法三：new Map()\n\n    const arr3 = arr => {\n      const map = new Map();\n      const res = [];\n      for (let i = 0; i < arr.length; i++) {\n        if (!map.has(arr[i])) {\n          map.set(arr[i], true)\n          res.push(arr[i]);\n        }\n      }\n      return res;\n    }\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11\n\n### [#](#) 方法四：includes()\n\n    const arr4 = arr => {\n      const res = [];\n      for (let i = 0; i < arr.length; i++) {\n        if (!res.includes(arr[i])) res.push(arr[i]);\n      }\n      return res;\n    }\n\n1  \n2  \n3  \n4  \n5  \n6  \n7\n\n## [#](#) 2.6 交集\n\n### [#](#) 方法一：new Set()\n\n    const one = [0, 2, 4, 6, 8, 8]\n    const two = [1, 2, 3, 4, 5, 6]\n    const duplicated = [...new Set(one)].filter(v => two.includes(v)) // [2, 4, 6]\n\n1  \n2  \n3\n\n## [#](#) 2.7 删除虚值\n\n### [#](#) 方法一：Array.prototype.filter()\n\n    const arr = [0, 'blue', '', NaN, 9, true, undefined, 'while', false]\n    const real = arr.filter(Boolean) // ['blue', 9, true, 'while']\n\n1  \n2\n\n## [#](#) 2.8 重组（变量交换）\n\n### [#](#) 方法一：解构赋值\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd', 'eee', 'fff']\n    [arr[1], arr[2]] = [arr[2], arr[1]] // ['cccc', 'bbbb']\n    arr // ['aaa', 'cccc', 'bbbb', 'dddd']\n\n    // 如果想获取单个值\n    [a, , , e, f] = arr\n    a // 'aaa'\n    e // 'dddd'\n    f // 'eee'\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9\n\n### [#](#) 方法二：Array.splice()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd', 'eee', 'fff', 'ggg', 'hhh', 'iii']\n    arr.splice(1, 3, ...arr.splice(4, 4, arr[1], arr[2], arr[3])) // ['bbbb', 'cccc', 'dddd']\n    arr // ['aaa', 'eee', 'fff', 'ggg', 'hhh', 'bbbb', 'cccc', 'dddd', 'iii']\n\n1  \n2  \n3\n\n### [#](#) 方法三：引入中转变量\n\n    temp = arr[1]\n    arr[1] = arr[2]\n    arr[2] = temp\n\n1  \n2  \n3\n\n## [#](#) 2.9 类数组 --> 数组\n\n    // 类数组（包含 length 属性，比如 arguments、DOM 操作方法返回的结果等）\n    const asArr = { 0: 'aaa', '1': 'bbb', '二': 'ccc', 4: 'eee', length: 6 }\n\n1  \n2\n\n### [#](#) 方法一：Array.prototype.from()\n\n    Array.from(asArr)\n    // => ['aaa', 'bbb', undefined, undefined, 'eee', undefined]\n    // undefined 可枚举\n\n1  \n2  \n3\n\n### [#](#) 方法二：Array.prototype.slice.call()\n\n    Array.prototype.slice.call(asArr)\n    // => ['aaa', 'bbb', empty × 2, 'eee', empty]\n    // empty 不可枚举\n\n1  \n2  \n3\n\nPS：其他产生 empty 的情况\n\n    // 也会产生 empty 空位，不会改变 length 属性\n    delete arr[2]\n    // 直接删掉元素，且改变 length 属性\n    arr.splice(2, 1)\n\n1  \n2  \n3  \n4\n\n### [#](#) 方法三：扩展运算符\n\n    [...document.querySelectorAll('div')]\n\n1\n\n## [#](#) 2.10 数组 --> 对象\n\n### [#](#) 方法一：扩展运算符\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    // ['aaa', 'bbbb', 'cccc', 'dddd']\n    { ...arr }\n    // {0: 'aaa', 1: 'bbbb', 2: 'cccc', 3: 'dddd'}\n\n1  \n2  \n3  \n4\n\n### [#](#) 方法二：while()\n\n    i = 0\n    s = {}\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n\n    while (arr[i]) {\n        s[i] = arr[i++]\n    }\n\n    s // {0: 'aaa', 1: 'bbbb', 2: 'cccc', 3: 'dddd'}\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9\n\n### [#](#) 方法三：Object.fromEntries()\n\n    Object.keys({name:'张三',age:14}) // ['name','age']\n    Object.values({name:'张三',age:14}) // ['张三',14]\n    Object.entries({name:'张三',age:14}) // [[name,'张三'],[age,14]]\n    Object.fromEntries([name,'张三'],[age,14]) // ES10的api,Chrome不支持, firebox输出{name:'张三',age:14}\n\n1  \n2  \n3  \n4\n\n## [#](#) 2.11 浅拷贝\n\n### [#](#) 方法一：Array.slice()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = arr.slice(0)\n    arr[1] = 2333 // 2333\n    arr // ['aaa', 2333, 'cccc', 'dddd']\n    arr1 // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n1  \n2  \n3  \n4  \n5\n\n### [#](#) 方法二：展开操作符\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = [...arr]\n    arr[1] = 2333 // 2333\n    arr // ['aaa', 2333, 'cccc', 'dddd']\n    arr1 // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n1  \n2  \n3  \n4  \n5\n\n### [#](#) 方法三：Array.concat()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = [].concat(array)\n    arr[1] = 2333 // 2333\n    arr // ['aaa', 2333, 'cccc', 'dddd']\n    arr1 // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n1  \n2  \n3  \n4  \n5\n\n### [#](#) 方法四：直接赋值\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = arr\n    arr[1] = 2333 // 2333\n    arr // ['aaa', 2333, 'cccc', 'dddd']\n    arr1 // ['aaa', 2333, 'cccc', 'dddd']\n\n1  \n2  \n3  \n4  \n5\n\n## [#](#) 2.12 Array.from 达到 .map 的效果\n\n    arr = [\n        { name: '张三', age: 18 },\n        { name: '李四', age: 18 },\n        { name: '王麻子', age: 18 },\n        { name: '小六', age: 18 },\n    ]\n    nameMap = arr.map(v => v.name) // ['张三', '李四', '王麻子', '小六']\n    nameMap = Array.from(arr, ({name}) => name) // ['张三', '李四', '王麻子', '小六']\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8\n\n## [#](#) 2.13 获取最后 n 个元素\n\n### [#](#) 方法一：Array.splice()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n\n    arr.slice().splice(-1) // ['dddd']\n    arr.slice().splice(-3) // 'bbbb', 'cccc', 'dddd'\n\n1  \n2  \n3  \n4\n\n## [#](#) 2.233 二维数组绘制图形\n\n### [#](#) 方法一：Emmm\n\n    // Emmmm\n\n1\n\n# [#](#) 弎。循环的性能与小优化\n\n## [#](#) 优化一：优化 for 循环\n\n- 当循环复杂度为 `O(n)` 时，`减少每次迭代的工作量`是最有效的方法。\n- 当复杂度大于 `O(n)` 时，建议着重`减少迭代次数`。\n\n### [#](#) a. 减少每次取 length 的次数\n\n这样避免了每次执行循环都要先去找 array.length\n\n    for (let i = 0; i < array.length; i++) {\n        console.log(i) // 0 1 2\n    }\n\n    // 优化后\n    for (let i = 0, len = array.length; i < len; i++) {\n        console.log(i) // 0 1 2\n        // do sth...\n    }\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9\n\n### [#](#) b. 倒序循环\n\n    for (let i = array.length; i > 0; i--) {\n        console.log(i) // 3 2 1\n    }\n\n    // 优化后\n    for (let i = array.length - 1; i >= 0; i--) {\n        console.log(i) // 2 1 0\n    }\n\n    // 优化后\n    for (let i = array.length; i--;) {\n        console.log(i) // 2 1 0\n        // do sth...\n    }\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14\n\n## [#](#) 优化二：不要使用 for-in 来遍历数组\n\n在 JavaScript 提供的循环类型中，只有 for-in 循环比其他几种明显要慢。\n\n由于每次迭代操作会同时搜索实例或原型属性，for-in 循环的每次迭代都会产生更多开销，所以比其他循环类型要慢。\n\n因此，除非你明确需要迭代一个属性数量未知的对象，否则应避免使用 for-in 循环。\n\n## [#](#) 优化三：慎用基于函数的迭代\n\n例如：forEach\n\n基于函数的迭代提供了一个更为便利的迭代方法，但它仍然比基于循环的迭代`要慢一些`。`对每个数组调用外部方法所带来的开销`是速度慢的主要原因。在所有情况下，基于循环的迭代比基于函数的迭代快`8倍`，因此在运行速度要求严格时，基于函数的迭代不是更好的选择。\n\n## [#](#) 优化四：尽量使用 switch-case 条件语句\n\n除非在`非真既假`的判断中，其余条件判断时多用 switch-case 语句，少用 if/else-if/else 语句。原因如下：\n\n- 支持关联操作，即不写 break 语句\n- 本质是汇编时生成的跳转表来指示 case 的地址，所以每一个 case 的执行时间基本是相同的，执行效率不会受先后顺序的影响\n- 代码更清晰，可读性和可维护性要高很多\n\n## [#](#) 优化五：查找表\n\n当有大量离散数据的时候，使用查找表比使用 if-else 和 switch-case 快得多。\n\n    // 将返回值集合存入数组\n    const results = [result0, result1, result2, result3, result4]\n\n    // 返回结果\n    return results[value]\n\n1  \n2  \n3  \n4  \n5\n\n# [#](#) 肆。课外题\n\n## [#](#) 箭头函数的输出\n\n    var func1 = x => x\n    func1(2) // 2\n    var func2 = x => {x}\n    func2(2) // undefined\n    var func3 = x => ({x})\n    func3() // {x: undefined}\n    func3(2) // {x: 2}\n\n1  \n2  \n3  \n4  \n5  \n6  \n7\n","source":"_posts/array.md","raw":"---\ntitle: 数组常用方法\ndate: 2021-12-06 16:32:34\ntags:\n---\n\n> 考虑到日常开发中使用比较频繁，为了方便查找与回顾，整理此文。\n\n# [#](#) 基础篇\n\n| 方法          | 描述                                               |\n| ------------- | -------------------------------------------------- |\n| concat()      | 连接两个或多个数组，并返回已连接数组的副本。       |\n| copyWithin()  | 将数组中的数组元素复制到指定位置或从指定位置复制。 |\n| entries()     | 返回键/值对数组迭代对象。                          |\n| every()       | 检查数组中的每个元素是否通过测试。                 |\n| fill()        | 用静态值填充数组中的元素。                         |\n| filter()      | 使用数组中通过测试的每个元素创建新数组。           |\n| find()        | 返回数组中第一个通过测试的元素的值。               |\n| findIndex()   | 返回数组中通过测试的第一个元素的索引。             |\n| forEach()     | 为每个数组元素调用函数。                           |\n| from()        | 从对象创建数组。                                   |\n| includes()    | 检查数组是否包含指定的元素。                       |\n| indexOf()     | 在数组中搜索元素并返回其位置。                     |\n| isArray()     | 检查对象是否为数组。                               |\n| join()        | 将数组的所有元素连接成一个字符串。                 |\n| keys()        | 返回 Array Iteration 对象，包含原始数组的键.       |\n| lastIndexOf() | 在数组中搜索元素，从末尾开始，并返回其位置。       |\n| map()         | 使用为每个数组元素调用函数的结果创建新数组。       |\n| pop()         | 删除数组的最后一个元素，并返回该元素。             |\n| push()        | 将新元素添加到数组的末尾，并返回新的长度。         |\n| reduce()      | 将数组的值减为单个值（从左到右）。                 |\n| reduceRight() | 将数组的值减为单个值（从右到左）。                 |\n| reverse()     | 反转数组中元素的顺序。                             |\n| shift()       | 删除数组的第一个元素，并返回该元素。               |\n| slice()       | 选择数组的一部分，并返回新数组。                   |\n| some()        | 检查数组中的任何元素是否通过测试。                 |\n| sort()        | 对数组的元素进行排序。                             |\n| splice()      | 从数组中添加/删除元素。                            |\n| toString()    | 将数组转换为字符串，并返回结果。                   |\n| unshift()     | 将新元素添加到数组的开头，并返回新的长度。         |\n| valueOf()     | 返回数组的原始值。                                 |\n| at()          | 2021.1 新提案，解决方括号的限制，可以输入负数。    |\n\n\\[TOC\\]\n\n## [#](#) 1.1 求和\n\n### [#](#) 方法一：Array.prototype.forEach()\n\n    var total = 0;\n    [1, 2, 3].forEach(function (num) {\n      total += num;\n    });\n\n1  \n2  \n3  \n4\n\n### [#](#) 方法二：Array.prototype.reduce()\n\n    var total = [1, 2, 3].reduce(function (sum, current) {\n      return sum + current;\n    }, 0);\n\n1  \n2  \n3\n\n## [#](#) 1.2 排序\n\n### [#](#) 方法一：sort()\n\n    // 默认是升序\n    [1, 2, 3, 4].sort((a, b) => a - b); // [1, 2, 3, 4]\n    // 降序\n    [1, 2, 3, 4].sort((a, b) => b - a); // [4, 3, 2, 1]\n\n1  \n2  \n3  \n4\n\n### [#](#) 方法二：排序算法\n\n![](https://gblobscdn.gitbook.com/assets%2F-Lm9JtwbhXVOfXyecToy%2F-Lm9KQIJAMvCgJQzErQS%2F-Lm9KSPi7v-ygMtlI6Zr%2Fsort.png?alt=media)\n\n参考文献\n\n- [十大经典排序算法 - Git Book (opens new window)](https://sort.hust.cc/)\n- [JavaScript 数据结构与算法之美 - 十大经典排序算法 - 天明夜尽 (opens new window)](https://juejin.cn/post/6844903902484103182 target=)\n\n## [#](#) 1.3 取最大值\n\n### [#](#) 方法一：Math.max()\n\n    Math.max() // -Infinity，即 -∞\n\n    Math.max(Infinity, -Infinity) // Infinity，即 ∞\n\n    Math.max(...[1, 2, 3, 4]) // 4\n\n    Math.max.apply(this, [1, 2, 3, 4]) // 4\n\n    [1, 2, 3, 4].reduce( (prev, cur,curIndex,arr)=> {\n     return Math.max(prev,cur);\n    },0) // 4\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11\n\n## [#](#) 1.4 判断是否包含某值\n\n### [#](#) 方法一：Array.includes()\n\n    [7, 8, 9].includes(4) // false\n\n1\n\n### [#](#) 方法二：Array.indexOf()\n\n    [7, 8, 9].indexOf(4) // -1 如果存在返回索引\n    [7, 8, 9].indexOf(9) // 2\n\n1  \n2\n\n### [#](#) 方法三：Array.find()\n\n如果数组中无值返回 undefined\n\n    [7, 8, 9].find((item) => item === 4) // undefined\n    [7, 8, 9].find((item) => item === 9) // 9\n\n1  \n2\n\n### [#](#) 方法四：Array.findIndex()\n\n如果数组中无值返回-1\n\n    [7, 8, 9].findIndex((item)=> item === 4) // -1\n    [7, 8, 9].findIndex((item)=> item === 9) // 2\n\n1  \n2\n\n## [#](#) 1.5 某一项设置值\n\n### [#](#) 方法一：Array.splice()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr.splice(3, 0, 3)\n    arr // ['aaa', 'bbbb', 'cccc', 3, 'dddd']\n\n1  \n2  \n3\n\n## [#](#) 1.6 每一项设置值\n\n### [#](#) 方法一：Array.fill()\n\n    [7,8,9,10,11,12].fill() // [undefined, undefined, undefined, undefined, undefined, undefined]\n    [7,8,9,10,11,12].fill(7) // [7, 7, 7, 7, 7, 7]\n    [7,8,9,10,11,12].fill(3, 2, 4) // [7, 8, 3, 3, 11, 12]\n\n1  \n2  \n3\n\n### [#](#) 方法二：Array.map()\n\n    [7, 8, 9].map((item, idx) => item % 2) // [1, 0, 1]\n    [7, 8, 9].map((item, idx) => idx) // [0, 1, 2]\n\n1  \n2\n\n## [#](#) 1.7 每一项是否满足\n\n### [#](#) 方法一：Array.every()\n\n    [1,2,3].every(item=>{return item>2}) //false\n\n1\n\n## [#](#) 1.8 有一项满足\n\n### [#](#) 方法一：Array.some()\n\n    [1,2,3].some(item=>{return item>2}) //true\n\n1\n\n# [#](#) 贰。番外篇\n\n## [#](#) 2.1 重写 Array .prototype. at()\n\n    // 兼容老浏览器的 MDN polyfill\n    // 注释：Polyfill 是一块代码（通常是 Web 上的 JavaScript），用来为旧浏览器提供它没有原生支持的较新的功能。\n    if (Array.prototype.at) {\n        Array.prototype.at = function (idx) {\n            return this[this.length + idx]\n        }\n    }\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr.at(-1) // 'dddd'\n    arr.at(-3) // 'bbbb'\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10\n\n## [#](#) 2.2 清空数组\n\n### [#](#) 方法一：Array.length\n\n最快\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = arr\n    arr // ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n    arr.length = 0 // 0\n\n    arr // []\n    // 被引用的数组，也会被清空\n    arr1 // []\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10\n\n### [#](#) 方法二：Array.splice()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = arr\n\n    arr.splice(0) // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n    arr // []\n    // 同上，被引用的也会被清空\n    arr1 // []\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8\n\n### [#](#) 方法三：直接赋予新数组\\[\\]\n\n最慢，且占用内存\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = arr\n\n    arr = [] // []\n\n    arr // []\n    // 被引用的数组，不会被清空\n    arr1 // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8\n\n## [#](#) 2.3 扁平化\n\n    const arr = [1, [2, [3, [4, 5]]], 6];\n    // => [1, 2, 3, 4, 5, 6]\n\n1  \n2\n\n### [#](#) 方法一：Array.prototype.flat()\n\n    const res1 = arr.flat(Infinity);\n\n1\n\n### [#](#) 方法二：new RegExp()\n\n    // 缺点：都会变成字符串\n    const res2 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',');\n    // 改良版\n    const res3 = JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g, '') + ']');\n\n1  \n2  \n3  \n4\n\n### [#](#) 方法三：Array.prototype.reduce()\n\n    const flatten = arr => {\n      return arr.reduce((pre, cur) => {\n        return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n      }, [])\n    }\n    const res4 = flatten(arr);\n\n1  \n2  \n3  \n4  \n5  \n6\n\n### [#](#) 方法四：函数递归\n\n    const res5 = [];\n    const fn = arr => {\n      for (let i = 0; i < arr.length; i++) {\n        if (Array.isArray(arr[i])) {\n          fn(arr[i]);\n        } else {\n          res5.push(arr[i]);\n        }\n      }\n    }\n    fn(arr);\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11\n\n### [#](#) 方法五：while() + some()\n\n    function flatten(arr) {\n        while(arr.some(item=>Array.isArray(item))) {\n            arr = [].concat(...arr);\n        }\n        return arr;\n    }\n\n1  \n2  \n3  \n4  \n5  \n6\n\n## [#](#) 2.4 合并\n\n### [#](#) 方法一：Array.push()\n\n    const arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr.push(1, 2, 3,[4, 5, 6]) // 8\n    arr // ['aaa', 'bbbb', 'cccc', 'dddd', 1, 2, 3, Array(3)]\n\n1  \n2  \n3\n\n### [#](#) 方法二：Array.concat()\n\n    arr.concat([1, 2, 3],[4, 5, 6]) // ['aaa', 'bbbb', 'cccc', 'dddd', 1, 2, 3, 4, 5, 6]\n    arr // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n1  \n2\n\n### [#](#) 方法二：扩展运算符\n\n    [...[1, 2, 3, 4],...[4, 5]] //[1,2,3,4,5,6]\n\n1\n\n## [#](#) 2.5 去重\n\n    const arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}];\n    // => [1, '1', 17, true, false, 'true', 'a', {}, {}]\n\n1  \n2\n\n### [#](#) 方法一：new Set()\n\n    const arr1 = Array.from(new Set(arr));\n    // 或\n    const arr1 = [...new Set(arr)];\n\n    // 是 Set 类型，不是 Array 类型\n    Object.prototype.toString.call(new Set(arr)) // '[object Set]'\n\n1  \n2  \n3  \n4  \n5  \n6\n\n### [#](#) 方法二：filter() + indexOf()\n\n    const arr2 = arr => {\n      return arr.filter((item, index) => {\n        return arr.indexOf(item) === index;\n      });\n    }\n\n1  \n2  \n3  \n4  \n5\n\n### [#](#) 方法三：new Map()\n\n    const arr3 = arr => {\n      const map = new Map();\n      const res = [];\n      for (let i = 0; i < arr.length; i++) {\n        if (!map.has(arr[i])) {\n          map.set(arr[i], true)\n          res.push(arr[i]);\n        }\n      }\n      return res;\n    }\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11\n\n### [#](#) 方法四：includes()\n\n    const arr4 = arr => {\n      const res = [];\n      for (let i = 0; i < arr.length; i++) {\n        if (!res.includes(arr[i])) res.push(arr[i]);\n      }\n      return res;\n    }\n\n1  \n2  \n3  \n4  \n5  \n6  \n7\n\n## [#](#) 2.6 交集\n\n### [#](#) 方法一：new Set()\n\n    const one = [0, 2, 4, 6, 8, 8]\n    const two = [1, 2, 3, 4, 5, 6]\n    const duplicated = [...new Set(one)].filter(v => two.includes(v)) // [2, 4, 6]\n\n1  \n2  \n3\n\n## [#](#) 2.7 删除虚值\n\n### [#](#) 方法一：Array.prototype.filter()\n\n    const arr = [0, 'blue', '', NaN, 9, true, undefined, 'while', false]\n    const real = arr.filter(Boolean) // ['blue', 9, true, 'while']\n\n1  \n2\n\n## [#](#) 2.8 重组（变量交换）\n\n### [#](#) 方法一：解构赋值\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd', 'eee', 'fff']\n    [arr[1], arr[2]] = [arr[2], arr[1]] // ['cccc', 'bbbb']\n    arr // ['aaa', 'cccc', 'bbbb', 'dddd']\n\n    // 如果想获取单个值\n    [a, , , e, f] = arr\n    a // 'aaa'\n    e // 'dddd'\n    f // 'eee'\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9\n\n### [#](#) 方法二：Array.splice()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd', 'eee', 'fff', 'ggg', 'hhh', 'iii']\n    arr.splice(1, 3, ...arr.splice(4, 4, arr[1], arr[2], arr[3])) // ['bbbb', 'cccc', 'dddd']\n    arr // ['aaa', 'eee', 'fff', 'ggg', 'hhh', 'bbbb', 'cccc', 'dddd', 'iii']\n\n1  \n2  \n3\n\n### [#](#) 方法三：引入中转变量\n\n    temp = arr[1]\n    arr[1] = arr[2]\n    arr[2] = temp\n\n1  \n2  \n3\n\n## [#](#) 2.9 类数组 --> 数组\n\n    // 类数组（包含 length 属性，比如 arguments、DOM 操作方法返回的结果等）\n    const asArr = { 0: 'aaa', '1': 'bbb', '二': 'ccc', 4: 'eee', length: 6 }\n\n1  \n2\n\n### [#](#) 方法一：Array.prototype.from()\n\n    Array.from(asArr)\n    // => ['aaa', 'bbb', undefined, undefined, 'eee', undefined]\n    // undefined 可枚举\n\n1  \n2  \n3\n\n### [#](#) 方法二：Array.prototype.slice.call()\n\n    Array.prototype.slice.call(asArr)\n    // => ['aaa', 'bbb', empty × 2, 'eee', empty]\n    // empty 不可枚举\n\n1  \n2  \n3\n\nPS：其他产生 empty 的情况\n\n    // 也会产生 empty 空位，不会改变 length 属性\n    delete arr[2]\n    // 直接删掉元素，且改变 length 属性\n    arr.splice(2, 1)\n\n1  \n2  \n3  \n4\n\n### [#](#) 方法三：扩展运算符\n\n    [...document.querySelectorAll('div')]\n\n1\n\n## [#](#) 2.10 数组 --> 对象\n\n### [#](#) 方法一：扩展运算符\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    // ['aaa', 'bbbb', 'cccc', 'dddd']\n    { ...arr }\n    // {0: 'aaa', 1: 'bbbb', 2: 'cccc', 3: 'dddd'}\n\n1  \n2  \n3  \n4\n\n### [#](#) 方法二：while()\n\n    i = 0\n    s = {}\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n\n    while (arr[i]) {\n        s[i] = arr[i++]\n    }\n\n    s // {0: 'aaa', 1: 'bbbb', 2: 'cccc', 3: 'dddd'}\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9\n\n### [#](#) 方法三：Object.fromEntries()\n\n    Object.keys({name:'张三',age:14}) // ['name','age']\n    Object.values({name:'张三',age:14}) // ['张三',14]\n    Object.entries({name:'张三',age:14}) // [[name,'张三'],[age,14]]\n    Object.fromEntries([name,'张三'],[age,14]) // ES10的api,Chrome不支持, firebox输出{name:'张三',age:14}\n\n1  \n2  \n3  \n4\n\n## [#](#) 2.11 浅拷贝\n\n### [#](#) 方法一：Array.slice()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = arr.slice(0)\n    arr[1] = 2333 // 2333\n    arr // ['aaa', 2333, 'cccc', 'dddd']\n    arr1 // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n1  \n2  \n3  \n4  \n5\n\n### [#](#) 方法二：展开操作符\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = [...arr]\n    arr[1] = 2333 // 2333\n    arr // ['aaa', 2333, 'cccc', 'dddd']\n    arr1 // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n1  \n2  \n3  \n4  \n5\n\n### [#](#) 方法三：Array.concat()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = [].concat(array)\n    arr[1] = 2333 // 2333\n    arr // ['aaa', 2333, 'cccc', 'dddd']\n    arr1 // ['aaa', 'bbbb', 'cccc', 'dddd']\n\n1  \n2  \n3  \n4  \n5\n\n### [#](#) 方法四：直接赋值\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n    arr1 = arr\n    arr[1] = 2333 // 2333\n    arr // ['aaa', 2333, 'cccc', 'dddd']\n    arr1 // ['aaa', 2333, 'cccc', 'dddd']\n\n1  \n2  \n3  \n4  \n5\n\n## [#](#) 2.12 Array.from 达到 .map 的效果\n\n    arr = [\n        { name: '张三', age: 18 },\n        { name: '李四', age: 18 },\n        { name: '王麻子', age: 18 },\n        { name: '小六', age: 18 },\n    ]\n    nameMap = arr.map(v => v.name) // ['张三', '李四', '王麻子', '小六']\n    nameMap = Array.from(arr, ({name}) => name) // ['张三', '李四', '王麻子', '小六']\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8\n\n## [#](#) 2.13 获取最后 n 个元素\n\n### [#](#) 方法一：Array.splice()\n\n    arr = ['aaa', 'bbbb', 'cccc', 'dddd']\n\n    arr.slice().splice(-1) // ['dddd']\n    arr.slice().splice(-3) // 'bbbb', 'cccc', 'dddd'\n\n1  \n2  \n3  \n4\n\n## [#](#) 2.233 二维数组绘制图形\n\n### [#](#) 方法一：Emmm\n\n    // Emmmm\n\n1\n\n# [#](#) 弎。循环的性能与小优化\n\n## [#](#) 优化一：优化 for 循环\n\n- 当循环复杂度为 `O(n)` 时，`减少每次迭代的工作量`是最有效的方法。\n- 当复杂度大于 `O(n)` 时，建议着重`减少迭代次数`。\n\n### [#](#) a. 减少每次取 length 的次数\n\n这样避免了每次执行循环都要先去找 array.length\n\n    for (let i = 0; i < array.length; i++) {\n        console.log(i) // 0 1 2\n    }\n\n    // 优化后\n    for (let i = 0, len = array.length; i < len; i++) {\n        console.log(i) // 0 1 2\n        // do sth...\n    }\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9\n\n### [#](#) b. 倒序循环\n\n    for (let i = array.length; i > 0; i--) {\n        console.log(i) // 3 2 1\n    }\n\n    // 优化后\n    for (let i = array.length - 1; i >= 0; i--) {\n        console.log(i) // 2 1 0\n    }\n\n    // 优化后\n    for (let i = array.length; i--;) {\n        console.log(i) // 2 1 0\n        // do sth...\n    }\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14\n\n## [#](#) 优化二：不要使用 for-in 来遍历数组\n\n在 JavaScript 提供的循环类型中，只有 for-in 循环比其他几种明显要慢。\n\n由于每次迭代操作会同时搜索实例或原型属性，for-in 循环的每次迭代都会产生更多开销，所以比其他循环类型要慢。\n\n因此，除非你明确需要迭代一个属性数量未知的对象，否则应避免使用 for-in 循环。\n\n## [#](#) 优化三：慎用基于函数的迭代\n\n例如：forEach\n\n基于函数的迭代提供了一个更为便利的迭代方法，但它仍然比基于循环的迭代`要慢一些`。`对每个数组调用外部方法所带来的开销`是速度慢的主要原因。在所有情况下，基于循环的迭代比基于函数的迭代快`8倍`，因此在运行速度要求严格时，基于函数的迭代不是更好的选择。\n\n## [#](#) 优化四：尽量使用 switch-case 条件语句\n\n除非在`非真既假`的判断中，其余条件判断时多用 switch-case 语句，少用 if/else-if/else 语句。原因如下：\n\n- 支持关联操作，即不写 break 语句\n- 本质是汇编时生成的跳转表来指示 case 的地址，所以每一个 case 的执行时间基本是相同的，执行效率不会受先后顺序的影响\n- 代码更清晰，可读性和可维护性要高很多\n\n## [#](#) 优化五：查找表\n\n当有大量离散数据的时候，使用查找表比使用 if-else 和 switch-case 快得多。\n\n    // 将返回值集合存入数组\n    const results = [result0, result1, result2, result3, result4]\n\n    // 返回结果\n    return results[value]\n\n1  \n2  \n3  \n4  \n5\n\n# [#](#) 肆。课外题\n\n## [#](#) 箭头函数的输出\n\n    var func1 = x => x\n    func1(2) // 2\n    var func2 = x => {x}\n    func2(2) // undefined\n    var func3 = x => ({x})\n    func3() // {x: undefined}\n    func3(2) // {x: 2}\n\n1  \n2  \n3  \n4  \n5  \n6  \n7\n","slug":"array","published":1,"updated":"2021-12-06T08:44:56.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwvp63rb000279o16iyz0zsq","content":"<blockquote>\n<p>考虑到日常开发中使用比较频繁，为了方便查找与回顾，整理此文。</p>\n</blockquote>\n<h1 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"# 基础篇\"></a><a href=\"#\">#</a> 基础篇</h1><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>concat()</td>\n<td>连接两个或多个数组，并返回已连接数组的副本。</td>\n</tr>\n<tr>\n<td>copyWithin()</td>\n<td>将数组中的数组元素复制到指定位置或从指定位置复制。</td>\n</tr>\n<tr>\n<td>entries()</td>\n<td>返回键/值对数组迭代对象。</td>\n</tr>\n<tr>\n<td>every()</td>\n<td>检查数组中的每个元素是否通过测试。</td>\n</tr>\n<tr>\n<td>fill()</td>\n<td>用静态值填充数组中的元素。</td>\n</tr>\n<tr>\n<td>filter()</td>\n<td>使用数组中通过测试的每个元素创建新数组。</td>\n</tr>\n<tr>\n<td>find()</td>\n<td>返回数组中第一个通过测试的元素的值。</td>\n</tr>\n<tr>\n<td>findIndex()</td>\n<td>返回数组中通过测试的第一个元素的索引。</td>\n</tr>\n<tr>\n<td>forEach()</td>\n<td>为每个数组元素调用函数。</td>\n</tr>\n<tr>\n<td>from()</td>\n<td>从对象创建数组。</td>\n</tr>\n<tr>\n<td>includes()</td>\n<td>检查数组是否包含指定的元素。</td>\n</tr>\n<tr>\n<td>indexOf()</td>\n<td>在数组中搜索元素并返回其位置。</td>\n</tr>\n<tr>\n<td>isArray()</td>\n<td>检查对象是否为数组。</td>\n</tr>\n<tr>\n<td>join()</td>\n<td>将数组的所有元素连接成一个字符串。</td>\n</tr>\n<tr>\n<td>keys()</td>\n<td>返回 Array Iteration 对象，包含原始数组的键.</td>\n</tr>\n<tr>\n<td>lastIndexOf()</td>\n<td>在数组中搜索元素，从末尾开始，并返回其位置。</td>\n</tr>\n<tr>\n<td>map()</td>\n<td>使用为每个数组元素调用函数的结果创建新数组。</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>删除数组的最后一个元素，并返回该元素。</td>\n</tr>\n<tr>\n<td>push()</td>\n<td>将新元素添加到数组的末尾，并返回新的长度。</td>\n</tr>\n<tr>\n<td>reduce()</td>\n<td>将数组的值减为单个值（从左到右）。</td>\n</tr>\n<tr>\n<td>reduceRight()</td>\n<td>将数组的值减为单个值（从右到左）。</td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td>反转数组中元素的顺序。</td>\n</tr>\n<tr>\n<td>shift()</td>\n<td>删除数组的第一个元素，并返回该元素。</td>\n</tr>\n<tr>\n<td>slice()</td>\n<td>选择数组的一部分，并返回新数组。</td>\n</tr>\n<tr>\n<td>some()</td>\n<td>检查数组中的任何元素是否通过测试。</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td>对数组的元素进行排序。</td>\n</tr>\n<tr>\n<td>splice()</td>\n<td>从数组中添加/删除元素。</td>\n</tr>\n<tr>\n<td>toString()</td>\n<td>将数组转换为字符串，并返回结果。</td>\n</tr>\n<tr>\n<td>unshift()</td>\n<td>将新元素添加到数组的开头，并返回新的长度。</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td>返回数组的原始值。</td>\n</tr>\n<tr>\n<td>at()</td>\n<td>2021.1 新提案，解决方括号的限制，可以输入负数。</td>\n</tr>\n</tbody></table>\n<p>[TOC]</p>\n<h2 id=\"1-1-求和\"><a href=\"#1-1-求和\" class=\"headerlink\" title=\"# 1.1 求和\"></a><a href=\"#\">#</a> 1.1 求和</h2><h3 id=\"方法一：Array-prototype-forEach\"><a href=\"#方法一：Array-prototype-forEach\" class=\"headerlink\" title=\"# 方法一：Array.prototype.forEach()\"></a><a href=\"#\">#</a> 方法一：Array.prototype.forEach()</h3><pre><code>var total = 0;\n[1, 2, 3].forEach(function (num) &#123;\n  total += num;\n&#125;);\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h3 id=\"方法二：Array-prototype-reduce\"><a href=\"#方法二：Array-prototype-reduce\" class=\"headerlink\" title=\"# 方法二：Array.prototype.reduce()\"></a><a href=\"#\">#</a> 方法二：Array.prototype.reduce()</h3><pre><code>var total = [1, 2, 3].reduce(function (sum, current) &#123;\n  return sum + current;\n&#125;, 0);\n</code></pre>\n<p>1<br>2<br>3</p>\n<h2 id=\"1-2-排序\"><a href=\"#1-2-排序\" class=\"headerlink\" title=\"# 1.2 排序\"></a><a href=\"#\">#</a> 1.2 排序</h2><h3 id=\"方法一：sort\"><a href=\"#方法一：sort\" class=\"headerlink\" title=\"# 方法一：sort()\"></a><a href=\"#\">#</a> 方法一：sort()</h3><pre><code>// 默认是升序\n[1, 2, 3, 4].sort((a, b) =&gt; a - b); // [1, 2, 3, 4]\n// 降序\n[1, 2, 3, 4].sort((a, b) =&gt; b - a); // [4, 3, 2, 1]\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h3 id=\"方法二：排序算法\"><a href=\"#方法二：排序算法\" class=\"headerlink\" title=\"# 方法二：排序算法\"></a><a href=\"#\">#</a> 方法二：排序算法</h3><p><img src=\"https://gblobscdn.gitbook.com/assets%2F-Lm9JtwbhXVOfXyecToy%2F-Lm9KQIJAMvCgJQzErQS%2F-Lm9KSPi7v-ygMtlI6Zr%2Fsort.png?alt=media\"></p>\n<p>参考文献</p>\n<ul>\n<li><a href=\"https://sort.hust.cc/\">十大经典排序算法 - Git Book (opens new window)</a></li>\n<li>[JavaScript 数据结构与算法之美 - 十大经典排序算法 - 天明夜尽 (opens new window)](<a href=\"https://juejin.cn/post/6844903902484103182\">https://juejin.cn/post/6844903902484103182</a> target=)</li>\n</ul>\n<h2 id=\"1-3-取最大值\"><a href=\"#1-3-取最大值\" class=\"headerlink\" title=\"# 1.3 取最大值\"></a><a href=\"#\">#</a> 1.3 取最大值</h2><h3 id=\"方法一：Math-max\"><a href=\"#方法一：Math-max\" class=\"headerlink\" title=\"# 方法一：Math.max()\"></a><a href=\"#\">#</a> 方法一：Math.max()</h3><pre><code>Math.max() // -Infinity，即 -∞\n\nMath.max(Infinity, -Infinity) // Infinity，即 ∞\n\nMath.max(...[1, 2, 3, 4]) // 4\n\nMath.max.apply(this, [1, 2, 3, 4]) // 4\n\n[1, 2, 3, 4].reduce( (prev, cur,curIndex,arr)=&gt; &#123;\n return Math.max(prev,cur);\n&#125;,0) // 4\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p>\n<h2 id=\"1-4-判断是否包含某值\"><a href=\"#1-4-判断是否包含某值\" class=\"headerlink\" title=\"# 1.4 判断是否包含某值\"></a><a href=\"#\">#</a> 1.4 判断是否包含某值</h2><h3 id=\"方法一：Array-includes\"><a href=\"#方法一：Array-includes\" class=\"headerlink\" title=\"# 方法一：Array.includes()\"></a><a href=\"#\">#</a> 方法一：Array.includes()</h3><pre><code>[7, 8, 9].includes(4) // false\n</code></pre>\n<p>1</p>\n<h3 id=\"方法二：Array-indexOf\"><a href=\"#方法二：Array-indexOf\" class=\"headerlink\" title=\"# 方法二：Array.indexOf()\"></a><a href=\"#\">#</a> 方法二：Array.indexOf()</h3><pre><code>[7, 8, 9].indexOf(4) // -1 如果存在返回索引\n[7, 8, 9].indexOf(9) // 2\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法三：Array-find\"><a href=\"#方法三：Array-find\" class=\"headerlink\" title=\"# 方法三：Array.find()\"></a><a href=\"#\">#</a> 方法三：Array.find()</h3><p>如果数组中无值返回 undefined</p>\n<pre><code>[7, 8, 9].find((item) =&gt; item === 4) // undefined\n[7, 8, 9].find((item) =&gt; item === 9) // 9\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法四：Array-findIndex\"><a href=\"#方法四：Array-findIndex\" class=\"headerlink\" title=\"# 方法四：Array.findIndex()\"></a><a href=\"#\">#</a> 方法四：Array.findIndex()</h3><p>如果数组中无值返回-1</p>\n<pre><code>[7, 8, 9].findIndex((item)=&gt; item === 4) // -1\n[7, 8, 9].findIndex((item)=&gt; item === 9) // 2\n</code></pre>\n<p>1<br>2</p>\n<h2 id=\"1-5-某一项设置值\"><a href=\"#1-5-某一项设置值\" class=\"headerlink\" title=\"# 1.5 某一项设置值\"></a><a href=\"#\">#</a> 1.5 某一项设置值</h2><h3 id=\"方法一：Array-splice\"><a href=\"#方法一：Array-splice\" class=\"headerlink\" title=\"# 方法一：Array.splice()\"></a><a href=\"#\">#</a> 方法一：Array.splice()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr.splice(3, 0, 3)\narr // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, 3, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3</p>\n<h2 id=\"1-6-每一项设置值\"><a href=\"#1-6-每一项设置值\" class=\"headerlink\" title=\"# 1.6 每一项设置值\"></a><a href=\"#\">#</a> 1.6 每一项设置值</h2><h3 id=\"方法一：Array-fill\"><a href=\"#方法一：Array-fill\" class=\"headerlink\" title=\"# 方法一：Array.fill()\"></a><a href=\"#\">#</a> 方法一：Array.fill()</h3><pre><code>[7,8,9,10,11,12].fill() // [undefined, undefined, undefined, undefined, undefined, undefined]\n[7,8,9,10,11,12].fill(7) // [7, 7, 7, 7, 7, 7]\n[7,8,9,10,11,12].fill(3, 2, 4) // [7, 8, 3, 3, 11, 12]\n</code></pre>\n<p>1<br>2<br>3</p>\n<h3 id=\"方法二：Array-map\"><a href=\"#方法二：Array-map\" class=\"headerlink\" title=\"# 方法二：Array.map()\"></a><a href=\"#\">#</a> 方法二：Array.map()</h3><pre><code>[7, 8, 9].map((item, idx) =&gt; item % 2) // [1, 0, 1]\n[7, 8, 9].map((item, idx) =&gt; idx) // [0, 1, 2]\n</code></pre>\n<p>1<br>2</p>\n<h2 id=\"1-7-每一项是否满足\"><a href=\"#1-7-每一项是否满足\" class=\"headerlink\" title=\"# 1.7 每一项是否满足\"></a><a href=\"#\">#</a> 1.7 每一项是否满足</h2><h3 id=\"方法一：Array-every\"><a href=\"#方法一：Array-every\" class=\"headerlink\" title=\"# 方法一：Array.every()\"></a><a href=\"#\">#</a> 方法一：Array.every()</h3><pre><code>[1,2,3].every(item=&gt;&#123;return item&gt;2&#125;) //false\n</code></pre>\n<p>1</p>\n<h2 id=\"1-8-有一项满足\"><a href=\"#1-8-有一项满足\" class=\"headerlink\" title=\"# 1.8 有一项满足\"></a><a href=\"#\">#</a> 1.8 有一项满足</h2><h3 id=\"方法一：Array-some\"><a href=\"#方法一：Array-some\" class=\"headerlink\" title=\"# 方法一：Array.some()\"></a><a href=\"#\">#</a> 方法一：Array.some()</h3><pre><code>[1,2,3].some(item=&gt;&#123;return item&gt;2&#125;) //true\n</code></pre>\n<p>1</p>\n<h1 id=\"贰。番外篇\"><a href=\"#贰。番外篇\" class=\"headerlink\" title=\"# 贰。番外篇\"></a><a href=\"#\">#</a> 贰。番外篇</h1><h2 id=\"2-1-重写-Array-prototype-at\"><a href=\"#2-1-重写-Array-prototype-at\" class=\"headerlink\" title=\"# 2.1 重写 Array .prototype. at()\"></a><a href=\"#\">#</a> 2.1 重写 Array .prototype. at()</h2><pre><code>// 兼容老浏览器的 MDN polyfill\n// 注释：Polyfill 是一块代码（通常是 Web 上的 JavaScript），用来为旧浏览器提供它没有原生支持的较新的功能。\nif (Array.prototype.at) &#123;\n    Array.prototype.at = function (idx) &#123;\n        return this[this.length + idx]\n    &#125;\n&#125;\narr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr.at(-1) // &#39;dddd&#39;\narr.at(-3) // &#39;bbbb&#39;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p>\n<h2 id=\"2-2-清空数组\"><a href=\"#2-2-清空数组\" class=\"headerlink\" title=\"# 2.2 清空数组\"></a><a href=\"#\">#</a> 2.2 清空数组</h2><h3 id=\"方法一：Array-length\"><a href=\"#方法一：Array-length\" class=\"headerlink\" title=\"# 方法一：Array.length\"></a><a href=\"#\">#</a> 方法一：Array.length</h3><p>最快</p>\n<pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = arr\narr // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n\narr.length = 0 // 0\n\narr // []\n// 被引用的数组，也会被清空\narr1 // []\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p>\n<h3 id=\"方法二：Array-splice\"><a href=\"#方法二：Array-splice\" class=\"headerlink\" title=\"# 方法二：Array.splice()\"></a><a href=\"#\">#</a> 方法二：Array.splice()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = arr\n\narr.splice(0) // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n\narr // []\n// 同上，被引用的也会被清空\narr1 // []\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8</p>\n<h3 id=\"方法三：直接赋予新数组\"><a href=\"#方法三：直接赋予新数组\" class=\"headerlink\" title=\"# 方法三：直接赋予新数组[]\"></a><a href=\"#\">#</a> 方法三：直接赋予新数组[]</h3><p>最慢，且占用内存</p>\n<pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = arr\n\narr = [] // []\n\narr // []\n// 被引用的数组，不会被清空\narr1 // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8</p>\n<h2 id=\"2-3-扁平化\"><a href=\"#2-3-扁平化\" class=\"headerlink\" title=\"# 2.3 扁平化\"></a><a href=\"#\">#</a> 2.3 扁平化</h2><pre><code>const arr = [1, [2, [3, [4, 5]]], 6];\n// =&gt; [1, 2, 3, 4, 5, 6]\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法一：Array-prototype-flat\"><a href=\"#方法一：Array-prototype-flat\" class=\"headerlink\" title=\"# 方法一：Array.prototype.flat()\"></a><a href=\"#\">#</a> 方法一：Array.prototype.flat()</h3><pre><code>const res1 = arr.flat(Infinity);\n</code></pre>\n<p>1</p>\n<h3 id=\"方法二：new-RegExp\"><a href=\"#方法二：new-RegExp\" class=\"headerlink\" title=\"# 方法二：new RegExp()\"></a><a href=\"#\">#</a> 方法二：new RegExp()</h3><pre><code>// 缺点：都会变成字符串\nconst res2 = JSON.stringify(arr).replace(/\\[|\\]/g, &#39;&#39;).split(&#39;,&#39;);\n// 改良版\nconst res3 = JSON.parse(&#39;[&#39; + JSON.stringify(arr).replace(/\\[|\\]/g, &#39;&#39;) + &#39;]&#39;);\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h3 id=\"方法三：Array-prototype-reduce\"><a href=\"#方法三：Array-prototype-reduce\" class=\"headerlink\" title=\"# 方法三：Array.prototype.reduce()\"></a><a href=\"#\">#</a> 方法三：Array.prototype.reduce()</h3><pre><code>const flatten = arr =&gt; &#123;\n  return arr.reduce((pre, cur) =&gt; &#123;\n    return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n  &#125;, [])\n&#125;\nconst res4 = flatten(arr);\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6</p>\n<h3 id=\"方法四：函数递归\"><a href=\"#方法四：函数递归\" class=\"headerlink\" title=\"# 方法四：函数递归\"></a><a href=\"#\">#</a> 方法四：函数递归</h3><pre><code>const res5 = [];\nconst fn = arr =&gt; &#123;\n  for (let i = 0; i &lt; arr.length; i++) &#123;\n    if (Array.isArray(arr[i])) &#123;\n      fn(arr[i]);\n    &#125; else &#123;\n      res5.push(arr[i]);\n    &#125;\n  &#125;\n&#125;\nfn(arr);\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p>\n<h3 id=\"方法五：while-some\"><a href=\"#方法五：while-some\" class=\"headerlink\" title=\"# 方法五：while() + some()\"></a><a href=\"#\">#</a> 方法五：while() + some()</h3><pre><code>function flatten(arr) &#123;\n    while(arr.some(item=&gt;Array.isArray(item))) &#123;\n        arr = [].concat(...arr);\n    &#125;\n    return arr;\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6</p>\n<h2 id=\"2-4-合并\"><a href=\"#2-4-合并\" class=\"headerlink\" title=\"# 2.4 合并\"></a><a href=\"#\">#</a> 2.4 合并</h2><h3 id=\"方法一：Array-push\"><a href=\"#方法一：Array-push\" class=\"headerlink\" title=\"# 方法一：Array.push()\"></a><a href=\"#\">#</a> 方法一：Array.push()</h3><pre><code>const arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr.push(1, 2, 3,[4, 5, 6]) // 8\narr // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;, 1, 2, 3, Array(3)]\n</code></pre>\n<p>1<br>2<br>3</p>\n<h3 id=\"方法二：Array-concat\"><a href=\"#方法二：Array-concat\" class=\"headerlink\" title=\"# 方法二：Array.concat()\"></a><a href=\"#\">#</a> 方法二：Array.concat()</h3><pre><code>arr.concat([1, 2, 3],[4, 5, 6]) // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;, 1, 2, 3, 4, 5, 6]\narr // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法二：扩展运算符\"><a href=\"#方法二：扩展运算符\" class=\"headerlink\" title=\"# 方法二：扩展运算符\"></a><a href=\"#\">#</a> 方法二：扩展运算符</h3><pre><code>[...[1, 2, 3, 4],...[4, 5]] //[1,2,3,4,5,6]\n</code></pre>\n<p>1</p>\n<h2 id=\"2-5-去重\"><a href=\"#2-5-去重\" class=\"headerlink\" title=\"# 2.5 去重\"></a><a href=\"#\">#</a> 2.5 去重</h2><pre><code>const arr = [1, 1, &#39;1&#39;, 17, true, true, false, false, &#39;true&#39;, &#39;a&#39;, &#123;&#125;, &#123;&#125;];\n// =&gt; [1, &#39;1&#39;, 17, true, false, &#39;true&#39;, &#39;a&#39;, &#123;&#125;, &#123;&#125;]\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法一：new-Set\"><a href=\"#方法一：new-Set\" class=\"headerlink\" title=\"# 方法一：new Set()\"></a><a href=\"#\">#</a> 方法一：new Set()</h3><pre><code>const arr1 = Array.from(new Set(arr));\n// 或\nconst arr1 = [...new Set(arr)];\n\n// 是 Set 类型，不是 Array 类型\nObject.prototype.toString.call(new Set(arr)) // &#39;[object Set]&#39;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6</p>\n<h3 id=\"方法二：filter-indexOf\"><a href=\"#方法二：filter-indexOf\" class=\"headerlink\" title=\"# 方法二：filter() + indexOf()\"></a><a href=\"#\">#</a> 方法二：filter() + indexOf()</h3><pre><code>const arr2 = arr =&gt; &#123;\n  return arr.filter((item, index) =&gt; &#123;\n    return arr.indexOf(item) === index;\n  &#125;);\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h3 id=\"方法三：new-Map\"><a href=\"#方法三：new-Map\" class=\"headerlink\" title=\"# 方法三：new Map()\"></a><a href=\"#\">#</a> 方法三：new Map()</h3><pre><code>const arr3 = arr =&gt; &#123;\n  const map = new Map();\n  const res = [];\n  for (let i = 0; i &lt; arr.length; i++) &#123;\n    if (!map.has(arr[i])) &#123;\n      map.set(arr[i], true)\n      res.push(arr[i]);\n    &#125;\n  &#125;\n  return res;\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p>\n<h3 id=\"方法四：includes\"><a href=\"#方法四：includes\" class=\"headerlink\" title=\"# 方法四：includes()\"></a><a href=\"#\">#</a> 方法四：includes()</h3><pre><code>const arr4 = arr =&gt; &#123;\n  const res = [];\n  for (let i = 0; i &lt; arr.length; i++) &#123;\n    if (!res.includes(arr[i])) res.push(arr[i]);\n  &#125;\n  return res;\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7</p>\n<h2 id=\"2-6-交集\"><a href=\"#2-6-交集\" class=\"headerlink\" title=\"# 2.6 交集\"></a><a href=\"#\">#</a> 2.6 交集</h2><h3 id=\"方法一：new-Set-1\"><a href=\"#方法一：new-Set-1\" class=\"headerlink\" title=\"# 方法一：new Set()\"></a><a href=\"#\">#</a> 方法一：new Set()</h3><pre><code>const one = [0, 2, 4, 6, 8, 8]\nconst two = [1, 2, 3, 4, 5, 6]\nconst duplicated = [...new Set(one)].filter(v =&gt; two.includes(v)) // [2, 4, 6]\n</code></pre>\n<p>1<br>2<br>3</p>\n<h2 id=\"2-7-删除虚值\"><a href=\"#2-7-删除虚值\" class=\"headerlink\" title=\"# 2.7 删除虚值\"></a><a href=\"#\">#</a> 2.7 删除虚值</h2><h3 id=\"方法一：Array-prototype-filter\"><a href=\"#方法一：Array-prototype-filter\" class=\"headerlink\" title=\"# 方法一：Array.prototype.filter()\"></a><a href=\"#\">#</a> 方法一：Array.prototype.filter()</h3><pre><code>const arr = [0, &#39;blue&#39;, &#39;&#39;, NaN, 9, true, undefined, &#39;while&#39;, false]\nconst real = arr.filter(Boolean) // [&#39;blue&#39;, 9, true, &#39;while&#39;]\n</code></pre>\n<p>1<br>2</p>\n<h2 id=\"2-8-重组（变量交换）\"><a href=\"#2-8-重组（变量交换）\" class=\"headerlink\" title=\"# 2.8 重组（变量交换）\"></a><a href=\"#\">#</a> 2.8 重组（变量交换）</h2><h3 id=\"方法一：解构赋值\"><a href=\"#方法一：解构赋值\" class=\"headerlink\" title=\"# 方法一：解构赋值\"></a><a href=\"#\">#</a> 方法一：解构赋值</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;, &#39;eee&#39;, &#39;fff&#39;]\n[arr[1], arr[2]] = [arr[2], arr[1]] // [&#39;cccc&#39;, &#39;bbbb&#39;]\narr // [&#39;aaa&#39;, &#39;cccc&#39;, &#39;bbbb&#39;, &#39;dddd&#39;]\n\n// 如果想获取单个值\n[a, , , e, f] = arr\na // &#39;aaa&#39;\ne // &#39;dddd&#39;\nf // &#39;eee&#39;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p>\n<h3 id=\"方法二：Array-splice-1\"><a href=\"#方法二：Array-splice-1\" class=\"headerlink\" title=\"# 方法二：Array.splice()\"></a><a href=\"#\">#</a> 方法二：Array.splice()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;, &#39;eee&#39;, &#39;fff&#39;, &#39;ggg&#39;, &#39;hhh&#39;, &#39;iii&#39;]\narr.splice(1, 3, ...arr.splice(4, 4, arr[1], arr[2], arr[3])) // [&#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr // [&#39;aaa&#39;, &#39;eee&#39;, &#39;fff&#39;, &#39;ggg&#39;, &#39;hhh&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;, &#39;iii&#39;]\n</code></pre>\n<p>1<br>2<br>3</p>\n<h3 id=\"方法三：引入中转变量\"><a href=\"#方法三：引入中转变量\" class=\"headerlink\" title=\"# 方法三：引入中转变量\"></a><a href=\"#\">#</a> 方法三：引入中转变量</h3><pre><code>temp = arr[1]\narr[1] = arr[2]\narr[2] = temp\n</code></pre>\n<p>1<br>2<br>3</p>\n<h2 id=\"2-9-类数组-–-gt-数组\"><a href=\"#2-9-类数组-–-gt-数组\" class=\"headerlink\" title=\"# 2.9 类数组 –&gt; 数组\"></a><a href=\"#\">#</a> 2.9 类数组 –&gt; 数组</h2><pre><code>// 类数组（包含 length 属性，比如 arguments、DOM 操作方法返回的结果等）\nconst asArr = &#123; 0: &#39;aaa&#39;, &#39;1&#39;: &#39;bbb&#39;, &#39;二&#39;: &#39;ccc&#39;, 4: &#39;eee&#39;, length: 6 &#125;\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法一：Array-prototype-from\"><a href=\"#方法一：Array-prototype-from\" class=\"headerlink\" title=\"# 方法一：Array.prototype.from()\"></a><a href=\"#\">#</a> 方法一：Array.prototype.from()</h3><pre><code>Array.from(asArr)\n// =&gt; [&#39;aaa&#39;, &#39;bbb&#39;, undefined, undefined, &#39;eee&#39;, undefined]\n// undefined 可枚举\n</code></pre>\n<p>1<br>2<br>3</p>\n<h3 id=\"方法二：Array-prototype-slice-call\"><a href=\"#方法二：Array-prototype-slice-call\" class=\"headerlink\" title=\"# 方法二：Array.prototype.slice.call()\"></a><a href=\"#\">#</a> 方法二：Array.prototype.slice.call()</h3><pre><code>Array.prototype.slice.call(asArr)\n// =&gt; [&#39;aaa&#39;, &#39;bbb&#39;, empty × 2, &#39;eee&#39;, empty]\n// empty 不可枚举\n</code></pre>\n<p>1<br>2<br>3</p>\n<p>PS：其他产生 empty 的情况</p>\n<pre><code>// 也会产生 empty 空位，不会改变 length 属性\ndelete arr[2]\n// 直接删掉元素，且改变 length 属性\narr.splice(2, 1)\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h3 id=\"方法三：扩展运算符\"><a href=\"#方法三：扩展运算符\" class=\"headerlink\" title=\"# 方法三：扩展运算符\"></a><a href=\"#\">#</a> 方法三：扩展运算符</h3><pre><code>[...document.querySelectorAll(&#39;div&#39;)]\n</code></pre>\n<p>1</p>\n<h2 id=\"2-10-数组-–-gt-对象\"><a href=\"#2-10-数组-–-gt-对象\" class=\"headerlink\" title=\"# 2.10 数组 –&gt; 对象\"></a><a href=\"#\">#</a> 2.10 数组 –&gt; 对象</h2><h3 id=\"方法一：扩展运算符\"><a href=\"#方法一：扩展运算符\" class=\"headerlink\" title=\"# 方法一：扩展运算符\"></a><a href=\"#\">#</a> 方法一：扩展运算符</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n// [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n&#123; ...arr &#125;\n// &#123;0: &#39;aaa&#39;, 1: &#39;bbbb&#39;, 2: &#39;cccc&#39;, 3: &#39;dddd&#39;&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h3 id=\"方法二：while\"><a href=\"#方法二：while\" class=\"headerlink\" title=\"# 方法二：while()\"></a><a href=\"#\">#</a> 方法二：while()</h3><pre><code>i = 0\ns = &#123;&#125;\narr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n\nwhile (arr[i]) &#123;\n    s[i] = arr[i++]\n&#125;\n\ns // &#123;0: &#39;aaa&#39;, 1: &#39;bbbb&#39;, 2: &#39;cccc&#39;, 3: &#39;dddd&#39;&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p>\n<h3 id=\"方法三：Object-fromEntries\"><a href=\"#方法三：Object-fromEntries\" class=\"headerlink\" title=\"# 方法三：Object.fromEntries()\"></a><a href=\"#\">#</a> 方法三：Object.fromEntries()</h3><pre><code>Object.keys(&#123;name:&#39;张三&#39;,age:14&#125;) // [&#39;name&#39;,&#39;age&#39;]\nObject.values(&#123;name:&#39;张三&#39;,age:14&#125;) // [&#39;张三&#39;,14]\nObject.entries(&#123;name:&#39;张三&#39;,age:14&#125;) // [[name,&#39;张三&#39;],[age,14]]\nObject.fromEntries([name,&#39;张三&#39;],[age,14]) // ES10的api,Chrome不支持, firebox输出&#123;name:&#39;张三&#39;,age:14&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h2 id=\"2-11-浅拷贝\"><a href=\"#2-11-浅拷贝\" class=\"headerlink\" title=\"# 2.11 浅拷贝\"></a><a href=\"#\">#</a> 2.11 浅拷贝</h2><h3 id=\"方法一：Array-slice\"><a href=\"#方法一：Array-slice\" class=\"headerlink\" title=\"# 方法一：Array.slice()\"></a><a href=\"#\">#</a> 方法一：Array.slice()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = arr.slice(0)\narr[1] = 2333 // 2333\narr // [&#39;aaa&#39;, 2333, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h3 id=\"方法二：展开操作符\"><a href=\"#方法二：展开操作符\" class=\"headerlink\" title=\"# 方法二：展开操作符\"></a><a href=\"#\">#</a> 方法二：展开操作符</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = [...arr]\narr[1] = 2333 // 2333\narr // [&#39;aaa&#39;, 2333, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h3 id=\"方法三：Array-concat\"><a href=\"#方法三：Array-concat\" class=\"headerlink\" title=\"# 方法三：Array.concat()\"></a><a href=\"#\">#</a> 方法三：Array.concat()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = [].concat(array)\narr[1] = 2333 // 2333\narr // [&#39;aaa&#39;, 2333, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h3 id=\"方法四：直接赋值\"><a href=\"#方法四：直接赋值\" class=\"headerlink\" title=\"# 方法四：直接赋值\"></a><a href=\"#\">#</a> 方法四：直接赋值</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = arr\narr[1] = 2333 // 2333\narr // [&#39;aaa&#39;, 2333, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 // [&#39;aaa&#39;, 2333, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h2 id=\"2-12-Array-from-达到-map-的效果\"><a href=\"#2-12-Array-from-达到-map-的效果\" class=\"headerlink\" title=\"# 2.12 Array.from 达到 .map 的效果\"></a><a href=\"#\">#</a> 2.12 Array.from 达到 .map 的效果</h2><pre><code>arr = [\n    &#123; name: &#39;张三&#39;, age: 18 &#125;,\n    &#123; name: &#39;李四&#39;, age: 18 &#125;,\n    &#123; name: &#39;王麻子&#39;, age: 18 &#125;,\n    &#123; name: &#39;小六&#39;, age: 18 &#125;,\n]\nnameMap = arr.map(v =&gt; v.name) // [&#39;张三&#39;, &#39;李四&#39;, &#39;王麻子&#39;, &#39;小六&#39;]\nnameMap = Array.from(arr, (&#123;name&#125;) =&gt; name) // [&#39;张三&#39;, &#39;李四&#39;, &#39;王麻子&#39;, &#39;小六&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8</p>\n<h2 id=\"2-13-获取最后-n-个元素\"><a href=\"#2-13-获取最后-n-个元素\" class=\"headerlink\" title=\"# 2.13 获取最后 n 个元素\"></a><a href=\"#\">#</a> 2.13 获取最后 n 个元素</h2><h3 id=\"方法一：Array-splice-1\"><a href=\"#方法一：Array-splice-1\" class=\"headerlink\" title=\"# 方法一：Array.splice()\"></a><a href=\"#\">#</a> 方法一：Array.splice()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n\narr.slice().splice(-1) // [&#39;dddd&#39;]\narr.slice().splice(-3) // &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h2 id=\"2-233-二维数组绘制图形\"><a href=\"#2-233-二维数组绘制图形\" class=\"headerlink\" title=\"# 2.233 二维数组绘制图形\"></a><a href=\"#\">#</a> 2.233 二维数组绘制图形</h2><h3 id=\"方法一：Emmm\"><a href=\"#方法一：Emmm\" class=\"headerlink\" title=\"# 方法一：Emmm\"></a><a href=\"#\">#</a> 方法一：Emmm</h3><pre><code>// Emmmm\n</code></pre>\n<p>1</p>\n<h1 id=\"弎。循环的性能与小优化\"><a href=\"#弎。循环的性能与小优化\" class=\"headerlink\" title=\"# 弎。循环的性能与小优化\"></a><a href=\"#\">#</a> 弎。循环的性能与小优化</h1><h2 id=\"优化一：优化-for-循环\"><a href=\"#优化一：优化-for-循环\" class=\"headerlink\" title=\"# 优化一：优化 for 循环\"></a><a href=\"#\">#</a> 优化一：优化 for 循环</h2><ul>\n<li>当循环复杂度为 <code>O(n)</code> 时，<code>减少每次迭代的工作量</code>是最有效的方法。</li>\n<li>当复杂度大于 <code>O(n)</code> 时，建议着重<code>减少迭代次数</code>。</li>\n</ul>\n<h3 id=\"a-减少每次取-length-的次数\"><a href=\"#a-减少每次取-length-的次数\" class=\"headerlink\" title=\"# a. 减少每次取 length 的次数\"></a><a href=\"#\">#</a> a. 减少每次取 length 的次数</h3><p>这样避免了每次执行循环都要先去找 array.length</p>\n<pre><code>for (let i = 0; i &lt; array.length; i++) &#123;\n    console.log(i) // 0 1 2\n&#125;\n\n// 优化后\nfor (let i = 0, len = array.length; i &lt; len; i++) &#123;\n    console.log(i) // 0 1 2\n    // do sth...\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p>\n<h3 id=\"b-倒序循环\"><a href=\"#b-倒序循环\" class=\"headerlink\" title=\"# b. 倒序循环\"></a><a href=\"#\">#</a> b. 倒序循环</h3><pre><code>for (let i = array.length; i &gt; 0; i--) &#123;\n    console.log(i) // 3 2 1\n&#125;\n\n// 优化后\nfor (let i = array.length - 1; i &gt;= 0; i--) &#123;\n    console.log(i) // 2 1 0\n&#125;\n\n// 优化后\nfor (let i = array.length; i--;) &#123;\n    console.log(i) // 2 1 0\n    // do sth...\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14</p>\n<h2 id=\"优化二：不要使用-for-in-来遍历数组\"><a href=\"#优化二：不要使用-for-in-来遍历数组\" class=\"headerlink\" title=\"# 优化二：不要使用 for-in 来遍历数组\"></a><a href=\"#\">#</a> 优化二：不要使用 for-in 来遍历数组</h2><p>在 JavaScript 提供的循环类型中，只有 for-in 循环比其他几种明显要慢。</p>\n<p>由于每次迭代操作会同时搜索实例或原型属性，for-in 循环的每次迭代都会产生更多开销，所以比其他循环类型要慢。</p>\n<p>因此，除非你明确需要迭代一个属性数量未知的对象，否则应避免使用 for-in 循环。</p>\n<h2 id=\"优化三：慎用基于函数的迭代\"><a href=\"#优化三：慎用基于函数的迭代\" class=\"headerlink\" title=\"# 优化三：慎用基于函数的迭代\"></a><a href=\"#\">#</a> 优化三：慎用基于函数的迭代</h2><p>例如：forEach</p>\n<p>基于函数的迭代提供了一个更为便利的迭代方法，但它仍然比基于循环的迭代<code>要慢一些</code>。<code>对每个数组调用外部方法所带来的开销</code>是速度慢的主要原因。在所有情况下，基于循环的迭代比基于函数的迭代快<code>8倍</code>，因此在运行速度要求严格时，基于函数的迭代不是更好的选择。</p>\n<h2 id=\"优化四：尽量使用-switch-case-条件语句\"><a href=\"#优化四：尽量使用-switch-case-条件语句\" class=\"headerlink\" title=\"# 优化四：尽量使用 switch-case 条件语句\"></a><a href=\"#\">#</a> 优化四：尽量使用 switch-case 条件语句</h2><p>除非在<code>非真既假</code>的判断中，其余条件判断时多用 switch-case 语句，少用 if/else-if/else 语句。原因如下：</p>\n<ul>\n<li>支持关联操作，即不写 break 语句</li>\n<li>本质是汇编时生成的跳转表来指示 case 的地址，所以每一个 case 的执行时间基本是相同的，执行效率不会受先后顺序的影响</li>\n<li>代码更清晰，可读性和可维护性要高很多</li>\n</ul>\n<h2 id=\"优化五：查找表\"><a href=\"#优化五：查找表\" class=\"headerlink\" title=\"# 优化五：查找表\"></a><a href=\"#\">#</a> 优化五：查找表</h2><p>当有大量离散数据的时候，使用查找表比使用 if-else 和 switch-case 快得多。</p>\n<pre><code>// 将返回值集合存入数组\nconst results = [result0, result1, result2, result3, result4]\n\n// 返回结果\nreturn results[value]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h1 id=\"肆。课外题\"><a href=\"#肆。课外题\" class=\"headerlink\" title=\"# 肆。课外题\"></a><a href=\"#\">#</a> 肆。课外题</h1><h2 id=\"箭头函数的输出\"><a href=\"#箭头函数的输出\" class=\"headerlink\" title=\"# 箭头函数的输出\"></a><a href=\"#\">#</a> 箭头函数的输出</h2><pre><code>var func1 = x =&gt; x\nfunc1(2) // 2\nvar func2 = x =&gt; &#123;x&#125;\nfunc2(2) // undefined\nvar func3 = x =&gt; (&#123;x&#125;)\nfunc3() // &#123;x: undefined&#125;\nfunc3(2) // &#123;x: 2&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>考虑到日常开发中使用比较频繁，为了方便查找与回顾，整理此文。</p>\n</blockquote>\n<h1 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"# 基础篇\"></a><a href=\"#\">#</a> 基础篇</h1><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>concat()</td>\n<td>连接两个或多个数组，并返回已连接数组的副本。</td>\n</tr>\n<tr>\n<td>copyWithin()</td>\n<td>将数组中的数组元素复制到指定位置或从指定位置复制。</td>\n</tr>\n<tr>\n<td>entries()</td>\n<td>返回键/值对数组迭代对象。</td>\n</tr>\n<tr>\n<td>every()</td>\n<td>检查数组中的每个元素是否通过测试。</td>\n</tr>\n<tr>\n<td>fill()</td>\n<td>用静态值填充数组中的元素。</td>\n</tr>\n<tr>\n<td>filter()</td>\n<td>使用数组中通过测试的每个元素创建新数组。</td>\n</tr>\n<tr>\n<td>find()</td>\n<td>返回数组中第一个通过测试的元素的值。</td>\n</tr>\n<tr>\n<td>findIndex()</td>\n<td>返回数组中通过测试的第一个元素的索引。</td>\n</tr>\n<tr>\n<td>forEach()</td>\n<td>为每个数组元素调用函数。</td>\n</tr>\n<tr>\n<td>from()</td>\n<td>从对象创建数组。</td>\n</tr>\n<tr>\n<td>includes()</td>\n<td>检查数组是否包含指定的元素。</td>\n</tr>\n<tr>\n<td>indexOf()</td>\n<td>在数组中搜索元素并返回其位置。</td>\n</tr>\n<tr>\n<td>isArray()</td>\n<td>检查对象是否为数组。</td>\n</tr>\n<tr>\n<td>join()</td>\n<td>将数组的所有元素连接成一个字符串。</td>\n</tr>\n<tr>\n<td>keys()</td>\n<td>返回 Array Iteration 对象，包含原始数组的键.</td>\n</tr>\n<tr>\n<td>lastIndexOf()</td>\n<td>在数组中搜索元素，从末尾开始，并返回其位置。</td>\n</tr>\n<tr>\n<td>map()</td>\n<td>使用为每个数组元素调用函数的结果创建新数组。</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>删除数组的最后一个元素，并返回该元素。</td>\n</tr>\n<tr>\n<td>push()</td>\n<td>将新元素添加到数组的末尾，并返回新的长度。</td>\n</tr>\n<tr>\n<td>reduce()</td>\n<td>将数组的值减为单个值（从左到右）。</td>\n</tr>\n<tr>\n<td>reduceRight()</td>\n<td>将数组的值减为单个值（从右到左）。</td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td>反转数组中元素的顺序。</td>\n</tr>\n<tr>\n<td>shift()</td>\n<td>删除数组的第一个元素，并返回该元素。</td>\n</tr>\n<tr>\n<td>slice()</td>\n<td>选择数组的一部分，并返回新数组。</td>\n</tr>\n<tr>\n<td>some()</td>\n<td>检查数组中的任何元素是否通过测试。</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td>对数组的元素进行排序。</td>\n</tr>\n<tr>\n<td>splice()</td>\n<td>从数组中添加/删除元素。</td>\n</tr>\n<tr>\n<td>toString()</td>\n<td>将数组转换为字符串，并返回结果。</td>\n</tr>\n<tr>\n<td>unshift()</td>\n<td>将新元素添加到数组的开头，并返回新的长度。</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td>返回数组的原始值。</td>\n</tr>\n<tr>\n<td>at()</td>\n<td>2021.1 新提案，解决方括号的限制，可以输入负数。</td>\n</tr>\n</tbody></table>\n<p>[TOC]</p>\n<h2 id=\"1-1-求和\"><a href=\"#1-1-求和\" class=\"headerlink\" title=\"# 1.1 求和\"></a><a href=\"#\">#</a> 1.1 求和</h2><h3 id=\"方法一：Array-prototype-forEach\"><a href=\"#方法一：Array-prototype-forEach\" class=\"headerlink\" title=\"# 方法一：Array.prototype.forEach()\"></a><a href=\"#\">#</a> 方法一：Array.prototype.forEach()</h3><pre><code>var total = 0;\n[1, 2, 3].forEach(function (num) &#123;\n  total += num;\n&#125;);\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h3 id=\"方法二：Array-prototype-reduce\"><a href=\"#方法二：Array-prototype-reduce\" class=\"headerlink\" title=\"# 方法二：Array.prototype.reduce()\"></a><a href=\"#\">#</a> 方法二：Array.prototype.reduce()</h3><pre><code>var total = [1, 2, 3].reduce(function (sum, current) &#123;\n  return sum + current;\n&#125;, 0);\n</code></pre>\n<p>1<br>2<br>3</p>\n<h2 id=\"1-2-排序\"><a href=\"#1-2-排序\" class=\"headerlink\" title=\"# 1.2 排序\"></a><a href=\"#\">#</a> 1.2 排序</h2><h3 id=\"方法一：sort\"><a href=\"#方法一：sort\" class=\"headerlink\" title=\"# 方法一：sort()\"></a><a href=\"#\">#</a> 方法一：sort()</h3><pre><code>// 默认是升序\n[1, 2, 3, 4].sort((a, b) =&gt; a - b); // [1, 2, 3, 4]\n// 降序\n[1, 2, 3, 4].sort((a, b) =&gt; b - a); // [4, 3, 2, 1]\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h3 id=\"方法二：排序算法\"><a href=\"#方法二：排序算法\" class=\"headerlink\" title=\"# 方法二：排序算法\"></a><a href=\"#\">#</a> 方法二：排序算法</h3><p><img src=\"https://gblobscdn.gitbook.com/assets%2F-Lm9JtwbhXVOfXyecToy%2F-Lm9KQIJAMvCgJQzErQS%2F-Lm9KSPi7v-ygMtlI6Zr%2Fsort.png?alt=media\"></p>\n<p>参考文献</p>\n<ul>\n<li><a href=\"https://sort.hust.cc/\">十大经典排序算法 - Git Book (opens new window)</a></li>\n<li>[JavaScript 数据结构与算法之美 - 十大经典排序算法 - 天明夜尽 (opens new window)](<a href=\"https://juejin.cn/post/6844903902484103182\">https://juejin.cn/post/6844903902484103182</a> target=)</li>\n</ul>\n<h2 id=\"1-3-取最大值\"><a href=\"#1-3-取最大值\" class=\"headerlink\" title=\"# 1.3 取最大值\"></a><a href=\"#\">#</a> 1.3 取最大值</h2><h3 id=\"方法一：Math-max\"><a href=\"#方法一：Math-max\" class=\"headerlink\" title=\"# 方法一：Math.max()\"></a><a href=\"#\">#</a> 方法一：Math.max()</h3><pre><code>Math.max() // -Infinity，即 -∞\n\nMath.max(Infinity, -Infinity) // Infinity，即 ∞\n\nMath.max(...[1, 2, 3, 4]) // 4\n\nMath.max.apply(this, [1, 2, 3, 4]) // 4\n\n[1, 2, 3, 4].reduce( (prev, cur,curIndex,arr)=&gt; &#123;\n return Math.max(prev,cur);\n&#125;,0) // 4\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p>\n<h2 id=\"1-4-判断是否包含某值\"><a href=\"#1-4-判断是否包含某值\" class=\"headerlink\" title=\"# 1.4 判断是否包含某值\"></a><a href=\"#\">#</a> 1.4 判断是否包含某值</h2><h3 id=\"方法一：Array-includes\"><a href=\"#方法一：Array-includes\" class=\"headerlink\" title=\"# 方法一：Array.includes()\"></a><a href=\"#\">#</a> 方法一：Array.includes()</h3><pre><code>[7, 8, 9].includes(4) // false\n</code></pre>\n<p>1</p>\n<h3 id=\"方法二：Array-indexOf\"><a href=\"#方法二：Array-indexOf\" class=\"headerlink\" title=\"# 方法二：Array.indexOf()\"></a><a href=\"#\">#</a> 方法二：Array.indexOf()</h3><pre><code>[7, 8, 9].indexOf(4) // -1 如果存在返回索引\n[7, 8, 9].indexOf(9) // 2\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法三：Array-find\"><a href=\"#方法三：Array-find\" class=\"headerlink\" title=\"# 方法三：Array.find()\"></a><a href=\"#\">#</a> 方法三：Array.find()</h3><p>如果数组中无值返回 undefined</p>\n<pre><code>[7, 8, 9].find((item) =&gt; item === 4) // undefined\n[7, 8, 9].find((item) =&gt; item === 9) // 9\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法四：Array-findIndex\"><a href=\"#方法四：Array-findIndex\" class=\"headerlink\" title=\"# 方法四：Array.findIndex()\"></a><a href=\"#\">#</a> 方法四：Array.findIndex()</h3><p>如果数组中无值返回-1</p>\n<pre><code>[7, 8, 9].findIndex((item)=&gt; item === 4) // -1\n[7, 8, 9].findIndex((item)=&gt; item === 9) // 2\n</code></pre>\n<p>1<br>2</p>\n<h2 id=\"1-5-某一项设置值\"><a href=\"#1-5-某一项设置值\" class=\"headerlink\" title=\"# 1.5 某一项设置值\"></a><a href=\"#\">#</a> 1.5 某一项设置值</h2><h3 id=\"方法一：Array-splice\"><a href=\"#方法一：Array-splice\" class=\"headerlink\" title=\"# 方法一：Array.splice()\"></a><a href=\"#\">#</a> 方法一：Array.splice()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr.splice(3, 0, 3)\narr // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, 3, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3</p>\n<h2 id=\"1-6-每一项设置值\"><a href=\"#1-6-每一项设置值\" class=\"headerlink\" title=\"# 1.6 每一项设置值\"></a><a href=\"#\">#</a> 1.6 每一项设置值</h2><h3 id=\"方法一：Array-fill\"><a href=\"#方法一：Array-fill\" class=\"headerlink\" title=\"# 方法一：Array.fill()\"></a><a href=\"#\">#</a> 方法一：Array.fill()</h3><pre><code>[7,8,9,10,11,12].fill() // [undefined, undefined, undefined, undefined, undefined, undefined]\n[7,8,9,10,11,12].fill(7) // [7, 7, 7, 7, 7, 7]\n[7,8,9,10,11,12].fill(3, 2, 4) // [7, 8, 3, 3, 11, 12]\n</code></pre>\n<p>1<br>2<br>3</p>\n<h3 id=\"方法二：Array-map\"><a href=\"#方法二：Array-map\" class=\"headerlink\" title=\"# 方法二：Array.map()\"></a><a href=\"#\">#</a> 方法二：Array.map()</h3><pre><code>[7, 8, 9].map((item, idx) =&gt; item % 2) // [1, 0, 1]\n[7, 8, 9].map((item, idx) =&gt; idx) // [0, 1, 2]\n</code></pre>\n<p>1<br>2</p>\n<h2 id=\"1-7-每一项是否满足\"><a href=\"#1-7-每一项是否满足\" class=\"headerlink\" title=\"# 1.7 每一项是否满足\"></a><a href=\"#\">#</a> 1.7 每一项是否满足</h2><h3 id=\"方法一：Array-every\"><a href=\"#方法一：Array-every\" class=\"headerlink\" title=\"# 方法一：Array.every()\"></a><a href=\"#\">#</a> 方法一：Array.every()</h3><pre><code>[1,2,3].every(item=&gt;&#123;return item&gt;2&#125;) //false\n</code></pre>\n<p>1</p>\n<h2 id=\"1-8-有一项满足\"><a href=\"#1-8-有一项满足\" class=\"headerlink\" title=\"# 1.8 有一项满足\"></a><a href=\"#\">#</a> 1.8 有一项满足</h2><h3 id=\"方法一：Array-some\"><a href=\"#方法一：Array-some\" class=\"headerlink\" title=\"# 方法一：Array.some()\"></a><a href=\"#\">#</a> 方法一：Array.some()</h3><pre><code>[1,2,3].some(item=&gt;&#123;return item&gt;2&#125;) //true\n</code></pre>\n<p>1</p>\n<h1 id=\"贰。番外篇\"><a href=\"#贰。番外篇\" class=\"headerlink\" title=\"# 贰。番外篇\"></a><a href=\"#\">#</a> 贰。番外篇</h1><h2 id=\"2-1-重写-Array-prototype-at\"><a href=\"#2-1-重写-Array-prototype-at\" class=\"headerlink\" title=\"# 2.1 重写 Array .prototype. at()\"></a><a href=\"#\">#</a> 2.1 重写 Array .prototype. at()</h2><pre><code>// 兼容老浏览器的 MDN polyfill\n// 注释：Polyfill 是一块代码（通常是 Web 上的 JavaScript），用来为旧浏览器提供它没有原生支持的较新的功能。\nif (Array.prototype.at) &#123;\n    Array.prototype.at = function (idx) &#123;\n        return this[this.length + idx]\n    &#125;\n&#125;\narr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr.at(-1) // &#39;dddd&#39;\narr.at(-3) // &#39;bbbb&#39;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p>\n<h2 id=\"2-2-清空数组\"><a href=\"#2-2-清空数组\" class=\"headerlink\" title=\"# 2.2 清空数组\"></a><a href=\"#\">#</a> 2.2 清空数组</h2><h3 id=\"方法一：Array-length\"><a href=\"#方法一：Array-length\" class=\"headerlink\" title=\"# 方法一：Array.length\"></a><a href=\"#\">#</a> 方法一：Array.length</h3><p>最快</p>\n<pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = arr\narr // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n\narr.length = 0 // 0\n\narr // []\n// 被引用的数组，也会被清空\narr1 // []\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p>\n<h3 id=\"方法二：Array-splice\"><a href=\"#方法二：Array-splice\" class=\"headerlink\" title=\"# 方法二：Array.splice()\"></a><a href=\"#\">#</a> 方法二：Array.splice()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = arr\n\narr.splice(0) // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n\narr // []\n// 同上，被引用的也会被清空\narr1 // []\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8</p>\n<h3 id=\"方法三：直接赋予新数组\"><a href=\"#方法三：直接赋予新数组\" class=\"headerlink\" title=\"# 方法三：直接赋予新数组[]\"></a><a href=\"#\">#</a> 方法三：直接赋予新数组[]</h3><p>最慢，且占用内存</p>\n<pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = arr\n\narr = [] // []\n\narr // []\n// 被引用的数组，不会被清空\narr1 // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8</p>\n<h2 id=\"2-3-扁平化\"><a href=\"#2-3-扁平化\" class=\"headerlink\" title=\"# 2.3 扁平化\"></a><a href=\"#\">#</a> 2.3 扁平化</h2><pre><code>const arr = [1, [2, [3, [4, 5]]], 6];\n// =&gt; [1, 2, 3, 4, 5, 6]\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法一：Array-prototype-flat\"><a href=\"#方法一：Array-prototype-flat\" class=\"headerlink\" title=\"# 方法一：Array.prototype.flat()\"></a><a href=\"#\">#</a> 方法一：Array.prototype.flat()</h3><pre><code>const res1 = arr.flat(Infinity);\n</code></pre>\n<p>1</p>\n<h3 id=\"方法二：new-RegExp\"><a href=\"#方法二：new-RegExp\" class=\"headerlink\" title=\"# 方法二：new RegExp()\"></a><a href=\"#\">#</a> 方法二：new RegExp()</h3><pre><code>// 缺点：都会变成字符串\nconst res2 = JSON.stringify(arr).replace(/\\[|\\]/g, &#39;&#39;).split(&#39;,&#39;);\n// 改良版\nconst res3 = JSON.parse(&#39;[&#39; + JSON.stringify(arr).replace(/\\[|\\]/g, &#39;&#39;) + &#39;]&#39;);\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h3 id=\"方法三：Array-prototype-reduce\"><a href=\"#方法三：Array-prototype-reduce\" class=\"headerlink\" title=\"# 方法三：Array.prototype.reduce()\"></a><a href=\"#\">#</a> 方法三：Array.prototype.reduce()</h3><pre><code>const flatten = arr =&gt; &#123;\n  return arr.reduce((pre, cur) =&gt; &#123;\n    return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n  &#125;, [])\n&#125;\nconst res4 = flatten(arr);\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6</p>\n<h3 id=\"方法四：函数递归\"><a href=\"#方法四：函数递归\" class=\"headerlink\" title=\"# 方法四：函数递归\"></a><a href=\"#\">#</a> 方法四：函数递归</h3><pre><code>const res5 = [];\nconst fn = arr =&gt; &#123;\n  for (let i = 0; i &lt; arr.length; i++) &#123;\n    if (Array.isArray(arr[i])) &#123;\n      fn(arr[i]);\n    &#125; else &#123;\n      res5.push(arr[i]);\n    &#125;\n  &#125;\n&#125;\nfn(arr);\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p>\n<h3 id=\"方法五：while-some\"><a href=\"#方法五：while-some\" class=\"headerlink\" title=\"# 方法五：while() + some()\"></a><a href=\"#\">#</a> 方法五：while() + some()</h3><pre><code>function flatten(arr) &#123;\n    while(arr.some(item=&gt;Array.isArray(item))) &#123;\n        arr = [].concat(...arr);\n    &#125;\n    return arr;\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6</p>\n<h2 id=\"2-4-合并\"><a href=\"#2-4-合并\" class=\"headerlink\" title=\"# 2.4 合并\"></a><a href=\"#\">#</a> 2.4 合并</h2><h3 id=\"方法一：Array-push\"><a href=\"#方法一：Array-push\" class=\"headerlink\" title=\"# 方法一：Array.push()\"></a><a href=\"#\">#</a> 方法一：Array.push()</h3><pre><code>const arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr.push(1, 2, 3,[4, 5, 6]) // 8\narr // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;, 1, 2, 3, Array(3)]\n</code></pre>\n<p>1<br>2<br>3</p>\n<h3 id=\"方法二：Array-concat\"><a href=\"#方法二：Array-concat\" class=\"headerlink\" title=\"# 方法二：Array.concat()\"></a><a href=\"#\">#</a> 方法二：Array.concat()</h3><pre><code>arr.concat([1, 2, 3],[4, 5, 6]) // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;, 1, 2, 3, 4, 5, 6]\narr // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法二：扩展运算符\"><a href=\"#方法二：扩展运算符\" class=\"headerlink\" title=\"# 方法二：扩展运算符\"></a><a href=\"#\">#</a> 方法二：扩展运算符</h3><pre><code>[...[1, 2, 3, 4],...[4, 5]] //[1,2,3,4,5,6]\n</code></pre>\n<p>1</p>\n<h2 id=\"2-5-去重\"><a href=\"#2-5-去重\" class=\"headerlink\" title=\"# 2.5 去重\"></a><a href=\"#\">#</a> 2.5 去重</h2><pre><code>const arr = [1, 1, &#39;1&#39;, 17, true, true, false, false, &#39;true&#39;, &#39;a&#39;, &#123;&#125;, &#123;&#125;];\n// =&gt; [1, &#39;1&#39;, 17, true, false, &#39;true&#39;, &#39;a&#39;, &#123;&#125;, &#123;&#125;]\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法一：new-Set\"><a href=\"#方法一：new-Set\" class=\"headerlink\" title=\"# 方法一：new Set()\"></a><a href=\"#\">#</a> 方法一：new Set()</h3><pre><code>const arr1 = Array.from(new Set(arr));\n// 或\nconst arr1 = [...new Set(arr)];\n\n// 是 Set 类型，不是 Array 类型\nObject.prototype.toString.call(new Set(arr)) // &#39;[object Set]&#39;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6</p>\n<h3 id=\"方法二：filter-indexOf\"><a href=\"#方法二：filter-indexOf\" class=\"headerlink\" title=\"# 方法二：filter() + indexOf()\"></a><a href=\"#\">#</a> 方法二：filter() + indexOf()</h3><pre><code>const arr2 = arr =&gt; &#123;\n  return arr.filter((item, index) =&gt; &#123;\n    return arr.indexOf(item) === index;\n  &#125;);\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h3 id=\"方法三：new-Map\"><a href=\"#方法三：new-Map\" class=\"headerlink\" title=\"# 方法三：new Map()\"></a><a href=\"#\">#</a> 方法三：new Map()</h3><pre><code>const arr3 = arr =&gt; &#123;\n  const map = new Map();\n  const res = [];\n  for (let i = 0; i &lt; arr.length; i++) &#123;\n    if (!map.has(arr[i])) &#123;\n      map.set(arr[i], true)\n      res.push(arr[i]);\n    &#125;\n  &#125;\n  return res;\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p>\n<h3 id=\"方法四：includes\"><a href=\"#方法四：includes\" class=\"headerlink\" title=\"# 方法四：includes()\"></a><a href=\"#\">#</a> 方法四：includes()</h3><pre><code>const arr4 = arr =&gt; &#123;\n  const res = [];\n  for (let i = 0; i &lt; arr.length; i++) &#123;\n    if (!res.includes(arr[i])) res.push(arr[i]);\n  &#125;\n  return res;\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7</p>\n<h2 id=\"2-6-交集\"><a href=\"#2-6-交集\" class=\"headerlink\" title=\"# 2.6 交集\"></a><a href=\"#\">#</a> 2.6 交集</h2><h3 id=\"方法一：new-Set-1\"><a href=\"#方法一：new-Set-1\" class=\"headerlink\" title=\"# 方法一：new Set()\"></a><a href=\"#\">#</a> 方法一：new Set()</h3><pre><code>const one = [0, 2, 4, 6, 8, 8]\nconst two = [1, 2, 3, 4, 5, 6]\nconst duplicated = [...new Set(one)].filter(v =&gt; two.includes(v)) // [2, 4, 6]\n</code></pre>\n<p>1<br>2<br>3</p>\n<h2 id=\"2-7-删除虚值\"><a href=\"#2-7-删除虚值\" class=\"headerlink\" title=\"# 2.7 删除虚值\"></a><a href=\"#\">#</a> 2.7 删除虚值</h2><h3 id=\"方法一：Array-prototype-filter\"><a href=\"#方法一：Array-prototype-filter\" class=\"headerlink\" title=\"# 方法一：Array.prototype.filter()\"></a><a href=\"#\">#</a> 方法一：Array.prototype.filter()</h3><pre><code>const arr = [0, &#39;blue&#39;, &#39;&#39;, NaN, 9, true, undefined, &#39;while&#39;, false]\nconst real = arr.filter(Boolean) // [&#39;blue&#39;, 9, true, &#39;while&#39;]\n</code></pre>\n<p>1<br>2</p>\n<h2 id=\"2-8-重组（变量交换）\"><a href=\"#2-8-重组（变量交换）\" class=\"headerlink\" title=\"# 2.8 重组（变量交换）\"></a><a href=\"#\">#</a> 2.8 重组（变量交换）</h2><h3 id=\"方法一：解构赋值\"><a href=\"#方法一：解构赋值\" class=\"headerlink\" title=\"# 方法一：解构赋值\"></a><a href=\"#\">#</a> 方法一：解构赋值</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;, &#39;eee&#39;, &#39;fff&#39;]\n[arr[1], arr[2]] = [arr[2], arr[1]] // [&#39;cccc&#39;, &#39;bbbb&#39;]\narr // [&#39;aaa&#39;, &#39;cccc&#39;, &#39;bbbb&#39;, &#39;dddd&#39;]\n\n// 如果想获取单个值\n[a, , , e, f] = arr\na // &#39;aaa&#39;\ne // &#39;dddd&#39;\nf // &#39;eee&#39;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p>\n<h3 id=\"方法二：Array-splice-1\"><a href=\"#方法二：Array-splice-1\" class=\"headerlink\" title=\"# 方法二：Array.splice()\"></a><a href=\"#\">#</a> 方法二：Array.splice()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;, &#39;eee&#39;, &#39;fff&#39;, &#39;ggg&#39;, &#39;hhh&#39;, &#39;iii&#39;]\narr.splice(1, 3, ...arr.splice(4, 4, arr[1], arr[2], arr[3])) // [&#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr // [&#39;aaa&#39;, &#39;eee&#39;, &#39;fff&#39;, &#39;ggg&#39;, &#39;hhh&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;, &#39;iii&#39;]\n</code></pre>\n<p>1<br>2<br>3</p>\n<h3 id=\"方法三：引入中转变量\"><a href=\"#方法三：引入中转变量\" class=\"headerlink\" title=\"# 方法三：引入中转变量\"></a><a href=\"#\">#</a> 方法三：引入中转变量</h3><pre><code>temp = arr[1]\narr[1] = arr[2]\narr[2] = temp\n</code></pre>\n<p>1<br>2<br>3</p>\n<h2 id=\"2-9-类数组-–-gt-数组\"><a href=\"#2-9-类数组-–-gt-数组\" class=\"headerlink\" title=\"# 2.9 类数组 –&gt; 数组\"></a><a href=\"#\">#</a> 2.9 类数组 –&gt; 数组</h2><pre><code>// 类数组（包含 length 属性，比如 arguments、DOM 操作方法返回的结果等）\nconst asArr = &#123; 0: &#39;aaa&#39;, &#39;1&#39;: &#39;bbb&#39;, &#39;二&#39;: &#39;ccc&#39;, 4: &#39;eee&#39;, length: 6 &#125;\n</code></pre>\n<p>1<br>2</p>\n<h3 id=\"方法一：Array-prototype-from\"><a href=\"#方法一：Array-prototype-from\" class=\"headerlink\" title=\"# 方法一：Array.prototype.from()\"></a><a href=\"#\">#</a> 方法一：Array.prototype.from()</h3><pre><code>Array.from(asArr)\n// =&gt; [&#39;aaa&#39;, &#39;bbb&#39;, undefined, undefined, &#39;eee&#39;, undefined]\n// undefined 可枚举\n</code></pre>\n<p>1<br>2<br>3</p>\n<h3 id=\"方法二：Array-prototype-slice-call\"><a href=\"#方法二：Array-prototype-slice-call\" class=\"headerlink\" title=\"# 方法二：Array.prototype.slice.call()\"></a><a href=\"#\">#</a> 方法二：Array.prototype.slice.call()</h3><pre><code>Array.prototype.slice.call(asArr)\n// =&gt; [&#39;aaa&#39;, &#39;bbb&#39;, empty × 2, &#39;eee&#39;, empty]\n// empty 不可枚举\n</code></pre>\n<p>1<br>2<br>3</p>\n<p>PS：其他产生 empty 的情况</p>\n<pre><code>// 也会产生 empty 空位，不会改变 length 属性\ndelete arr[2]\n// 直接删掉元素，且改变 length 属性\narr.splice(2, 1)\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h3 id=\"方法三：扩展运算符\"><a href=\"#方法三：扩展运算符\" class=\"headerlink\" title=\"# 方法三：扩展运算符\"></a><a href=\"#\">#</a> 方法三：扩展运算符</h3><pre><code>[...document.querySelectorAll(&#39;div&#39;)]\n</code></pre>\n<p>1</p>\n<h2 id=\"2-10-数组-–-gt-对象\"><a href=\"#2-10-数组-–-gt-对象\" class=\"headerlink\" title=\"# 2.10 数组 –&gt; 对象\"></a><a href=\"#\">#</a> 2.10 数组 –&gt; 对象</h2><h3 id=\"方法一：扩展运算符\"><a href=\"#方法一：扩展运算符\" class=\"headerlink\" title=\"# 方法一：扩展运算符\"></a><a href=\"#\">#</a> 方法一：扩展运算符</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n// [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n&#123; ...arr &#125;\n// &#123;0: &#39;aaa&#39;, 1: &#39;bbbb&#39;, 2: &#39;cccc&#39;, 3: &#39;dddd&#39;&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h3 id=\"方法二：while\"><a href=\"#方法二：while\" class=\"headerlink\" title=\"# 方法二：while()\"></a><a href=\"#\">#</a> 方法二：while()</h3><pre><code>i = 0\ns = &#123;&#125;\narr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n\nwhile (arr[i]) &#123;\n    s[i] = arr[i++]\n&#125;\n\ns // &#123;0: &#39;aaa&#39;, 1: &#39;bbbb&#39;, 2: &#39;cccc&#39;, 3: &#39;dddd&#39;&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p>\n<h3 id=\"方法三：Object-fromEntries\"><a href=\"#方法三：Object-fromEntries\" class=\"headerlink\" title=\"# 方法三：Object.fromEntries()\"></a><a href=\"#\">#</a> 方法三：Object.fromEntries()</h3><pre><code>Object.keys(&#123;name:&#39;张三&#39;,age:14&#125;) // [&#39;name&#39;,&#39;age&#39;]\nObject.values(&#123;name:&#39;张三&#39;,age:14&#125;) // [&#39;张三&#39;,14]\nObject.entries(&#123;name:&#39;张三&#39;,age:14&#125;) // [[name,&#39;张三&#39;],[age,14]]\nObject.fromEntries([name,&#39;张三&#39;],[age,14]) // ES10的api,Chrome不支持, firebox输出&#123;name:&#39;张三&#39;,age:14&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h2 id=\"2-11-浅拷贝\"><a href=\"#2-11-浅拷贝\" class=\"headerlink\" title=\"# 2.11 浅拷贝\"></a><a href=\"#\">#</a> 2.11 浅拷贝</h2><h3 id=\"方法一：Array-slice\"><a href=\"#方法一：Array-slice\" class=\"headerlink\" title=\"# 方法一：Array.slice()\"></a><a href=\"#\">#</a> 方法一：Array.slice()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = arr.slice(0)\narr[1] = 2333 // 2333\narr // [&#39;aaa&#39;, 2333, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h3 id=\"方法二：展开操作符\"><a href=\"#方法二：展开操作符\" class=\"headerlink\" title=\"# 方法二：展开操作符\"></a><a href=\"#\">#</a> 方法二：展开操作符</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = [...arr]\narr[1] = 2333 // 2333\narr // [&#39;aaa&#39;, 2333, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h3 id=\"方法三：Array-concat\"><a href=\"#方法三：Array-concat\" class=\"headerlink\" title=\"# 方法三：Array.concat()\"></a><a href=\"#\">#</a> 方法三：Array.concat()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = [].concat(array)\narr[1] = 2333 // 2333\narr // [&#39;aaa&#39;, 2333, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 // [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h3 id=\"方法四：直接赋值\"><a href=\"#方法四：直接赋值\" class=\"headerlink\" title=\"# 方法四：直接赋值\"></a><a href=\"#\">#</a> 方法四：直接赋值</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 = arr\narr[1] = 2333 // 2333\narr // [&#39;aaa&#39;, 2333, &#39;cccc&#39;, &#39;dddd&#39;]\narr1 // [&#39;aaa&#39;, 2333, &#39;cccc&#39;, &#39;dddd&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h2 id=\"2-12-Array-from-达到-map-的效果\"><a href=\"#2-12-Array-from-达到-map-的效果\" class=\"headerlink\" title=\"# 2.12 Array.from 达到 .map 的效果\"></a><a href=\"#\">#</a> 2.12 Array.from 达到 .map 的效果</h2><pre><code>arr = [\n    &#123; name: &#39;张三&#39;, age: 18 &#125;,\n    &#123; name: &#39;李四&#39;, age: 18 &#125;,\n    &#123; name: &#39;王麻子&#39;, age: 18 &#125;,\n    &#123; name: &#39;小六&#39;, age: 18 &#125;,\n]\nnameMap = arr.map(v =&gt; v.name) // [&#39;张三&#39;, &#39;李四&#39;, &#39;王麻子&#39;, &#39;小六&#39;]\nnameMap = Array.from(arr, (&#123;name&#125;) =&gt; name) // [&#39;张三&#39;, &#39;李四&#39;, &#39;王麻子&#39;, &#39;小六&#39;]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8</p>\n<h2 id=\"2-13-获取最后-n-个元素\"><a href=\"#2-13-获取最后-n-个元素\" class=\"headerlink\" title=\"# 2.13 获取最后 n 个元素\"></a><a href=\"#\">#</a> 2.13 获取最后 n 个元素</h2><h3 id=\"方法一：Array-splice-1\"><a href=\"#方法一：Array-splice-1\" class=\"headerlink\" title=\"# 方法一：Array.splice()\"></a><a href=\"#\">#</a> 方法一：Array.splice()</h3><pre><code>arr = [&#39;aaa&#39;, &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;]\n\narr.slice().splice(-1) // [&#39;dddd&#39;]\narr.slice().splice(-3) // &#39;bbbb&#39;, &#39;cccc&#39;, &#39;dddd&#39;\n</code></pre>\n<p>1<br>2<br>3<br>4</p>\n<h2 id=\"2-233-二维数组绘制图形\"><a href=\"#2-233-二维数组绘制图形\" class=\"headerlink\" title=\"# 2.233 二维数组绘制图形\"></a><a href=\"#\">#</a> 2.233 二维数组绘制图形</h2><h3 id=\"方法一：Emmm\"><a href=\"#方法一：Emmm\" class=\"headerlink\" title=\"# 方法一：Emmm\"></a><a href=\"#\">#</a> 方法一：Emmm</h3><pre><code>// Emmmm\n</code></pre>\n<p>1</p>\n<h1 id=\"弎。循环的性能与小优化\"><a href=\"#弎。循环的性能与小优化\" class=\"headerlink\" title=\"# 弎。循环的性能与小优化\"></a><a href=\"#\">#</a> 弎。循环的性能与小优化</h1><h2 id=\"优化一：优化-for-循环\"><a href=\"#优化一：优化-for-循环\" class=\"headerlink\" title=\"# 优化一：优化 for 循环\"></a><a href=\"#\">#</a> 优化一：优化 for 循环</h2><ul>\n<li>当循环复杂度为 <code>O(n)</code> 时，<code>减少每次迭代的工作量</code>是最有效的方法。</li>\n<li>当复杂度大于 <code>O(n)</code> 时，建议着重<code>减少迭代次数</code>。</li>\n</ul>\n<h3 id=\"a-减少每次取-length-的次数\"><a href=\"#a-减少每次取-length-的次数\" class=\"headerlink\" title=\"# a. 减少每次取 length 的次数\"></a><a href=\"#\">#</a> a. 减少每次取 length 的次数</h3><p>这样避免了每次执行循环都要先去找 array.length</p>\n<pre><code>for (let i = 0; i &lt; array.length; i++) &#123;\n    console.log(i) // 0 1 2\n&#125;\n\n// 优化后\nfor (let i = 0, len = array.length; i &lt; len; i++) &#123;\n    console.log(i) // 0 1 2\n    // do sth...\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p>\n<h3 id=\"b-倒序循环\"><a href=\"#b-倒序循环\" class=\"headerlink\" title=\"# b. 倒序循环\"></a><a href=\"#\">#</a> b. 倒序循环</h3><pre><code>for (let i = array.length; i &gt; 0; i--) &#123;\n    console.log(i) // 3 2 1\n&#125;\n\n// 优化后\nfor (let i = array.length - 1; i &gt;= 0; i--) &#123;\n    console.log(i) // 2 1 0\n&#125;\n\n// 优化后\nfor (let i = array.length; i--;) &#123;\n    console.log(i) // 2 1 0\n    // do sth...\n&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14</p>\n<h2 id=\"优化二：不要使用-for-in-来遍历数组\"><a href=\"#优化二：不要使用-for-in-来遍历数组\" class=\"headerlink\" title=\"# 优化二：不要使用 for-in 来遍历数组\"></a><a href=\"#\">#</a> 优化二：不要使用 for-in 来遍历数组</h2><p>在 JavaScript 提供的循环类型中，只有 for-in 循环比其他几种明显要慢。</p>\n<p>由于每次迭代操作会同时搜索实例或原型属性，for-in 循环的每次迭代都会产生更多开销，所以比其他循环类型要慢。</p>\n<p>因此，除非你明确需要迭代一个属性数量未知的对象，否则应避免使用 for-in 循环。</p>\n<h2 id=\"优化三：慎用基于函数的迭代\"><a href=\"#优化三：慎用基于函数的迭代\" class=\"headerlink\" title=\"# 优化三：慎用基于函数的迭代\"></a><a href=\"#\">#</a> 优化三：慎用基于函数的迭代</h2><p>例如：forEach</p>\n<p>基于函数的迭代提供了一个更为便利的迭代方法，但它仍然比基于循环的迭代<code>要慢一些</code>。<code>对每个数组调用外部方法所带来的开销</code>是速度慢的主要原因。在所有情况下，基于循环的迭代比基于函数的迭代快<code>8倍</code>，因此在运行速度要求严格时，基于函数的迭代不是更好的选择。</p>\n<h2 id=\"优化四：尽量使用-switch-case-条件语句\"><a href=\"#优化四：尽量使用-switch-case-条件语句\" class=\"headerlink\" title=\"# 优化四：尽量使用 switch-case 条件语句\"></a><a href=\"#\">#</a> 优化四：尽量使用 switch-case 条件语句</h2><p>除非在<code>非真既假</code>的判断中，其余条件判断时多用 switch-case 语句，少用 if/else-if/else 语句。原因如下：</p>\n<ul>\n<li>支持关联操作，即不写 break 语句</li>\n<li>本质是汇编时生成的跳转表来指示 case 的地址，所以每一个 case 的执行时间基本是相同的，执行效率不会受先后顺序的影响</li>\n<li>代码更清晰，可读性和可维护性要高很多</li>\n</ul>\n<h2 id=\"优化五：查找表\"><a href=\"#优化五：查找表\" class=\"headerlink\" title=\"# 优化五：查找表\"></a><a href=\"#\">#</a> 优化五：查找表</h2><p>当有大量离散数据的时候，使用查找表比使用 if-else 和 switch-case 快得多。</p>\n<pre><code>// 将返回值集合存入数组\nconst results = [result0, result1, result2, result3, result4]\n\n// 返回结果\nreturn results[value]\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5</p>\n<h1 id=\"肆。课外题\"><a href=\"#肆。课外题\" class=\"headerlink\" title=\"# 肆。课外题\"></a><a href=\"#\">#</a> 肆。课外题</h1><h2 id=\"箭头函数的输出\"><a href=\"#箭头函数的输出\" class=\"headerlink\" title=\"# 箭头函数的输出\"></a><a href=\"#\">#</a> 箭头函数的输出</h2><pre><code>var func1 = x =&gt; x\nfunc1(2) // 2\nvar func2 = x =&gt; &#123;x&#125;\nfunc2(2) // undefined\nvar func3 = x =&gt; (&#123;x&#125;)\nfunc3() // &#123;x: undefined&#125;\nfunc3(2) // &#123;x: 2&#125;\n</code></pre>\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7</p>\n"},{"title":"import、require、export、module.exports 混合详解","date":"2021-12-09T09:20:56.000Z","_content":"\nimport、require、export、module.exports 混合使用详解\n-------------------------------------------\n\n前言\n--\n\n自从使用了 es6 的模块系统后，各种地方愉快地使用 `import` `export default`，但也会在老项目中看到使用commonjs规范的 `require` `module.exports`。甚至有时候也会常常看到两者互用的场景。使用没有问题，但其中的关联与区别不得其解，使用起来也糊里糊涂。比如：\n\n1.  为何有的地方使用 `require` 去引用一个模块时需要加上 `default`？ `require('xx').default`\n2.  经常在各大UI组件引用的文档上会看到说明 `import { button } from 'xx-ui'` 这样会引入所有组件内容，需要添加额外的 babel 配置，比如 `[babel-plugin-component](https://www.zhihu.com/search?q=babel-plugin-component&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)`？\n3.  为什么可以使用 es6 的 import 去引用 commonjs 规范定义的模块，或者反过来也可以又是为什么？\n4.  我们在浏览一些 npm 下载下来的 UI 组件模块时（比如说 [element-ui](https://www.zhihu.com/search?q=element-ui&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D) 的 lib 文件下），看到的都是 webpack 编译好的 js 文件，可以使用 import 或 require 再去引用。但是我们平时编译好的 js 是无法再被其他模块 import 的，这是为什么？\n5.  babel 在模块化的场景中充当了什么角色？以及 webpack ？哪个启到了关键作用？\n6.  听说 es6 还有 `[tree-shaking](https://www.zhihu.com/search?q=tree-shaking&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)` 功能，怎么才能使用这个功能？\n\n如果你对这些问题都了然于心，那么可以关掉本文了，如果有疑问，这篇文章就是为你准备的！\n\nwebpack 与 babel 在模块化中的作用\n------------------------\n\nwebpack 模块化的原理\n--------------\n\nwebpack 本身维护了一套模块系统，这套模块系统兼容了所有前端历史进程下的模块规范，包括 `amdcommonjs` `es6` 等，本文主要针对 `commonjs es6` 规范进行说明。模块化的实现其实就在最后编译的文件内。\n\n我编写了一个 demo 更好的展示效果。\n\n    // webpack\n    \n    const path = require('path');\n    \n    module.exports = {\n      entry: './a.js',\n      output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'bundle.js',\n      }\n    };\n    // a.js\n    import a from './c';\n    \n    export default 'a.js';\n    console.log(a);\n    // c.js\n    \n    export default 333;\n    (function(modules) {\n    \n      \n      function __webpack_require__(moduleId) {\n        var module =  {\n          i: moduleId,\n          l: false,\n          exports: {}\n        };\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        return module.exports;\n      }\n    \n      return __webpack_require__(0);\n    })([\n      (function (module, __webpack_exports__, __webpack_require__) {\n    \n        // 引用 模块 1\n        \"use strict\";\n        Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c__ = __webpack_require__(1);\n    \n    /* harmony default export */ __webpack_exports__[\"default\"] = ('a.js');\n    console.log(__WEBPACK_IMPORTED_MODULE_0__c__[\"a\" /* default */]);\n    \n      }),\n      (function (module, __webpack_exports__, __webpack_require__) {\n    \n        // 输出本模块的数据\n        \"use strict\";\n        /* harmony default export */ __webpack_exports__[\"a\"] = (333);\n      })\n    ]);\n    \n    \n\n上面这段 js 就是使用 webpack 编译后的代码（经过精简），其中就包含了 webpack的运行时代码，其中就是关于模块的实现。\n\n我们再精简下代码，会发现这是个自执行函数。\n\n    (function(modules) {\n    \n    })([]);\n    \n    \n\n自执行函数的入参是个数组，这个数组包含了所有的模块，包裹在函数中。\n\n自执行函数体里的逻辑就是处理模块的逻辑。关键在于 `__webpack_require__` 函数，这个函数就是 `require` 或者是 `import` 的替代，我们可以看到在函数体内先定义了这个函数，然后调用了他。这里会传入一个 `moduleId`，这个例子中是0，也就是我们的入口模块 `a.js` 的内容。\n\n我们再看 `__webpack_require__` 内执行了\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    return module.exports；\n    \n\n即从入参的 modules 数组中取第一个函数进行调用，并入参\n\n*   module\n*   module.exports\n*   **webpack\\_require**\n\n我们再看第一个函数（即入口模块）的逻辑（精简）：\n\n    function (module, __webpack_exports__, __webpack_require__) {\n    \n    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c__ = __webpack_require__(1);\n    \n        /* harmony default export */ __webpack_exports__[\"default\"] = ('a.js');\n        console.log(__WEBPACK_IMPORTED_MODULE_0__c__[\"a\" /* default */]);\n    \n      }\n    \n\n我们可以看到入口模块又调用了 `__webpack_require__(1)` 去引用入参数组里的第2个函数。\n\n然后会将入参的 `__webpack_exports__` 对象添加 `default` 属性，并赋值。\n\n这里我们就能看到模块化的实现原理，这里的 `__[webpack_exports](https://www.zhihu.com/search?q=webpack_exports&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)__` 就是这个模块的 `module.exports` 通过对象的引用传参，间接的给 module.exports 添加属性。\n\n最后会将 module.exports return 出来。就完成了 `__webpack_require__` 函数的使命。\n\n比如在入口模块中又调用了 `__webpack_require__(1)`，就会得到这个模块返回的 `module.exports`。\n\n\\*\\*但在这个自执行函数的底部，`webpack` 会将入口模块的输出也进行返回 \\*\\*\n\n    return __webpack_require__(0);\n    \n\n目前这种编译后的js，将入口模块的输出（即 `[module.exports](https://www.zhihu.com/search?q=module.exports&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)`） 进行输出没有任何作用，只会作用于当前作用域。这个js并不能被其他模块继续以 `require` 或 `import` 的方式引用。\n\nbabel 的作用\n---------\n\n按理说 webpack 的模块化方案已经很好的将es6 模块化转换成 webpack 的模块化，但是其余的 es6 语法还需要做兼容性处理。babel 专门用于处理 es6 转换 es5。当然这也包括 es6 的模块语法的转换。\n\n**其实两者的转换思路差不多，区别在于 webpack 的原生转换 可以多做一步静态分析，使用tree-shaking 技术（下面会讲到）**\n\n> babel 能提前将 es6 的 import 等模块关键字转换成 commonjs 的规范。这样 webpack 就无需再做处理，直接使用 webpack 运行时定义的 `__webpack_require__` 处理。\n\n这里就解释了 **问题5**。\n\n> babel 在模块化的场景中充当了什么角色？以及 webpack ？哪个启到了关键作用？\n\n那么 babel 是如何转换 es6 的模块语法呢？\n\n导出模块\n----\n\nes6 的导出模块写法有\n\n    export default 123;\n    \n    export const a = 123;\n    \n    const b = 3;\n    const c = 4;\n    export { b, c };\n    \n\nbabel 会将这些统统转换成 commonjs 的 exports。\n\n    exports.default = 123;\n    exports.a = 123;\n    exports.b = 3;\n    exports.c = 4;\n    exports.__esModule = true;\n    \n\nbabel 转换 es6 的模块输出逻辑非常简单，即将所有输出都赋值给 exports，并带上一个标志 `__esModule`表明这是个由 es6 转换来的 commonjs 输出。\n\nbabel将模块的导出转换为commonjs规范后，也会将引入 import 也转换为 commonjs 规范。即采用 require 去引用模块，再加以一定的处理，符合es6的使用意图。\n\n引入 default\n----------\n\n对于最常见的\n\n    import a from './a.js';\n    \n\n在es6中 import a from './a.js' 的本意是想去引入一个 es6 模块中的 default 输出。\n\n通过babel转换后得到 `var a = require(./a.js)` 得到的对象却是整个对象，肯定不是 es6 语句的本意，所以需要对 a 做些改变。\n\n我们在导出提到，default 输出会赋值给导出对象的default属性。\n\n    exports.default = 123;\n    \n\n所以 babel 加了个 help `_interopRequireDefault` 函数。\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule\n            ? obj\n            : { 'default': obj };\n    }\n    \n    var _a = require('assert');\n    var _a2 = _interopRequireDefault(_a);\n    \n    var a = _a2['default'];\n    \n\n所以这里最后的 a 变量就是 require 的值的 default 属性。如果原先就是commonjs规范的模块，那么就是那个模块的导出对象。\n\n引入 \\* 通配符\n---------\n\n我们使用 `import * as a from './a.js'` es6语法的本意是想将 es6 模块的所有命名输出以及defalut输出打包成一个对象赋值给a变量。\n\n已知以 commonjs 规范导出：\n\n    exports.default = 123;\n    exports.a = 123;\n    exports.b = 3;\n    exports.__esModule = true;\n    \n\n那么对于 es6 转换来的输出通过 `var a = require('./a.js')` 导入这个对象就已经符合意图。\n\n所以直接返回这个对象。\n\n    if (obj && obj.__esModule) {\n       return obj;\n    }\n    \n\n如果本来就是 commonjs 规范的模块，导出时没有default属性，需要添加一个default属性，并把整个模块对象再次赋值给default属性。\n\n    function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        }\n        else {\n            var newObj = {}; // (A)\n            if (obj != null) {\n                for (var key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key))\n                        newObj[key] = obj[key];\n                }\n            }\n            newObj.default = obj;\n            return newObj;\n        }\n    }\n    \n\nimport { a } from './a.js'\n--------------------------\n\n直接转换成 `require('./a.js').a` 即可。\n\n总结\n--\n\n经过上面的转换分析，我们得知即使我们使用了 es6 的模块系统，如果借助 babel 的转换，es6 的模块系统最终还是会转换成 commonjs 的规范。所以我们如果是使用 babel 转换 es6 模块，混合使用 es6 的模块和 commonjs 的规范是没有问题的，因为最终都会转换成 commonjs。\n\n**这里解释了问题3**\n\n> 为什么可以使用 es6 的 import 去引用 commonjs 规范定义的模块，或者反过来也可以又是为什么？\n\nbabel5 & babel6\n---------------\n\n我们在上文 babel 对导出模块的转换提到，es6 的 `[export default](https://www.zhihu.com/search?q=export+default&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)` 都会被转换成 `exports.default`，即使这个模块只有这一个输出。\n\n**这也解释了问题1**\n\n> 为何有的地方使用 `require` 去引用一个模块时需要加上 `default`？ `require('xx').default`\n\n我们经常会使用 es6 的 export default 来输出模块，而且这个输出是这个模块的唯一输出，我们会误以为这种写法输出的是模块的默认输出。\n\n    // a.js\n    \n    export default 123;\n    \n    // b.js 错误\n    \n    var foo = require('./a.js')\n    \n\n在使用 `require` 进行引用时，我们也会误以为引入的是a文件的默认输出。\n\n结果这里需要改成 `var foo = require('./a.js').default`\n\n这个场景在写 webpack 代码分割逻辑时经常会遇到。\n\n    require.ensure([], (require) => {\n       callback(null, [\n         require('./src/pages/profitList').default,\n       ]);\n     });\n    \n\n这是 babel6 的变更，在 babel5 的时候可不是这样的。\n\n  \n\n![](https://pic1.zhimg.com/v2-32ff28dae9821709159c1a71a0009840_r.jpg)\n\n  \n\n[http://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/#strict](https://link.zhihu.com/?target=http%3A//babeljs.io/docs/plugins/transform-es2015-modules-commonjs/%23strict)\n\n在 babel5 时代，大部分人在用 require 去引用 es6 输出的 default，只是把 default 输出看作是一个模块的默认输出，所以 babel5 对这个逻辑做了 hack，如果一个 es6 模块只有一个 default 输出，那么在转换成 commonjs 的时候也一起赋值给 `module.exports`，即整个导出对象被赋值了 default 所对应的值。\n\n这样就不需要加 default，`require('./a.js')` 的值就是想要的 default值。\n\n但这样做是不符合 es6 的定义的，在es6 的定义里，default 只是个名字，没有任何意义。\n\n    export default = 123;\n    export const a = 123;\n    \n\n这两者含义是一样的，分别为输出名为 default 和 a 的变量。\n\n还有一个很重要的问题，一旦 a.js 文件里又添加了一个具名的输出，那么引入方就会出麻烦。\n\n    // a.js\n    \n    export default 123;\n    \n    export const a = 123; // 新增\n    \n    // b.js \n    \n    var foo = require('./a.js');\n    \n    // 由之前的 输出 123\n    // 变成 { default: 123, a: 123 }\n    \n\n所以 babel6 去掉了这个hack，这是个正确的决定，升级 babel6 后产生的不兼容问题 可以通过引入 [babel-plugin-add-module-exports](https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/babel-plugin-add-module-exports) 解决。\n\nwebpack 编译后的js，如何再被其他模块引用\n-------------------------\n\n通过 webpack 模块化原理章节给出的 webpack 配置编译后的 js 是无法被其他模块引用的，webpack 提供了 `output.libraryTarget` 配置指定构建完的 js 的用途。\n\n默认 var\n------\n\n如果指定了 `output.library = 'test'`  \n入口模块返回的 module.exports 暴露给全局 var test = returned\\_module\\_exports\n\ncommonjs\n--------\n\n如果library: 'spon-ui' 入口模块返回的 module.exports 赋值给 exports\\['spon-ui'\\]\n\ncommonjs2\n---------\n\n入口模块返回的 module.exports 赋值给 module.exports\n\n所以 element-ui 的构建方式采用 commonjs2 ，导出的组件的js 最后都会赋值给 module.exports，供其他模块引用。\n\n  \n\n![](https://pic2.zhimg.com/v2-887230493670c8bc8950998e6a32d521_r.jpg)\n\n  \n\n**这里解释了问题4**\n\n> 我们在浏览一些 npm 下载下来的 UI 组件模块时（比如说 element-ui 的 lib 文件下），看到的都是 webpack 编译好的 js 文件，可以使用 import 或 require 再去引用。但是我们平时编译好的 js 是无法再被其他模块 import 的，这是为什么？\n\n模块依赖的优化\n-------\n\n按需加载的原理\n-------\n\n我们在使用各大 UI 组件库时都会被介绍到为了避免引入全部文件，请使用 `babel-plugin-component` 等babel 插件。\n\n    import { Button, Select } from 'element-ui'\n    \n\n由前文可知 import 会先转换为 commonjs， 即\n\n    var a = require('element-ui');\n    var Button = a.Button;\n    var Select = a.Select;\n    \n\n`var a = require('element-ui');` 这个过程就会将所有组件都引入进来了。\n\n所以 `babel-plugin-component`就做了一件事，将 `import { Button, Select } from 'element-ui'` 转换成了\n\n    import Button from 'element-ui/lib/button'\n    import Select from 'element-ui/lib/select'\n    \n\n即使转换成了 commonjs 规范，也只是引入自己这个组件的js，将引入量减少到最低。\n\n所以我们会看到几乎所有的UI组件库的目录形式都是\n\n    |-lib\n    ||--component1\n    ||--component2\n    ||--component3\n    |-index.common.js\n    \n\n`index.common.js` 给 `import element from 'element-ui'` 这种形式调用全部组件。\n\nlib 下的各组件用于按需引用。\n\n**这里解释了问题2**\n\n> 经常在各大UI组件引用的文档上会看到说明 `import { button } from 'xx-ui'` 这样会引入所有组件内容，需要添加额外的 babel 配置，比如 `babel-plugin-component`？\n\ntree-shaking\n------------\n\nwebpack2 开始引入 tree-shaking 技术，通过静态分析 es6 的语法，可以删除没有被使用的模块。他只对 es6 的模块有效，所以一旦 babel 将 es6 的模块转换成 commonjs，webpack2 将无法使用这项优化。所以要使用这项技术，我们只能使用 webpack 的模块处理，加上 babel 的es6转换能力（需要关闭模块转换）。\n\n最方便的使用方法为修改babel的配置。\n\n    use: {\n         loader: 'babel-loader',\n         options: {\n           presets: [['babel-preset-es2015', {modules: false}]],\n         }\n       }\n    \n\n修改最开始demo\n\n    // webpack\n    \n    const path = require('path');\n    \n    module.exports = {\n      entry: './a.js',\n      output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'bundle.js',\n      },\n      module: {\n        rules: [\n          {\n            test: /\\.js$/,\n            exclude: /(node_modules|bower_components)/,\n            use: {\n              loader: 'babel-loader',\n              options: {\n                presets: [['babel-preset-es2015', {modules: false}]],\n              }\n            }\n          }\n        ]\n      }\n    };\n    // a.js\n    import a from './c';\n    \n    export default 'a.js';\n    console.log(a);\n    // c.js\n    \n    export default 333;\n    \n    const foo = 123;\n    export { foo };\n\n修改的点在于增加了babel，并关闭其modules功能。然后在 c.js 中增加一个输出 `export { foo }`，但是 a.js 中并不引用它。\n\n最后在编译出的 js 中，c.js 模块如下:\n\n    \"use strict\";\n    /* unused harmony export foo */\n    /* harmony default export */ __webpack_exports__[\"a\"] = (333);\n    \n    var foo = 123;\n    \n\n[foo 变量](https://www.zhihu.com/search?q=foo+%E5%8F%98%E9%87%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)被标记为没有使用，在最后压缩时这段会被删除。\n\n需要说明的是，即使在 引入模块时使用了 es6 ，但是引入的那个模块却是使用 commonjs 进行输出，这也无法使用tree-shaking。\n\n而第三方库大多是遵循 commonjs 规范的，这也造成了引入第三方库无法减少不必要的引入。\n\n所以对于未来来说第三方库要同时发布 commonjs 格式和 es6 格式的模块。es6 模块的入口由 package.json 的字段 module 指定。而 commonjs 则还是在 main 字段指定。\n\n**这里解释了问题6**\n\n> 听说 es6 还有 `tree-shaking` 功能，怎么才能使用这个功能？","source":"_posts/import、require、export、module-exports-混合详解.md","raw":"---\ntitle: import、require、export、module.exports 混合详解\ndate: 2021-12-09 17:20:56\ntags:\n---\n\nimport、require、export、module.exports 混合使用详解\n-------------------------------------------\n\n前言\n--\n\n自从使用了 es6 的模块系统后，各种地方愉快地使用 `import` `export default`，但也会在老项目中看到使用commonjs规范的 `require` `module.exports`。甚至有时候也会常常看到两者互用的场景。使用没有问题，但其中的关联与区别不得其解，使用起来也糊里糊涂。比如：\n\n1.  为何有的地方使用 `require` 去引用一个模块时需要加上 `default`？ `require('xx').default`\n2.  经常在各大UI组件引用的文档上会看到说明 `import { button } from 'xx-ui'` 这样会引入所有组件内容，需要添加额外的 babel 配置，比如 `[babel-plugin-component](https://www.zhihu.com/search?q=babel-plugin-component&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)`？\n3.  为什么可以使用 es6 的 import 去引用 commonjs 规范定义的模块，或者反过来也可以又是为什么？\n4.  我们在浏览一些 npm 下载下来的 UI 组件模块时（比如说 [element-ui](https://www.zhihu.com/search?q=element-ui&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D) 的 lib 文件下），看到的都是 webpack 编译好的 js 文件，可以使用 import 或 require 再去引用。但是我们平时编译好的 js 是无法再被其他模块 import 的，这是为什么？\n5.  babel 在模块化的场景中充当了什么角色？以及 webpack ？哪个启到了关键作用？\n6.  听说 es6 还有 `[tree-shaking](https://www.zhihu.com/search?q=tree-shaking&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)` 功能，怎么才能使用这个功能？\n\n如果你对这些问题都了然于心，那么可以关掉本文了，如果有疑问，这篇文章就是为你准备的！\n\nwebpack 与 babel 在模块化中的作用\n------------------------\n\nwebpack 模块化的原理\n--------------\n\nwebpack 本身维护了一套模块系统，这套模块系统兼容了所有前端历史进程下的模块规范，包括 `amdcommonjs` `es6` 等，本文主要针对 `commonjs es6` 规范进行说明。模块化的实现其实就在最后编译的文件内。\n\n我编写了一个 demo 更好的展示效果。\n\n    // webpack\n    \n    const path = require('path');\n    \n    module.exports = {\n      entry: './a.js',\n      output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'bundle.js',\n      }\n    };\n    // a.js\n    import a from './c';\n    \n    export default 'a.js';\n    console.log(a);\n    // c.js\n    \n    export default 333;\n    (function(modules) {\n    \n      \n      function __webpack_require__(moduleId) {\n        var module =  {\n          i: moduleId,\n          l: false,\n          exports: {}\n        };\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        return module.exports;\n      }\n    \n      return __webpack_require__(0);\n    })([\n      (function (module, __webpack_exports__, __webpack_require__) {\n    \n        // 引用 模块 1\n        \"use strict\";\n        Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c__ = __webpack_require__(1);\n    \n    /* harmony default export */ __webpack_exports__[\"default\"] = ('a.js');\n    console.log(__WEBPACK_IMPORTED_MODULE_0__c__[\"a\" /* default */]);\n    \n      }),\n      (function (module, __webpack_exports__, __webpack_require__) {\n    \n        // 输出本模块的数据\n        \"use strict\";\n        /* harmony default export */ __webpack_exports__[\"a\"] = (333);\n      })\n    ]);\n    \n    \n\n上面这段 js 就是使用 webpack 编译后的代码（经过精简），其中就包含了 webpack的运行时代码，其中就是关于模块的实现。\n\n我们再精简下代码，会发现这是个自执行函数。\n\n    (function(modules) {\n    \n    })([]);\n    \n    \n\n自执行函数的入参是个数组，这个数组包含了所有的模块，包裹在函数中。\n\n自执行函数体里的逻辑就是处理模块的逻辑。关键在于 `__webpack_require__` 函数，这个函数就是 `require` 或者是 `import` 的替代，我们可以看到在函数体内先定义了这个函数，然后调用了他。这里会传入一个 `moduleId`，这个例子中是0，也就是我们的入口模块 `a.js` 的内容。\n\n我们再看 `__webpack_require__` 内执行了\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    return module.exports；\n    \n\n即从入参的 modules 数组中取第一个函数进行调用，并入参\n\n*   module\n*   module.exports\n*   **webpack\\_require**\n\n我们再看第一个函数（即入口模块）的逻辑（精简）：\n\n    function (module, __webpack_exports__, __webpack_require__) {\n    \n    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c__ = __webpack_require__(1);\n    \n        /* harmony default export */ __webpack_exports__[\"default\"] = ('a.js');\n        console.log(__WEBPACK_IMPORTED_MODULE_0__c__[\"a\" /* default */]);\n    \n      }\n    \n\n我们可以看到入口模块又调用了 `__webpack_require__(1)` 去引用入参数组里的第2个函数。\n\n然后会将入参的 `__webpack_exports__` 对象添加 `default` 属性，并赋值。\n\n这里我们就能看到模块化的实现原理，这里的 `__[webpack_exports](https://www.zhihu.com/search?q=webpack_exports&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)__` 就是这个模块的 `module.exports` 通过对象的引用传参，间接的给 module.exports 添加属性。\n\n最后会将 module.exports return 出来。就完成了 `__webpack_require__` 函数的使命。\n\n比如在入口模块中又调用了 `__webpack_require__(1)`，就会得到这个模块返回的 `module.exports`。\n\n\\*\\*但在这个自执行函数的底部，`webpack` 会将入口模块的输出也进行返回 \\*\\*\n\n    return __webpack_require__(0);\n    \n\n目前这种编译后的js，将入口模块的输出（即 `[module.exports](https://www.zhihu.com/search?q=module.exports&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)`） 进行输出没有任何作用，只会作用于当前作用域。这个js并不能被其他模块继续以 `require` 或 `import` 的方式引用。\n\nbabel 的作用\n---------\n\n按理说 webpack 的模块化方案已经很好的将es6 模块化转换成 webpack 的模块化，但是其余的 es6 语法还需要做兼容性处理。babel 专门用于处理 es6 转换 es5。当然这也包括 es6 的模块语法的转换。\n\n**其实两者的转换思路差不多，区别在于 webpack 的原生转换 可以多做一步静态分析，使用tree-shaking 技术（下面会讲到）**\n\n> babel 能提前将 es6 的 import 等模块关键字转换成 commonjs 的规范。这样 webpack 就无需再做处理，直接使用 webpack 运行时定义的 `__webpack_require__` 处理。\n\n这里就解释了 **问题5**。\n\n> babel 在模块化的场景中充当了什么角色？以及 webpack ？哪个启到了关键作用？\n\n那么 babel 是如何转换 es6 的模块语法呢？\n\n导出模块\n----\n\nes6 的导出模块写法有\n\n    export default 123;\n    \n    export const a = 123;\n    \n    const b = 3;\n    const c = 4;\n    export { b, c };\n    \n\nbabel 会将这些统统转换成 commonjs 的 exports。\n\n    exports.default = 123;\n    exports.a = 123;\n    exports.b = 3;\n    exports.c = 4;\n    exports.__esModule = true;\n    \n\nbabel 转换 es6 的模块输出逻辑非常简单，即将所有输出都赋值给 exports，并带上一个标志 `__esModule`表明这是个由 es6 转换来的 commonjs 输出。\n\nbabel将模块的导出转换为commonjs规范后，也会将引入 import 也转换为 commonjs 规范。即采用 require 去引用模块，再加以一定的处理，符合es6的使用意图。\n\n引入 default\n----------\n\n对于最常见的\n\n    import a from './a.js';\n    \n\n在es6中 import a from './a.js' 的本意是想去引入一个 es6 模块中的 default 输出。\n\n通过babel转换后得到 `var a = require(./a.js)` 得到的对象却是整个对象，肯定不是 es6 语句的本意，所以需要对 a 做些改变。\n\n我们在导出提到，default 输出会赋值给导出对象的default属性。\n\n    exports.default = 123;\n    \n\n所以 babel 加了个 help `_interopRequireDefault` 函数。\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule\n            ? obj\n            : { 'default': obj };\n    }\n    \n    var _a = require('assert');\n    var _a2 = _interopRequireDefault(_a);\n    \n    var a = _a2['default'];\n    \n\n所以这里最后的 a 变量就是 require 的值的 default 属性。如果原先就是commonjs规范的模块，那么就是那个模块的导出对象。\n\n引入 \\* 通配符\n---------\n\n我们使用 `import * as a from './a.js'` es6语法的本意是想将 es6 模块的所有命名输出以及defalut输出打包成一个对象赋值给a变量。\n\n已知以 commonjs 规范导出：\n\n    exports.default = 123;\n    exports.a = 123;\n    exports.b = 3;\n    exports.__esModule = true;\n    \n\n那么对于 es6 转换来的输出通过 `var a = require('./a.js')` 导入这个对象就已经符合意图。\n\n所以直接返回这个对象。\n\n    if (obj && obj.__esModule) {\n       return obj;\n    }\n    \n\n如果本来就是 commonjs 规范的模块，导出时没有default属性，需要添加一个default属性，并把整个模块对象再次赋值给default属性。\n\n    function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        }\n        else {\n            var newObj = {}; // (A)\n            if (obj != null) {\n                for (var key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key))\n                        newObj[key] = obj[key];\n                }\n            }\n            newObj.default = obj;\n            return newObj;\n        }\n    }\n    \n\nimport { a } from './a.js'\n--------------------------\n\n直接转换成 `require('./a.js').a` 即可。\n\n总结\n--\n\n经过上面的转换分析，我们得知即使我们使用了 es6 的模块系统，如果借助 babel 的转换，es6 的模块系统最终还是会转换成 commonjs 的规范。所以我们如果是使用 babel 转换 es6 模块，混合使用 es6 的模块和 commonjs 的规范是没有问题的，因为最终都会转换成 commonjs。\n\n**这里解释了问题3**\n\n> 为什么可以使用 es6 的 import 去引用 commonjs 规范定义的模块，或者反过来也可以又是为什么？\n\nbabel5 & babel6\n---------------\n\n我们在上文 babel 对导出模块的转换提到，es6 的 `[export default](https://www.zhihu.com/search?q=export+default&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)` 都会被转换成 `exports.default`，即使这个模块只有这一个输出。\n\n**这也解释了问题1**\n\n> 为何有的地方使用 `require` 去引用一个模块时需要加上 `default`？ `require('xx').default`\n\n我们经常会使用 es6 的 export default 来输出模块，而且这个输出是这个模块的唯一输出，我们会误以为这种写法输出的是模块的默认输出。\n\n    // a.js\n    \n    export default 123;\n    \n    // b.js 错误\n    \n    var foo = require('./a.js')\n    \n\n在使用 `require` 进行引用时，我们也会误以为引入的是a文件的默认输出。\n\n结果这里需要改成 `var foo = require('./a.js').default`\n\n这个场景在写 webpack 代码分割逻辑时经常会遇到。\n\n    require.ensure([], (require) => {\n       callback(null, [\n         require('./src/pages/profitList').default,\n       ]);\n     });\n    \n\n这是 babel6 的变更，在 babel5 的时候可不是这样的。\n\n  \n\n![](https://pic1.zhimg.com/v2-32ff28dae9821709159c1a71a0009840_r.jpg)\n\n  \n\n[http://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/#strict](https://link.zhihu.com/?target=http%3A//babeljs.io/docs/plugins/transform-es2015-modules-commonjs/%23strict)\n\n在 babel5 时代，大部分人在用 require 去引用 es6 输出的 default，只是把 default 输出看作是一个模块的默认输出，所以 babel5 对这个逻辑做了 hack，如果一个 es6 模块只有一个 default 输出，那么在转换成 commonjs 的时候也一起赋值给 `module.exports`，即整个导出对象被赋值了 default 所对应的值。\n\n这样就不需要加 default，`require('./a.js')` 的值就是想要的 default值。\n\n但这样做是不符合 es6 的定义的，在es6 的定义里，default 只是个名字，没有任何意义。\n\n    export default = 123;\n    export const a = 123;\n    \n\n这两者含义是一样的，分别为输出名为 default 和 a 的变量。\n\n还有一个很重要的问题，一旦 a.js 文件里又添加了一个具名的输出，那么引入方就会出麻烦。\n\n    // a.js\n    \n    export default 123;\n    \n    export const a = 123; // 新增\n    \n    // b.js \n    \n    var foo = require('./a.js');\n    \n    // 由之前的 输出 123\n    // 变成 { default: 123, a: 123 }\n    \n\n所以 babel6 去掉了这个hack，这是个正确的决定，升级 babel6 后产生的不兼容问题 可以通过引入 [babel-plugin-add-module-exports](https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/babel-plugin-add-module-exports) 解决。\n\nwebpack 编译后的js，如何再被其他模块引用\n-------------------------\n\n通过 webpack 模块化原理章节给出的 webpack 配置编译后的 js 是无法被其他模块引用的，webpack 提供了 `output.libraryTarget` 配置指定构建完的 js 的用途。\n\n默认 var\n------\n\n如果指定了 `output.library = 'test'`  \n入口模块返回的 module.exports 暴露给全局 var test = returned\\_module\\_exports\n\ncommonjs\n--------\n\n如果library: 'spon-ui' 入口模块返回的 module.exports 赋值给 exports\\['spon-ui'\\]\n\ncommonjs2\n---------\n\n入口模块返回的 module.exports 赋值给 module.exports\n\n所以 element-ui 的构建方式采用 commonjs2 ，导出的组件的js 最后都会赋值给 module.exports，供其他模块引用。\n\n  \n\n![](https://pic2.zhimg.com/v2-887230493670c8bc8950998e6a32d521_r.jpg)\n\n  \n\n**这里解释了问题4**\n\n> 我们在浏览一些 npm 下载下来的 UI 组件模块时（比如说 element-ui 的 lib 文件下），看到的都是 webpack 编译好的 js 文件，可以使用 import 或 require 再去引用。但是我们平时编译好的 js 是无法再被其他模块 import 的，这是为什么？\n\n模块依赖的优化\n-------\n\n按需加载的原理\n-------\n\n我们在使用各大 UI 组件库时都会被介绍到为了避免引入全部文件，请使用 `babel-plugin-component` 等babel 插件。\n\n    import { Button, Select } from 'element-ui'\n    \n\n由前文可知 import 会先转换为 commonjs， 即\n\n    var a = require('element-ui');\n    var Button = a.Button;\n    var Select = a.Select;\n    \n\n`var a = require('element-ui');` 这个过程就会将所有组件都引入进来了。\n\n所以 `babel-plugin-component`就做了一件事，将 `import { Button, Select } from 'element-ui'` 转换成了\n\n    import Button from 'element-ui/lib/button'\n    import Select from 'element-ui/lib/select'\n    \n\n即使转换成了 commonjs 规范，也只是引入自己这个组件的js，将引入量减少到最低。\n\n所以我们会看到几乎所有的UI组件库的目录形式都是\n\n    |-lib\n    ||--component1\n    ||--component2\n    ||--component3\n    |-index.common.js\n    \n\n`index.common.js` 给 `import element from 'element-ui'` 这种形式调用全部组件。\n\nlib 下的各组件用于按需引用。\n\n**这里解释了问题2**\n\n> 经常在各大UI组件引用的文档上会看到说明 `import { button } from 'xx-ui'` 这样会引入所有组件内容，需要添加额外的 babel 配置，比如 `babel-plugin-component`？\n\ntree-shaking\n------------\n\nwebpack2 开始引入 tree-shaking 技术，通过静态分析 es6 的语法，可以删除没有被使用的模块。他只对 es6 的模块有效，所以一旦 babel 将 es6 的模块转换成 commonjs，webpack2 将无法使用这项优化。所以要使用这项技术，我们只能使用 webpack 的模块处理，加上 babel 的es6转换能力（需要关闭模块转换）。\n\n最方便的使用方法为修改babel的配置。\n\n    use: {\n         loader: 'babel-loader',\n         options: {\n           presets: [['babel-preset-es2015', {modules: false}]],\n         }\n       }\n    \n\n修改最开始demo\n\n    // webpack\n    \n    const path = require('path');\n    \n    module.exports = {\n      entry: './a.js',\n      output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'bundle.js',\n      },\n      module: {\n        rules: [\n          {\n            test: /\\.js$/,\n            exclude: /(node_modules|bower_components)/,\n            use: {\n              loader: 'babel-loader',\n              options: {\n                presets: [['babel-preset-es2015', {modules: false}]],\n              }\n            }\n          }\n        ]\n      }\n    };\n    // a.js\n    import a from './c';\n    \n    export default 'a.js';\n    console.log(a);\n    // c.js\n    \n    export default 333;\n    \n    const foo = 123;\n    export { foo };\n\n修改的点在于增加了babel，并关闭其modules功能。然后在 c.js 中增加一个输出 `export { foo }`，但是 a.js 中并不引用它。\n\n最后在编译出的 js 中，c.js 模块如下:\n\n    \"use strict\";\n    /* unused harmony export foo */\n    /* harmony default export */ __webpack_exports__[\"a\"] = (333);\n    \n    var foo = 123;\n    \n\n[foo 变量](https://www.zhihu.com/search?q=foo+%E5%8F%98%E9%87%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)被标记为没有使用，在最后压缩时这段会被删除。\n\n需要说明的是，即使在 引入模块时使用了 es6 ，但是引入的那个模块却是使用 commonjs 进行输出，这也无法使用tree-shaking。\n\n而第三方库大多是遵循 commonjs 规范的，这也造成了引入第三方库无法减少不必要的引入。\n\n所以对于未来来说第三方库要同时发布 commonjs 格式和 es6 格式的模块。es6 模块的入口由 package.json 的字段 module 指定。而 commonjs 则还是在 main 字段指定。\n\n**这里解释了问题6**\n\n> 听说 es6 还有 `tree-shaking` 功能，怎么才能使用这个功能？","slug":"import、require、export、module-exports-混合详解","published":1,"updated":"2021-12-10T01:50:50.173Z","_id":"ckwzqfe5h0000h5o1dm7q5gjz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"import、require、export、module-exports-混合使用详解\"><a href=\"#import、require、export、module-exports-混合使用详解\" class=\"headerlink\" title=\"import、require、export、module.exports 混合使用详解\"></a>import、require、export、module.exports 混合使用详解</h2><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>自从使用了 es6 的模块系统后，各种地方愉快地使用 <code>import</code> <code>export default</code>，但也会在老项目中看到使用commonjs规范的 <code>require</code> <code>module.exports</code>。甚至有时候也会常常看到两者互用的场景。使用没有问题，但其中的关联与区别不得其解，使用起来也糊里糊涂。比如：</p>\n<ol>\n<li> 为何有的地方使用 <code>require</code> 去引用一个模块时需要加上 <code>default</code>？ <code>require(&#39;xx&#39;).default</code></li>\n<li> 经常在各大UI组件引用的文档上会看到说明 <code>import &#123; button &#125; from &#39;xx-ui&#39;</code> 这样会引入所有组件内容，需要添加额外的 babel 配置，比如 <code>[babel-plugin-component](https://www.zhihu.com/search?q=babel-plugin-component&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)</code>？</li>\n<li> 为什么可以使用 es6 的 import 去引用 commonjs 规范定义的模块，或者反过来也可以又是为什么？</li>\n<li> 我们在浏览一些 npm 下载下来的 UI 组件模块时（比如说 <a href=\"https://www.zhihu.com/search?q=element-ui&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:31929490%7D\">element-ui</a> 的 lib 文件下），看到的都是 webpack 编译好的 js 文件，可以使用 import 或 require 再去引用。但是我们平时编译好的 js 是无法再被其他模块 import 的，这是为什么？</li>\n<li> babel 在模块化的场景中充当了什么角色？以及 webpack ？哪个启到了关键作用？</li>\n<li> 听说 es6 还有 <code>[tree-shaking](https://www.zhihu.com/search?q=tree-shaking&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)</code> 功能，怎么才能使用这个功能？</li>\n</ol>\n<p>如果你对这些问题都了然于心，那么可以关掉本文了，如果有疑问，这篇文章就是为你准备的！</p>\n<h2 id=\"webpack-与-babel-在模块化中的作用\"><a href=\"#webpack-与-babel-在模块化中的作用\" class=\"headerlink\" title=\"webpack 与 babel 在模块化中的作用\"></a>webpack 与 babel 在模块化中的作用</h2><h2 id=\"webpack-模块化的原理\"><a href=\"#webpack-模块化的原理\" class=\"headerlink\" title=\"webpack 模块化的原理\"></a>webpack 模块化的原理</h2><p>webpack 本身维护了一套模块系统，这套模块系统兼容了所有前端历史进程下的模块规范，包括 <code>amdcommonjs</code> <code>es6</code> 等，本文主要针对 <code>commonjs es6</code> 规范进行说明。模块化的实现其实就在最后编译的文件内。</p>\n<p>我编写了一个 demo 更好的展示效果。</p>\n<pre><code>// webpack\n\nconst path = require(&#39;path&#39;);\n\nmodule.exports = &#123;\n  entry: &#39;./a.js&#39;,\n  output: &#123;\n    path: path.resolve(__dirname, &#39;dist&#39;),\n    filename: &#39;bundle.js&#39;,\n  &#125;\n&#125;;\n// a.js\nimport a from &#39;./c&#39;;\n\nexport default &#39;a.js&#39;;\nconsole.log(a);\n// c.js\n\nexport default 333;\n(function(modules) &#123;\n\n  \n  function __webpack_require__(moduleId) &#123;\n    var module =  &#123;\n      i: moduleId,\n      l: false,\n      exports: &#123;&#125;\n    &#125;;\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    return module.exports;\n  &#125;\n\n  return __webpack_require__(0);\n&#125;)([\n  (function (module, __webpack_exports__, __webpack_require__) &#123;\n\n    // 引用 模块 1\n    &quot;use strict&quot;;\n    Object.defineProperty(__webpack_exports__, &quot;__esModule&quot;, &#123; value: true &#125;);\n    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c__ = __webpack_require__(1);\n\n/* harmony default export */ __webpack_exports__[&quot;default&quot;] = (&#39;a.js&#39;);\nconsole.log(__WEBPACK_IMPORTED_MODULE_0__c__[&quot;a&quot; /* default */]);\n\n  &#125;),\n  (function (module, __webpack_exports__, __webpack_require__) &#123;\n\n    // 输出本模块的数据\n    &quot;use strict&quot;;\n    /* harmony default export */ __webpack_exports__[&quot;a&quot;] = (333);\n  &#125;)\n]);\n</code></pre>\n<p>上面这段 js 就是使用 webpack 编译后的代码（经过精简），其中就包含了 webpack的运行时代码，其中就是关于模块的实现。</p>\n<p>我们再精简下代码，会发现这是个自执行函数。</p>\n<pre><code>(function(modules) &#123;\n\n&#125;)([]);\n</code></pre>\n<p>自执行函数的入参是个数组，这个数组包含了所有的模块，包裹在函数中。</p>\n<p>自执行函数体里的逻辑就是处理模块的逻辑。关键在于 <code>__webpack_require__</code> 函数，这个函数就是 <code>require</code> 或者是 <code>import</code> 的替代，我们可以看到在函数体内先定义了这个函数，然后调用了他。这里会传入一个 <code>moduleId</code>，这个例子中是0，也就是我们的入口模块 <code>a.js</code> 的内容。</p>\n<p>我们再看 <code>__webpack_require__</code> 内执行了</p>\n<pre><code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\nreturn module.exports；\n</code></pre>\n<p>即从入参的 modules 数组中取第一个函数进行调用，并入参</p>\n<ul>\n<li>  module</li>\n<li>  module.exports</li>\n<li>  <strong>webpack_require</strong></li>\n</ul>\n<p>我们再看第一个函数（即入口模块）的逻辑（精简）：</p>\n<pre><code>function (module, __webpack_exports__, __webpack_require__) &#123;\n\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c__ = __webpack_require__(1);\n\n    /* harmony default export */ __webpack_exports__[&quot;default&quot;] = (&#39;a.js&#39;);\n    console.log(__WEBPACK_IMPORTED_MODULE_0__c__[&quot;a&quot; /* default */]);\n\n  &#125;\n</code></pre>\n<p>我们可以看到入口模块又调用了 <code>__webpack_require__(1)</code> 去引用入参数组里的第2个函数。</p>\n<p>然后会将入参的 <code>__webpack_exports__</code> 对象添加 <code>default</code> 属性，并赋值。</p>\n<p>这里我们就能看到模块化的实现原理，这里的 <code>__[webpack_exports](https://www.zhihu.com/search?q=webpack_exports&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)__</code> 就是这个模块的 <code>module.exports</code> 通过对象的引用传参，间接的给 module.exports 添加属性。</p>\n<p>最后会将 module.exports return 出来。就完成了 <code>__webpack_require__</code> 函数的使命。</p>\n<p>比如在入口模块中又调用了 <code>__webpack_require__(1)</code>，就会得到这个模块返回的 <code>module.exports</code>。</p>\n<p>**但在这个自执行函数的底部，<code>webpack</code> 会将入口模块的输出也进行返回 **</p>\n<pre><code>return __webpack_require__(0);\n</code></pre>\n<p>目前这种编译后的js，将入口模块的输出（即 <code>[module.exports](https://www.zhihu.com/search?q=module.exports&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)</code>） 进行输出没有任何作用，只会作用于当前作用域。这个js并不能被其他模块继续以 <code>require</code> 或 <code>import</code> 的方式引用。</p>\n<h2 id=\"babel-的作用\"><a href=\"#babel-的作用\" class=\"headerlink\" title=\"babel 的作用\"></a>babel 的作用</h2><p>按理说 webpack 的模块化方案已经很好的将es6 模块化转换成 webpack 的模块化，但是其余的 es6 语法还需要做兼容性处理。babel 专门用于处理 es6 转换 es5。当然这也包括 es6 的模块语法的转换。</p>\n<p><strong>其实两者的转换思路差不多，区别在于 webpack 的原生转换 可以多做一步静态分析，使用tree-shaking 技术（下面会讲到）</strong></p>\n<blockquote>\n<p>babel 能提前将 es6 的 import 等模块关键字转换成 commonjs 的规范。这样 webpack 就无需再做处理，直接使用 webpack 运行时定义的 <code>__webpack_require__</code> 处理。</p>\n</blockquote>\n<p>这里就解释了 <strong>问题5</strong>。</p>\n<blockquote>\n<p>babel 在模块化的场景中充当了什么角色？以及 webpack ？哪个启到了关键作用？</p>\n</blockquote>\n<p>那么 babel 是如何转换 es6 的模块语法呢？</p>\n<h2 id=\"导出模块\"><a href=\"#导出模块\" class=\"headerlink\" title=\"导出模块\"></a>导出模块</h2><p>es6 的导出模块写法有</p>\n<pre><code>export default 123;\n\nexport const a = 123;\n\nconst b = 3;\nconst c = 4;\nexport &#123; b, c &#125;;\n</code></pre>\n<p>babel 会将这些统统转换成 commonjs 的 exports。</p>\n<pre><code>exports.default = 123;\nexports.a = 123;\nexports.b = 3;\nexports.c = 4;\nexports.__esModule = true;\n</code></pre>\n<p>babel 转换 es6 的模块输出逻辑非常简单，即将所有输出都赋值给 exports，并带上一个标志 <code>__esModule</code>表明这是个由 es6 转换来的 commonjs 输出。</p>\n<p>babel将模块的导出转换为commonjs规范后，也会将引入 import 也转换为 commonjs 规范。即采用 require 去引用模块，再加以一定的处理，符合es6的使用意图。</p>\n<h2 id=\"引入-default\"><a href=\"#引入-default\" class=\"headerlink\" title=\"引入 default\"></a>引入 default</h2><p>对于最常见的</p>\n<pre><code>import a from &#39;./a.js&#39;;\n</code></pre>\n<p>在es6中 import a from ‘./a.js’ 的本意是想去引入一个 es6 模块中的 default 输出。</p>\n<p>通过babel转换后得到 <code>var a = require(./a.js)</code> 得到的对象却是整个对象，肯定不是 es6 语句的本意，所以需要对 a 做些改变。</p>\n<p>我们在导出提到，default 输出会赋值给导出对象的default属性。</p>\n<pre><code>exports.default = 123;\n</code></pre>\n<p>所以 babel 加了个 help <code>_interopRequireDefault</code> 函数。</p>\n<pre><code>function _interopRequireDefault(obj) &#123;\n    return obj &amp;&amp; obj.__esModule\n        ? obj\n        : &#123; &#39;default&#39;: obj &#125;;\n&#125;\n\nvar _a = require(&#39;assert&#39;);\nvar _a2 = _interopRequireDefault(_a);\n\nvar a = _a2[&#39;default&#39;];\n</code></pre>\n<p>所以这里最后的 a 变量就是 require 的值的 default 属性。如果原先就是commonjs规范的模块，那么就是那个模块的导出对象。</p>\n<h2 id=\"引入-通配符\"><a href=\"#引入-通配符\" class=\"headerlink\" title=\"引入 * 通配符\"></a>引入 * 通配符</h2><p>我们使用 <code>import * as a from &#39;./a.js&#39;</code> es6语法的本意是想将 es6 模块的所有命名输出以及defalut输出打包成一个对象赋值给a变量。</p>\n<p>已知以 commonjs 规范导出：</p>\n<pre><code>exports.default = 123;\nexports.a = 123;\nexports.b = 3;\nexports.__esModule = true;\n</code></pre>\n<p>那么对于 es6 转换来的输出通过 <code>var a = require(&#39;./a.js&#39;)</code> 导入这个对象就已经符合意图。</p>\n<p>所以直接返回这个对象。</p>\n<pre><code>if (obj &amp;&amp; obj.__esModule) &#123;\n   return obj;\n&#125;\n</code></pre>\n<p>如果本来就是 commonjs 规范的模块，导出时没有default属性，需要添加一个default属性，并把整个模块对象再次赋值给default属性。</p>\n<pre><code>function _interopRequireWildcard(obj) &#123;\n    if (obj &amp;&amp; obj.__esModule) &#123;\n        return obj;\n    &#125;\n    else &#123;\n        var newObj = &#123;&#125;; // (A)\n        if (obj != null) &#123;\n            for (var key in obj) &#123;\n                if (Object.prototype.hasOwnProperty.call(obj, key))\n                    newObj[key] = obj[key];\n            &#125;\n        &#125;\n        newObj.default = obj;\n        return newObj;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"import-a-from-‘-a-js’\"><a href=\"#import-a-from-‘-a-js’\" class=\"headerlink\" title=\"import { a } from ‘./a.js’\"></a>import { a } from ‘./a.js’</h2><p>直接转换成 <code>require(&#39;./a.js&#39;).a</code> 即可。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经过上面的转换分析，我们得知即使我们使用了 es6 的模块系统，如果借助 babel 的转换，es6 的模块系统最终还是会转换成 commonjs 的规范。所以我们如果是使用 babel 转换 es6 模块，混合使用 es6 的模块和 commonjs 的规范是没有问题的，因为最终都会转换成 commonjs。</p>\n<p><strong>这里解释了问题3</strong></p>\n<blockquote>\n<p>为什么可以使用 es6 的 import 去引用 commonjs 规范定义的模块，或者反过来也可以又是为什么？</p>\n</blockquote>\n<h2 id=\"babel5-amp-babel6\"><a href=\"#babel5-amp-babel6\" class=\"headerlink\" title=\"babel5 &amp; babel6\"></a>babel5 &amp; babel6</h2><p>我们在上文 babel 对导出模块的转换提到，es6 的 <code>[export default](https://www.zhihu.com/search?q=export+default&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)</code> 都会被转换成 <code>exports.default</code>，即使这个模块只有这一个输出。</p>\n<p><strong>这也解释了问题1</strong></p>\n<blockquote>\n<p>为何有的地方使用 <code>require</code> 去引用一个模块时需要加上 <code>default</code>？ <code>require(&#39;xx&#39;).default</code></p>\n</blockquote>\n<p>我们经常会使用 es6 的 export default 来输出模块，而且这个输出是这个模块的唯一输出，我们会误以为这种写法输出的是模块的默认输出。</p>\n<pre><code>// a.js\n\nexport default 123;\n\n// b.js 错误\n\nvar foo = require(&#39;./a.js&#39;)\n</code></pre>\n<p>在使用 <code>require</code> 进行引用时，我们也会误以为引入的是a文件的默认输出。</p>\n<p>结果这里需要改成 <code>var foo = require(&#39;./a.js&#39;).default</code></p>\n<p>这个场景在写 webpack 代码分割逻辑时经常会遇到。</p>\n<pre><code>require.ensure([], (require) =&gt; &#123;\n   callback(null, [\n     require(&#39;./src/pages/profitList&#39;).default,\n   ]);\n &#125;);\n</code></pre>\n<p>这是 babel6 的变更，在 babel5 的时候可不是这样的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-32ff28dae9821709159c1a71a0009840_r.jpg\"></p>\n<p><a href=\"https://link.zhihu.com/?target=http://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/%23strict\">http://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/#strict</a></p>\n<p>在 babel5 时代，大部分人在用 require 去引用 es6 输出的 default，只是把 default 输出看作是一个模块的默认输出，所以 babel5 对这个逻辑做了 hack，如果一个 es6 模块只有一个 default 输出，那么在转换成 commonjs 的时候也一起赋值给 <code>module.exports</code>，即整个导出对象被赋值了 default 所对应的值。</p>\n<p>这样就不需要加 default，<code>require(&#39;./a.js&#39;)</code> 的值就是想要的 default值。</p>\n<p>但这样做是不符合 es6 的定义的，在es6 的定义里，default 只是个名字，没有任何意义。</p>\n<pre><code>export default = 123;\nexport const a = 123;\n</code></pre>\n<p>这两者含义是一样的，分别为输出名为 default 和 a 的变量。</p>\n<p>还有一个很重要的问题，一旦 a.js 文件里又添加了一个具名的输出，那么引入方就会出麻烦。</p>\n<pre><code>// a.js\n\nexport default 123;\n\nexport const a = 123; // 新增\n\n// b.js \n\nvar foo = require(&#39;./a.js&#39;);\n\n// 由之前的 输出 123\n// 变成 &#123; default: 123, a: 123 &#125;\n</code></pre>\n<p>所以 babel6 去掉了这个hack，这是个正确的决定，升级 babel6 后产生的不兼容问题 可以通过引入 <a href=\"https://link.zhihu.com/?target=https://www.npmjs.com/package/babel-plugin-add-module-exports\">babel-plugin-add-module-exports</a> 解决。</p>\n<h2 id=\"webpack-编译后的js，如何再被其他模块引用\"><a href=\"#webpack-编译后的js，如何再被其他模块引用\" class=\"headerlink\" title=\"webpack 编译后的js，如何再被其他模块引用\"></a>webpack 编译后的js，如何再被其他模块引用</h2><p>通过 webpack 模块化原理章节给出的 webpack 配置编译后的 js 是无法被其他模块引用的，webpack 提供了 <code>output.libraryTarget</code> 配置指定构建完的 js 的用途。</p>\n<h2 id=\"默认-var\"><a href=\"#默认-var\" class=\"headerlink\" title=\"默认 var\"></a>默认 var</h2><p>如果指定了 <code>output.library = &#39;test&#39;</code><br>入口模块返回的 module.exports 暴露给全局 var test = returned_module_exports</p>\n<h2 id=\"commonjs\"><a href=\"#commonjs\" class=\"headerlink\" title=\"commonjs\"></a>commonjs</h2><p>如果library: ‘spon-ui’ 入口模块返回的 module.exports 赋值给 exports[‘spon-ui’]</p>\n<h2 id=\"commonjs2\"><a href=\"#commonjs2\" class=\"headerlink\" title=\"commonjs2\"></a>commonjs2</h2><p>入口模块返回的 module.exports 赋值给 module.exports</p>\n<p>所以 element-ui 的构建方式采用 commonjs2 ，导出的组件的js 最后都会赋值给 module.exports，供其他模块引用。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-887230493670c8bc8950998e6a32d521_r.jpg\"></p>\n<p><strong>这里解释了问题4</strong></p>\n<blockquote>\n<p>我们在浏览一些 npm 下载下来的 UI 组件模块时（比如说 element-ui 的 lib 文件下），看到的都是 webpack 编译好的 js 文件，可以使用 import 或 require 再去引用。但是我们平时编译好的 js 是无法再被其他模块 import 的，这是为什么？</p>\n</blockquote>\n<h2 id=\"模块依赖的优化\"><a href=\"#模块依赖的优化\" class=\"headerlink\" title=\"模块依赖的优化\"></a>模块依赖的优化</h2><h2 id=\"按需加载的原理\"><a href=\"#按需加载的原理\" class=\"headerlink\" title=\"按需加载的原理\"></a>按需加载的原理</h2><p>我们在使用各大 UI 组件库时都会被介绍到为了避免引入全部文件，请使用 <code>babel-plugin-component</code> 等babel 插件。</p>\n<pre><code>import &#123; Button, Select &#125; from &#39;element-ui&#39;\n</code></pre>\n<p>由前文可知 import 会先转换为 commonjs， 即</p>\n<pre><code>var a = require(&#39;element-ui&#39;);\nvar Button = a.Button;\nvar Select = a.Select;\n</code></pre>\n<p><code>var a = require(&#39;element-ui&#39;);</code> 这个过程就会将所有组件都引入进来了。</p>\n<p>所以 <code>babel-plugin-component</code>就做了一件事，将 <code>import &#123; Button, Select &#125; from &#39;element-ui&#39;</code> 转换成了</p>\n<pre><code>import Button from &#39;element-ui/lib/button&#39;\nimport Select from &#39;element-ui/lib/select&#39;\n</code></pre>\n<p>即使转换成了 commonjs 规范，也只是引入自己这个组件的js，将引入量减少到最低。</p>\n<p>所以我们会看到几乎所有的UI组件库的目录形式都是</p>\n<pre><code>|-lib\n||--component1\n||--component2\n||--component3\n|-index.common.js\n</code></pre>\n<p><code>index.common.js</code> 给 <code>import element from &#39;element-ui&#39;</code> 这种形式调用全部组件。</p>\n<p>lib 下的各组件用于按需引用。</p>\n<p><strong>这里解释了问题2</strong></p>\n<blockquote>\n<p>经常在各大UI组件引用的文档上会看到说明 <code>import &#123; button &#125; from &#39;xx-ui&#39;</code> 这样会引入所有组件内容，需要添加额外的 babel 配置，比如 <code>babel-plugin-component</code>？</p>\n</blockquote>\n<h2 id=\"tree-shaking\"><a href=\"#tree-shaking\" class=\"headerlink\" title=\"tree-shaking\"></a>tree-shaking</h2><p>webpack2 开始引入 tree-shaking 技术，通过静态分析 es6 的语法，可以删除没有被使用的模块。他只对 es6 的模块有效，所以一旦 babel 将 es6 的模块转换成 commonjs，webpack2 将无法使用这项优化。所以要使用这项技术，我们只能使用 webpack 的模块处理，加上 babel 的es6转换能力（需要关闭模块转换）。</p>\n<p>最方便的使用方法为修改babel的配置。</p>\n<pre><code>use: &#123;\n     loader: &#39;babel-loader&#39;,\n     options: &#123;\n       presets: [[&#39;babel-preset-es2015&#39;, &#123;modules: false&#125;]],\n     &#125;\n   &#125;\n</code></pre>\n<p>修改最开始demo</p>\n<pre><code>// webpack\n\nconst path = require(&#39;path&#39;);\n\nmodule.exports = &#123;\n  entry: &#39;./a.js&#39;,\n  output: &#123;\n    path: path.resolve(__dirname, &#39;dist&#39;),\n    filename: &#39;bundle.js&#39;,\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        test: /\\.js$/,\n        exclude: /(node_modules|bower_components)/,\n        use: &#123;\n          loader: &#39;babel-loader&#39;,\n          options: &#123;\n            presets: [[&#39;babel-preset-es2015&#39;, &#123;modules: false&#125;]],\n          &#125;\n        &#125;\n      &#125;\n    ]\n  &#125;\n&#125;;\n// a.js\nimport a from &#39;./c&#39;;\n\nexport default &#39;a.js&#39;;\nconsole.log(a);\n// c.js\n\nexport default 333;\n\nconst foo = 123;\nexport &#123; foo &#125;;\n</code></pre>\n<p>修改的点在于增加了babel，并关闭其modules功能。然后在 c.js 中增加一个输出 <code>export &#123; foo &#125;</code>，但是 a.js 中并不引用它。</p>\n<p>最后在编译出的 js 中，c.js 模块如下:</p>\n<pre><code>&quot;use strict&quot;;\n/* unused harmony export foo */\n/* harmony default export */ __webpack_exports__[&quot;a&quot;] = (333);\n\nvar foo = 123;\n</code></pre>\n<p><a href=\"https://www.zhihu.com/search?q=foo+%E5%8F%98%E9%87%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:31929490%7D\">foo 变量</a>被标记为没有使用，在最后压缩时这段会被删除。</p>\n<p>需要说明的是，即使在 引入模块时使用了 es6 ，但是引入的那个模块却是使用 commonjs 进行输出，这也无法使用tree-shaking。</p>\n<p>而第三方库大多是遵循 commonjs 规范的，这也造成了引入第三方库无法减少不必要的引入。</p>\n<p>所以对于未来来说第三方库要同时发布 commonjs 格式和 es6 格式的模块。es6 模块的入口由 package.json 的字段 module 指定。而 commonjs 则还是在 main 字段指定。</p>\n<p><strong>这里解释了问题6</strong></p>\n<blockquote>\n<p>听说 es6 还有 <code>tree-shaking</code> 功能，怎么才能使用这个功能？</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"import、require、export、module-exports-混合使用详解\"><a href=\"#import、require、export、module-exports-混合使用详解\" class=\"headerlink\" title=\"import、require、export、module.exports 混合使用详解\"></a>import、require、export、module.exports 混合使用详解</h2><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>自从使用了 es6 的模块系统后，各种地方愉快地使用 <code>import</code> <code>export default</code>，但也会在老项目中看到使用commonjs规范的 <code>require</code> <code>module.exports</code>。甚至有时候也会常常看到两者互用的场景。使用没有问题，但其中的关联与区别不得其解，使用起来也糊里糊涂。比如：</p>\n<ol>\n<li> 为何有的地方使用 <code>require</code> 去引用一个模块时需要加上 <code>default</code>？ <code>require(&#39;xx&#39;).default</code></li>\n<li> 经常在各大UI组件引用的文档上会看到说明 <code>import &#123; button &#125; from &#39;xx-ui&#39;</code> 这样会引入所有组件内容，需要添加额外的 babel 配置，比如 <code>[babel-plugin-component](https://www.zhihu.com/search?q=babel-plugin-component&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)</code>？</li>\n<li> 为什么可以使用 es6 的 import 去引用 commonjs 规范定义的模块，或者反过来也可以又是为什么？</li>\n<li> 我们在浏览一些 npm 下载下来的 UI 组件模块时（比如说 <a href=\"https://www.zhihu.com/search?q=element-ui&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:31929490%7D\">element-ui</a> 的 lib 文件下），看到的都是 webpack 编译好的 js 文件，可以使用 import 或 require 再去引用。但是我们平时编译好的 js 是无法再被其他模块 import 的，这是为什么？</li>\n<li> babel 在模块化的场景中充当了什么角色？以及 webpack ？哪个启到了关键作用？</li>\n<li> 听说 es6 还有 <code>[tree-shaking](https://www.zhihu.com/search?q=tree-shaking&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)</code> 功能，怎么才能使用这个功能？</li>\n</ol>\n<p>如果你对这些问题都了然于心，那么可以关掉本文了，如果有疑问，这篇文章就是为你准备的！</p>\n<h2 id=\"webpack-与-babel-在模块化中的作用\"><a href=\"#webpack-与-babel-在模块化中的作用\" class=\"headerlink\" title=\"webpack 与 babel 在模块化中的作用\"></a>webpack 与 babel 在模块化中的作用</h2><h2 id=\"webpack-模块化的原理\"><a href=\"#webpack-模块化的原理\" class=\"headerlink\" title=\"webpack 模块化的原理\"></a>webpack 模块化的原理</h2><p>webpack 本身维护了一套模块系统，这套模块系统兼容了所有前端历史进程下的模块规范，包括 <code>amdcommonjs</code> <code>es6</code> 等，本文主要针对 <code>commonjs es6</code> 规范进行说明。模块化的实现其实就在最后编译的文件内。</p>\n<p>我编写了一个 demo 更好的展示效果。</p>\n<pre><code>// webpack\n\nconst path = require(&#39;path&#39;);\n\nmodule.exports = &#123;\n  entry: &#39;./a.js&#39;,\n  output: &#123;\n    path: path.resolve(__dirname, &#39;dist&#39;),\n    filename: &#39;bundle.js&#39;,\n  &#125;\n&#125;;\n// a.js\nimport a from &#39;./c&#39;;\n\nexport default &#39;a.js&#39;;\nconsole.log(a);\n// c.js\n\nexport default 333;\n(function(modules) &#123;\n\n  \n  function __webpack_require__(moduleId) &#123;\n    var module =  &#123;\n      i: moduleId,\n      l: false,\n      exports: &#123;&#125;\n    &#125;;\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    return module.exports;\n  &#125;\n\n  return __webpack_require__(0);\n&#125;)([\n  (function (module, __webpack_exports__, __webpack_require__) &#123;\n\n    // 引用 模块 1\n    &quot;use strict&quot;;\n    Object.defineProperty(__webpack_exports__, &quot;__esModule&quot;, &#123; value: true &#125;);\n    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c__ = __webpack_require__(1);\n\n/* harmony default export */ __webpack_exports__[&quot;default&quot;] = (&#39;a.js&#39;);\nconsole.log(__WEBPACK_IMPORTED_MODULE_0__c__[&quot;a&quot; /* default */]);\n\n  &#125;),\n  (function (module, __webpack_exports__, __webpack_require__) &#123;\n\n    // 输出本模块的数据\n    &quot;use strict&quot;;\n    /* harmony default export */ __webpack_exports__[&quot;a&quot;] = (333);\n  &#125;)\n]);\n</code></pre>\n<p>上面这段 js 就是使用 webpack 编译后的代码（经过精简），其中就包含了 webpack的运行时代码，其中就是关于模块的实现。</p>\n<p>我们再精简下代码，会发现这是个自执行函数。</p>\n<pre><code>(function(modules) &#123;\n\n&#125;)([]);\n</code></pre>\n<p>自执行函数的入参是个数组，这个数组包含了所有的模块，包裹在函数中。</p>\n<p>自执行函数体里的逻辑就是处理模块的逻辑。关键在于 <code>__webpack_require__</code> 函数，这个函数就是 <code>require</code> 或者是 <code>import</code> 的替代，我们可以看到在函数体内先定义了这个函数，然后调用了他。这里会传入一个 <code>moduleId</code>，这个例子中是0，也就是我们的入口模块 <code>a.js</code> 的内容。</p>\n<p>我们再看 <code>__webpack_require__</code> 内执行了</p>\n<pre><code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\nreturn module.exports；\n</code></pre>\n<p>即从入参的 modules 数组中取第一个函数进行调用，并入参</p>\n<ul>\n<li>  module</li>\n<li>  module.exports</li>\n<li>  <strong>webpack_require</strong></li>\n</ul>\n<p>我们再看第一个函数（即入口模块）的逻辑（精简）：</p>\n<pre><code>function (module, __webpack_exports__, __webpack_require__) &#123;\n\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c__ = __webpack_require__(1);\n\n    /* harmony default export */ __webpack_exports__[&quot;default&quot;] = (&#39;a.js&#39;);\n    console.log(__WEBPACK_IMPORTED_MODULE_0__c__[&quot;a&quot; /* default */]);\n\n  &#125;\n</code></pre>\n<p>我们可以看到入口模块又调用了 <code>__webpack_require__(1)</code> 去引用入参数组里的第2个函数。</p>\n<p>然后会将入参的 <code>__webpack_exports__</code> 对象添加 <code>default</code> 属性，并赋值。</p>\n<p>这里我们就能看到模块化的实现原理，这里的 <code>__[webpack_exports](https://www.zhihu.com/search?q=webpack_exports&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)__</code> 就是这个模块的 <code>module.exports</code> 通过对象的引用传参，间接的给 module.exports 添加属性。</p>\n<p>最后会将 module.exports return 出来。就完成了 <code>__webpack_require__</code> 函数的使命。</p>\n<p>比如在入口模块中又调用了 <code>__webpack_require__(1)</code>，就会得到这个模块返回的 <code>module.exports</code>。</p>\n<p>**但在这个自执行函数的底部，<code>webpack</code> 会将入口模块的输出也进行返回 **</p>\n<pre><code>return __webpack_require__(0);\n</code></pre>\n<p>目前这种编译后的js，将入口模块的输出（即 <code>[module.exports](https://www.zhihu.com/search?q=module.exports&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)</code>） 进行输出没有任何作用，只会作用于当前作用域。这个js并不能被其他模块继续以 <code>require</code> 或 <code>import</code> 的方式引用。</p>\n<h2 id=\"babel-的作用\"><a href=\"#babel-的作用\" class=\"headerlink\" title=\"babel 的作用\"></a>babel 的作用</h2><p>按理说 webpack 的模块化方案已经很好的将es6 模块化转换成 webpack 的模块化，但是其余的 es6 语法还需要做兼容性处理。babel 专门用于处理 es6 转换 es5。当然这也包括 es6 的模块语法的转换。</p>\n<p><strong>其实两者的转换思路差不多，区别在于 webpack 的原生转换 可以多做一步静态分析，使用tree-shaking 技术（下面会讲到）</strong></p>\n<blockquote>\n<p>babel 能提前将 es6 的 import 等模块关键字转换成 commonjs 的规范。这样 webpack 就无需再做处理，直接使用 webpack 运行时定义的 <code>__webpack_require__</code> 处理。</p>\n</blockquote>\n<p>这里就解释了 <strong>问题5</strong>。</p>\n<blockquote>\n<p>babel 在模块化的场景中充当了什么角色？以及 webpack ？哪个启到了关键作用？</p>\n</blockquote>\n<p>那么 babel 是如何转换 es6 的模块语法呢？</p>\n<h2 id=\"导出模块\"><a href=\"#导出模块\" class=\"headerlink\" title=\"导出模块\"></a>导出模块</h2><p>es6 的导出模块写法有</p>\n<pre><code>export default 123;\n\nexport const a = 123;\n\nconst b = 3;\nconst c = 4;\nexport &#123; b, c &#125;;\n</code></pre>\n<p>babel 会将这些统统转换成 commonjs 的 exports。</p>\n<pre><code>exports.default = 123;\nexports.a = 123;\nexports.b = 3;\nexports.c = 4;\nexports.__esModule = true;\n</code></pre>\n<p>babel 转换 es6 的模块输出逻辑非常简单，即将所有输出都赋值给 exports，并带上一个标志 <code>__esModule</code>表明这是个由 es6 转换来的 commonjs 输出。</p>\n<p>babel将模块的导出转换为commonjs规范后，也会将引入 import 也转换为 commonjs 规范。即采用 require 去引用模块，再加以一定的处理，符合es6的使用意图。</p>\n<h2 id=\"引入-default\"><a href=\"#引入-default\" class=\"headerlink\" title=\"引入 default\"></a>引入 default</h2><p>对于最常见的</p>\n<pre><code>import a from &#39;./a.js&#39;;\n</code></pre>\n<p>在es6中 import a from ‘./a.js’ 的本意是想去引入一个 es6 模块中的 default 输出。</p>\n<p>通过babel转换后得到 <code>var a = require(./a.js)</code> 得到的对象却是整个对象，肯定不是 es6 语句的本意，所以需要对 a 做些改变。</p>\n<p>我们在导出提到，default 输出会赋值给导出对象的default属性。</p>\n<pre><code>exports.default = 123;\n</code></pre>\n<p>所以 babel 加了个 help <code>_interopRequireDefault</code> 函数。</p>\n<pre><code>function _interopRequireDefault(obj) &#123;\n    return obj &amp;&amp; obj.__esModule\n        ? obj\n        : &#123; &#39;default&#39;: obj &#125;;\n&#125;\n\nvar _a = require(&#39;assert&#39;);\nvar _a2 = _interopRequireDefault(_a);\n\nvar a = _a2[&#39;default&#39;];\n</code></pre>\n<p>所以这里最后的 a 变量就是 require 的值的 default 属性。如果原先就是commonjs规范的模块，那么就是那个模块的导出对象。</p>\n<h2 id=\"引入-通配符\"><a href=\"#引入-通配符\" class=\"headerlink\" title=\"引入 * 通配符\"></a>引入 * 通配符</h2><p>我们使用 <code>import * as a from &#39;./a.js&#39;</code> es6语法的本意是想将 es6 模块的所有命名输出以及defalut输出打包成一个对象赋值给a变量。</p>\n<p>已知以 commonjs 规范导出：</p>\n<pre><code>exports.default = 123;\nexports.a = 123;\nexports.b = 3;\nexports.__esModule = true;\n</code></pre>\n<p>那么对于 es6 转换来的输出通过 <code>var a = require(&#39;./a.js&#39;)</code> 导入这个对象就已经符合意图。</p>\n<p>所以直接返回这个对象。</p>\n<pre><code>if (obj &amp;&amp; obj.__esModule) &#123;\n   return obj;\n&#125;\n</code></pre>\n<p>如果本来就是 commonjs 规范的模块，导出时没有default属性，需要添加一个default属性，并把整个模块对象再次赋值给default属性。</p>\n<pre><code>function _interopRequireWildcard(obj) &#123;\n    if (obj &amp;&amp; obj.__esModule) &#123;\n        return obj;\n    &#125;\n    else &#123;\n        var newObj = &#123;&#125;; // (A)\n        if (obj != null) &#123;\n            for (var key in obj) &#123;\n                if (Object.prototype.hasOwnProperty.call(obj, key))\n                    newObj[key] = obj[key];\n            &#125;\n        &#125;\n        newObj.default = obj;\n        return newObj;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"import-a-from-‘-a-js’\"><a href=\"#import-a-from-‘-a-js’\" class=\"headerlink\" title=\"import { a } from ‘./a.js’\"></a>import { a } from ‘./a.js’</h2><p>直接转换成 <code>require(&#39;./a.js&#39;).a</code> 即可。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经过上面的转换分析，我们得知即使我们使用了 es6 的模块系统，如果借助 babel 的转换，es6 的模块系统最终还是会转换成 commonjs 的规范。所以我们如果是使用 babel 转换 es6 模块，混合使用 es6 的模块和 commonjs 的规范是没有问题的，因为最终都会转换成 commonjs。</p>\n<p><strong>这里解释了问题3</strong></p>\n<blockquote>\n<p>为什么可以使用 es6 的 import 去引用 commonjs 规范定义的模块，或者反过来也可以又是为什么？</p>\n</blockquote>\n<h2 id=\"babel5-amp-babel6\"><a href=\"#babel5-amp-babel6\" class=\"headerlink\" title=\"babel5 &amp; babel6\"></a>babel5 &amp; babel6</h2><p>我们在上文 babel 对导出模块的转换提到，es6 的 <code>[export default](https://www.zhihu.com/search?q=export+default&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A31929490%7D)</code> 都会被转换成 <code>exports.default</code>，即使这个模块只有这一个输出。</p>\n<p><strong>这也解释了问题1</strong></p>\n<blockquote>\n<p>为何有的地方使用 <code>require</code> 去引用一个模块时需要加上 <code>default</code>？ <code>require(&#39;xx&#39;).default</code></p>\n</blockquote>\n<p>我们经常会使用 es6 的 export default 来输出模块，而且这个输出是这个模块的唯一输出，我们会误以为这种写法输出的是模块的默认输出。</p>\n<pre><code>// a.js\n\nexport default 123;\n\n// b.js 错误\n\nvar foo = require(&#39;./a.js&#39;)\n</code></pre>\n<p>在使用 <code>require</code> 进行引用时，我们也会误以为引入的是a文件的默认输出。</p>\n<p>结果这里需要改成 <code>var foo = require(&#39;./a.js&#39;).default</code></p>\n<p>这个场景在写 webpack 代码分割逻辑时经常会遇到。</p>\n<pre><code>require.ensure([], (require) =&gt; &#123;\n   callback(null, [\n     require(&#39;./src/pages/profitList&#39;).default,\n   ]);\n &#125;);\n</code></pre>\n<p>这是 babel6 的变更，在 babel5 的时候可不是这样的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-32ff28dae9821709159c1a71a0009840_r.jpg\"></p>\n<p><a href=\"https://link.zhihu.com/?target=http://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/%23strict\">http://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/#strict</a></p>\n<p>在 babel5 时代，大部分人在用 require 去引用 es6 输出的 default，只是把 default 输出看作是一个模块的默认输出，所以 babel5 对这个逻辑做了 hack，如果一个 es6 模块只有一个 default 输出，那么在转换成 commonjs 的时候也一起赋值给 <code>module.exports</code>，即整个导出对象被赋值了 default 所对应的值。</p>\n<p>这样就不需要加 default，<code>require(&#39;./a.js&#39;)</code> 的值就是想要的 default值。</p>\n<p>但这样做是不符合 es6 的定义的，在es6 的定义里，default 只是个名字，没有任何意义。</p>\n<pre><code>export default = 123;\nexport const a = 123;\n</code></pre>\n<p>这两者含义是一样的，分别为输出名为 default 和 a 的变量。</p>\n<p>还有一个很重要的问题，一旦 a.js 文件里又添加了一个具名的输出，那么引入方就会出麻烦。</p>\n<pre><code>// a.js\n\nexport default 123;\n\nexport const a = 123; // 新增\n\n// b.js \n\nvar foo = require(&#39;./a.js&#39;);\n\n// 由之前的 输出 123\n// 变成 &#123; default: 123, a: 123 &#125;\n</code></pre>\n<p>所以 babel6 去掉了这个hack，这是个正确的决定，升级 babel6 后产生的不兼容问题 可以通过引入 <a href=\"https://link.zhihu.com/?target=https://www.npmjs.com/package/babel-plugin-add-module-exports\">babel-plugin-add-module-exports</a> 解决。</p>\n<h2 id=\"webpack-编译后的js，如何再被其他模块引用\"><a href=\"#webpack-编译后的js，如何再被其他模块引用\" class=\"headerlink\" title=\"webpack 编译后的js，如何再被其他模块引用\"></a>webpack 编译后的js，如何再被其他模块引用</h2><p>通过 webpack 模块化原理章节给出的 webpack 配置编译后的 js 是无法被其他模块引用的，webpack 提供了 <code>output.libraryTarget</code> 配置指定构建完的 js 的用途。</p>\n<h2 id=\"默认-var\"><a href=\"#默认-var\" class=\"headerlink\" title=\"默认 var\"></a>默认 var</h2><p>如果指定了 <code>output.library = &#39;test&#39;</code><br>入口模块返回的 module.exports 暴露给全局 var test = returned_module_exports</p>\n<h2 id=\"commonjs\"><a href=\"#commonjs\" class=\"headerlink\" title=\"commonjs\"></a>commonjs</h2><p>如果library: ‘spon-ui’ 入口模块返回的 module.exports 赋值给 exports[‘spon-ui’]</p>\n<h2 id=\"commonjs2\"><a href=\"#commonjs2\" class=\"headerlink\" title=\"commonjs2\"></a>commonjs2</h2><p>入口模块返回的 module.exports 赋值给 module.exports</p>\n<p>所以 element-ui 的构建方式采用 commonjs2 ，导出的组件的js 最后都会赋值给 module.exports，供其他模块引用。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-887230493670c8bc8950998e6a32d521_r.jpg\"></p>\n<p><strong>这里解释了问题4</strong></p>\n<blockquote>\n<p>我们在浏览一些 npm 下载下来的 UI 组件模块时（比如说 element-ui 的 lib 文件下），看到的都是 webpack 编译好的 js 文件，可以使用 import 或 require 再去引用。但是我们平时编译好的 js 是无法再被其他模块 import 的，这是为什么？</p>\n</blockquote>\n<h2 id=\"模块依赖的优化\"><a href=\"#模块依赖的优化\" class=\"headerlink\" title=\"模块依赖的优化\"></a>模块依赖的优化</h2><h2 id=\"按需加载的原理\"><a href=\"#按需加载的原理\" class=\"headerlink\" title=\"按需加载的原理\"></a>按需加载的原理</h2><p>我们在使用各大 UI 组件库时都会被介绍到为了避免引入全部文件，请使用 <code>babel-plugin-component</code> 等babel 插件。</p>\n<pre><code>import &#123; Button, Select &#125; from &#39;element-ui&#39;\n</code></pre>\n<p>由前文可知 import 会先转换为 commonjs， 即</p>\n<pre><code>var a = require(&#39;element-ui&#39;);\nvar Button = a.Button;\nvar Select = a.Select;\n</code></pre>\n<p><code>var a = require(&#39;element-ui&#39;);</code> 这个过程就会将所有组件都引入进来了。</p>\n<p>所以 <code>babel-plugin-component</code>就做了一件事，将 <code>import &#123; Button, Select &#125; from &#39;element-ui&#39;</code> 转换成了</p>\n<pre><code>import Button from &#39;element-ui/lib/button&#39;\nimport Select from &#39;element-ui/lib/select&#39;\n</code></pre>\n<p>即使转换成了 commonjs 规范，也只是引入自己这个组件的js，将引入量减少到最低。</p>\n<p>所以我们会看到几乎所有的UI组件库的目录形式都是</p>\n<pre><code>|-lib\n||--component1\n||--component2\n||--component3\n|-index.common.js\n</code></pre>\n<p><code>index.common.js</code> 给 <code>import element from &#39;element-ui&#39;</code> 这种形式调用全部组件。</p>\n<p>lib 下的各组件用于按需引用。</p>\n<p><strong>这里解释了问题2</strong></p>\n<blockquote>\n<p>经常在各大UI组件引用的文档上会看到说明 <code>import &#123; button &#125; from &#39;xx-ui&#39;</code> 这样会引入所有组件内容，需要添加额外的 babel 配置，比如 <code>babel-plugin-component</code>？</p>\n</blockquote>\n<h2 id=\"tree-shaking\"><a href=\"#tree-shaking\" class=\"headerlink\" title=\"tree-shaking\"></a>tree-shaking</h2><p>webpack2 开始引入 tree-shaking 技术，通过静态分析 es6 的语法，可以删除没有被使用的模块。他只对 es6 的模块有效，所以一旦 babel 将 es6 的模块转换成 commonjs，webpack2 将无法使用这项优化。所以要使用这项技术，我们只能使用 webpack 的模块处理，加上 babel 的es6转换能力（需要关闭模块转换）。</p>\n<p>最方便的使用方法为修改babel的配置。</p>\n<pre><code>use: &#123;\n     loader: &#39;babel-loader&#39;,\n     options: &#123;\n       presets: [[&#39;babel-preset-es2015&#39;, &#123;modules: false&#125;]],\n     &#125;\n   &#125;\n</code></pre>\n<p>修改最开始demo</p>\n<pre><code>// webpack\n\nconst path = require(&#39;path&#39;);\n\nmodule.exports = &#123;\n  entry: &#39;./a.js&#39;,\n  output: &#123;\n    path: path.resolve(__dirname, &#39;dist&#39;),\n    filename: &#39;bundle.js&#39;,\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        test: /\\.js$/,\n        exclude: /(node_modules|bower_components)/,\n        use: &#123;\n          loader: &#39;babel-loader&#39;,\n          options: &#123;\n            presets: [[&#39;babel-preset-es2015&#39;, &#123;modules: false&#125;]],\n          &#125;\n        &#125;\n      &#125;\n    ]\n  &#125;\n&#125;;\n// a.js\nimport a from &#39;./c&#39;;\n\nexport default &#39;a.js&#39;;\nconsole.log(a);\n// c.js\n\nexport default 333;\n\nconst foo = 123;\nexport &#123; foo &#125;;\n</code></pre>\n<p>修改的点在于增加了babel，并关闭其modules功能。然后在 c.js 中增加一个输出 <code>export &#123; foo &#125;</code>，但是 a.js 中并不引用它。</p>\n<p>最后在编译出的 js 中，c.js 模块如下:</p>\n<pre><code>&quot;use strict&quot;;\n/* unused harmony export foo */\n/* harmony default export */ __webpack_exports__[&quot;a&quot;] = (333);\n\nvar foo = 123;\n</code></pre>\n<p><a href=\"https://www.zhihu.com/search?q=foo+%E5%8F%98%E9%87%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:31929490%7D\">foo 变量</a>被标记为没有使用，在最后压缩时这段会被删除。</p>\n<p>需要说明的是，即使在 引入模块时使用了 es6 ，但是引入的那个模块却是使用 commonjs 进行输出，这也无法使用tree-shaking。</p>\n<p>而第三方库大多是遵循 commonjs 规范的，这也造成了引入第三方库无法减少不必要的引入。</p>\n<p>所以对于未来来说第三方库要同时发布 commonjs 格式和 es6 格式的模块。es6 模块的入口由 package.json 的字段 module 指定。而 commonjs 则还是在 main 字段指定。</p>\n<p><strong>这里解释了问题6</strong></p>\n<blockquote>\n<p>听说 es6 还有 <code>tree-shaking</code> 功能，怎么才能使用这个功能？</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}